<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: dyn 型のアップキャスト</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
<code>dyn</code> 型 (動的型) のアップキャストについて。
		</p> 
		<aside class="normal">
			<p>
このメモの背景。
			</p> <p>
<time>2023 年現在</time>、動的型から動的型へのアップキャストが面倒。
			</p> <p>
将来は <a href="https://doc.rust-lang.org/beta/unstable-book/language-features/trait-upcasting.html">trait_upcasting</a> で解決されるかもしれない。
			</p>
		</aside>
		<section>
			<h1>失敗例</h1>
			<p>
動的型から動的型へのキャストはエラーになる。
			</p>
<pre><code class="language-rust">
fn main() {
    let some = &amp;0 as &amp;dyn SomeTrait;
    let _base = <mark class="error">some</mark> as &amp;dyn BaseTrait;
}

// -- BaseTrait -- //

trait BaseTrait {}

impl&lt;T&gt; BaseTrait for T {}

// -- SomeTrait -- //

trait SomeTrait: BaseTrait {}

impl&lt;T: BaseTrait&gt; SomeTrait for T {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0658]</mark><mark class="title">: cannot cast `dyn SomeTrait` to `dyn BaseTrait`, trait upcasting coercion is experimental</mark>
<mark class="info"> --&gt;</mark> src\main.rs:3:16
<mark class="info">  |</mark>
<mark class="info">3 |</mark>     let _base = some as &amp;dyn BaseTrait;
<mark class="info">  |</mark>                 <mark class="error">^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: see issue #65991 &lt;https://github.com/rust-lang/rust/issues/65991&gt; for more information
<mark class="info">  =</mark> <mark class="title">note</mark>: required when coercing `&amp;dyn SomeTrait` into `&amp;dyn BaseTrait`
</samp></pre>
		</section> <section>
			<h1>解決策</h1>
			<p>
幾つか方法がある。
			</p>
			<dl class="normal lowProfile">
				<dt><a href="#way1">方法１</a></dt>
				<dd>基本となる戦略</dd>
				<dt><a href="#way2">方法２</a></dt>
				<dd>基底側でのアップキャスト</dd>
				<dt><a href="#way3">方法３</a></dt>
				<dd>アップキャスト用トレイト</dd>
			</dl>
			<p>
※ 方法３が最も汎用的なので迷ったらそれを選ぶとよい。
			</p>
			<section>
				<hgroup>
					<h1 id="way1">方法１</h1>
					<div class="subtitle">
						基本となる戦略
					</div>
				</hgroup>
				<p>
アップキャスト用のメソッドを派生側のトレイトに作る。
				</p> <p>
つまり、キャストの位置をトレイトの実装内へと移す。これにより、キャスト対象の静的型が分かっている箇所でキャストできるため、静的型から動的型へのキャストとなり、エラーにはならなくなる。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下では、<code>SomeTrait</code> にアップキャスト用のメソッド <code>as_base</code> を定義している。
					</p>
<pre><code class="language-rust">
fn main() {
    let some = &amp;0 as &amp;dyn SomeTrait;
    let _base = some.as_base();
}

// -- BaseTrait -- //

trait BaseTrait {}

impl&lt;T&gt; BaseTrait for T {}

// -- SomeTrait -- //

trait SomeTrait: BaseTrait {
    fn as_base(&amp;self) -&gt; &amp;dyn BaseTrait;
}

impl&lt;T: BaseTrait&gt; SomeTrait for T {
    fn as_base(&amp;self) -&gt; &amp;dyn BaseTrait {
        self
    }
}
</code></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1 id="way2">方法２</h1>
					<div class="subtitle">
						基底側でのアップキャスト
					</div>
				</hgroup>
				<p>
アップキャスト用メソッドを派生側ではなく基底側に作っておく。
				</p> <p>
この方法は、複数の派生トレイトに楽に対応できる。
				</p> <p>
ただし、基底側が定義済だと使えない。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下では、<code>BaseTrait</code> にアップキャスト用のメソッド <code>as_base</code> を定義している。
					</p>
<pre><code class="language-rust">
fn main() {
    let some = &amp;0 as &amp;dyn SomeTrait;
    let _base = some.as_base();
}

// -- BaseTrait -- //

trait BaseTrait {
    fn as_base(&amp;self) -&gt; &amp;dyn BaseTrait;
}

impl&lt;T&gt; BaseTrait for T {
    fn as_base(&amp;self) -&gt; &amp;dyn BaseTrait {
        self
    }
}

// -- SomeTrait -- //

trait SomeTrait: BaseTrait {}

impl&lt;T: BaseTrait&gt; SomeTrait for T {}
</code></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1 id="way3">方法３</h1>
					<div class="subtitle">
						アップキャスト用トレイト
					</div>
				</hgroup>
				<p>
予めアップキャスト用のトレイトを作っておく。
				</p> <p>
この方法は、複数の派生トレイトに楽に対応できる。
				</p> <p>
また、基底側が定義済でも使える。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下では、定義済の <a href="https://doc.rust-lang.org/std/any/trait.Any.html"><code>Any</code></a> へのアップキャスト用に <code>AsAny</code> を用意している。
					</p>
<pre><code class="language-rust">
use std::any::Any;

fn main() {
    let some = &amp;0 as &amp;dyn SomeTrait;
    let _any = some.as_any();
}

// -- AsAny -- //

trait AsAny: Any {
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
}

impl&lt;T: Any&gt; AsAny for T {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {
        self
    }
}

// -- SomeTrait -- //

trait SomeTrait: Any + AsAny {
    fn test(&amp;self) {
        let _any = self.as_any();
    }
}

impl&lt;T: Any&gt; SomeTrait for T {}
</code></pre>
				</section>
			</section>
		</section> <section>
			<h1>発展形</h1>
			<p>
上記では、不変参照を通したアップキャストについて説明したが、他にも可変参照や <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box</code></a> を通した関数があると便利 (<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box</code></a> 以外のスマートポインタ、例えば <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc</code></a> などは、<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box</code></a> から <a href="https://doc.rust-lang.org/std/convert/trait.From.html"><code>From</code></a> トレイトで変換できるため、事前に関数を用意しておく必要性は低い)。
			</p>
			<section>
				<h2>サンプルコード</h2>
				<p>
以下では、前述の『<a href="#way3">方法３</a>』のサンプルコードの <code>AsAny</code> を強化している。
				</p>
<pre><code class="language-rust">
trait AsAny: Any {
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
    fn as_any_mut(&amp;mut self) -&gt; &amp;mut dyn Any;
    fn as_any_box(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn Any&gt;;
}

impl&lt;T: Any&gt; AsAny for T {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {
        self
    }

    fn as_any_mut(&amp;mut self) -&gt; &amp;mut dyn Any {
        self
    }

    fn as_any_box(self: Box&lt;Self&gt;) -&gt; Box&lt;dyn Any&gt; {
        self
    }
}
</code></pre>
			</section>
		</section>
	</body>
</html>
