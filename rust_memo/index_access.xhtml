<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: 添字アクセス。</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
添字アクセスの裏側について。
		</p>
		<section>
			<h1>簡単な例</h1>
			<p>
以下は各種の添字アクセス。
			</p>
<pre><code class="language-rust">
let arr: [i32;6] = [0, 1, 2, 3, 4, 5];
let value: i32 = arr[2]; // 2
let slice: &amp;[i32] = &amp;arr[..];    // 0, 1, 2, 3, 4, 5
let slice: &amp;[i32] = &amp;arr[2..];   // 2, 3, 4, 5
let slice: &amp;[i32] = &amp;arr[..4];   // 0, 1, 2, 3
let slice: &amp;[i32] = &amp;arr[2..4];  // 2, 3
let slice: &amp;[i32] = &amp;arr[..=4];  // 0, 1, 2, 3, 4
let slice: &amp;[i32] = &amp;arr[2..=4]; // 2, 3, 4
let slice: &amp;[i32] = &amp;arr[(Bound::Excluded(2), Bound::Unbounded)]; // 3, 4, 5
</code></pre>
		</section> <section>
			<h1>型の論理構造</h1>
			<p>
添字式は <a href="https://doc.rust-lang.org/std/ops/trait.Index.html"><code>Index</code></a> や <a href="https://doc.rust-lang.org/std/ops/trait.IndexMut.html"><code>IndexMut</code></a> トレイトを通して処理される。スライスや配列はこれらを実装している。そして、スライスや配列の添字として使える型は、<a href="https://doc.rust-lang.org/std/slice/trait.SliceIndex.html"><code>SliceIndex</code></a> トレイトにまとめられていて、これには <code>usize</code> や範囲型が該当する。
			</p>
			<aside class="normal">
				<p><a href="https://doc.rust-lang.org/std/slice/trait.SliceIndex.html"><code>SliceIndex</code></a> の実装について。</p>
				<p>
2023 年現在、<a href="https://doc.rust-lang.org/std/slice/trait.SliceIndex.html"><code>SliceIndex</code></a> のメソッドはどれもナイトリーのため、自前での実装はできない (スライス本体を引数に各要素へのアクセスを行う類いのものが多い)。
				</p> 
			</aside>
			<section>
				<h1><code>Index</code></h1>
				<p>
<a href="https://doc.rust-lang.org/std/ops/trait.Index.html"><code>Index</code></a> トレイトは取得系の添字式を処理する。
				</p> <p>
型パラメタ <code>Idx</code> が添字型を、関連型 <code>Output</code> が出力型を表す。
				</p>
<pre><code class="language-rust">
pub trait Index&lt;Idx&gt;
where
    Idx: ?Sized,
{
    type Output: ?Sized;

    // Required method
    fn index(&amp;self, index: Idx) -&gt; &amp;Self::Output;
}
</code></pre>
			</section> <section>
				<h1><code>IndexMut</code></h1>
				<p>
<a href="https://doc.rust-lang.org/std/ops/trait.IndexMut.html"><code>IndexMut</code></a> トレイトは更新系の添字式を処理する。
				</p> <p>
このトレイトの実装には <a href="https://doc.rust-lang.org/std/ops/trait.Index.html"><code>Index</code></a> トレイトの実装が前提になっている。
				</p>
<pre><code class="language-rust">
pub trait IndexMut&lt;Idx&gt;: Index&lt;Idx&gt;
where
    Idx: ?Sized,
{
    // Required method
    fn index_mut(&amp;mut self, index: Idx) -&gt; &amp;mut Self::Output;
}
</code></pre>
			</section> <section>
				<h1>スライス</h1>
				<p>
スライス <a href="https://doc.rust-lang.org/std/primitive.slice.html"><code>[T]</code></a> は <a href="https://doc.rust-lang.org/std/ops/trait.Index.html"><code>Index&lt;I&gt;</code></a> と <a href="https://doc.rust-lang.org/std/ops/trait.IndexMut.html"><code>IndexMut&lt;I&gt;</code></a> を実装している。
				</p> <p>
ここで、添字型 <code>I</code> には <code>SliceIndex&lt;[T]&gt;</code> トレイトの実装が必要。
				</p>
<pre><code class="language-rust">
impl&lt;T, I&gt; Index&lt;I&gt; for [T]
where
    I: SliceIndex&lt;[T]&gt;,
{
    type Output = I::Output;

    /* ... */
}
</code></pre>
<pre><code class="language-rust">
impl&lt;T, I&gt; IndexMut&lt;I&gt; for [T]
where
    I: SliceIndex&lt;[T]&gt;,
{
    /* ... */
}
</code></pre>
			</section> <section>
				<h1>配列</h1>
				<p>
配列 <a href="https://doc.rust-lang.org/std/primitive.array.html"><code>[T; N]</code></a> は <a href="https://doc.rust-lang.org/std/ops/trait.Index.html"><code>Index&lt;I&gt;</code></a> と <a href="https://doc.rust-lang.org/std/ops/trait.IndexMut.html"><code>IndexMut&lt;I&gt;</code></a> を実装している。
				</p> <p>
これらの実装はスライス <a href="https://doc.rust-lang.org/std/primitive.slice.html"><code>[T]</code></a> の実装が基になっている。
				</p>
<pre><code class="language-rust">
impl&lt;T, I, const N: usize&gt; Index&lt;I&gt; for [T; N]
where
    [T]: Index&lt;I&gt;,
{
    type Output = &lt;[T] as Index&lt;I&gt;&gt;::Output;

    /* ... */
}
</code></pre>
<pre><code class="language-rust">
impl&lt;T, I, const N: usize&gt; IndexMut&lt;I&gt; for [T; N]
where
	[T]: IndexMut&lt;I&gt;,
{
    /* ... */
}
</code></pre>
			</section> <section>
				<h1><code>SliceIndex</code></h1>
				<p>
スライスや配列の添字として使える型をまとめるトレイト。
				</p> <p>
<code>SliceIndex&lt;T&gt;</code> トレイトは型 <code>T</code> むけの添字型として使われる。
				</p> 
<pre><code class="language-rust">
pub unsafe trait SliceIndex&lt;T&gt;: Sealed
where
    T: ?Sized,
{
    type Output: ?Sized;

    /* ... */
}
</code></pre>
			</section> <section>
				<h1><code>usize</code></h1>
				<p>
添字が <a href="https://doc.rust-lang.org/std/primitive.usize.html"><code>usize</code></a> の場合、出力は単一の値 <code>T</code> になる。
				</p>
<pre><code class="language-rust">
unsafe impl&lt;T&gt; SliceIndex&lt;[T]&gt; for usize {
    type Output = T;

    /* ... */
}
</code></pre>
			</section> <section>
				<h1>範囲型</h1>
				<p>
添字が範囲型の場合、出力はスライス <code>[T]</code> になる。
				</p>
<pre><code class="language-rust">
unsafe impl&lt;T&gt; SliceIndex&lt;[T]&gt; for ops::Range&lt;usize&gt; {
    type Output = [T];

    /* ... */
}
</code></pre>
				<p>
上記の <code>Range</code> を含め、以下の範囲型が使用できる。
				</p>
				<ul>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for Range&lt;usize&gt;</code></li>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for RangeFrom&lt;usize&gt;</code></li>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for RangeFull</code></li>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for RangeInclusive&lt;usize&gt;</code></li>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for RangeTo&lt;usize&gt;</code></li>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for RangeToInclusive&lt;usize&gt;</code></li>
					<li><code>impl&lt;T&gt; SliceIndex&lt;[T]&gt; for (Bound&lt;usize&gt;, Bound&lt;usize&gt;)</code></li>
				</ul>
			</section>
		</section>
	</body>
</html>
