<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: ? 演算子の使いどころ</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
エラー伝搬演算子 (<code>?</code> 演算子) は戻り値の型が <code>Result</code> や <code>Option</code> の関数内で使える。
		</p> 
		<aside class="normal">
			<p>
このメモの背景。
			</p> <p>
<code>Option</code> でも使えるようになったのは、Rust のバージョン 1.22.0 (2017/11/22 リリース) 以降。その名残りか 2023 年現在でも <code>Result</code> でのみ使えるとしている記事がある。筆者も勘違いしていたのでメモを残す。
			</p> <p>
より厳密には <code>Result</code> や <code>Option</code> の背後にいる <code>Try</code> トレイトが関係しているようだが、こちらは現在ナイトリー限定の機能となっている。
			</p>
		</aside>
		<section>
			<h1><code>Result</code> による例</h1>
			<p>
<code>Result</code> では <code>Ok</code> か <code>Err</code> かで動作が分岐する。
			</p>
<pre><code class="language-rust">
fn main() {
    let result = calc().map_or("fail".to_string(), |x| format!("success: {}", x));
    println!("{result}");
}

fn calc() -&gt; Result&lt;i32, ()&gt; {
    Ok(get_src(1)? + get_src(2)?)
}

fn get_src(x: i32) -&gt; Result&lt;i32, ()&gt; {
    if x &gt; 0 { Ok(x) } else { Err(()) }
}
</code></pre>
		</section> <section>
			<h1><code>Option</code> による例</h1>
			<p>
<code>Option</code> では <code>Some</code> か <code>None</code> かで動作が分岐する。
			</p>
<pre><code class="language-rust">
fn main() {
    let result = calc().map_or("fail".to_string(), |x| format!("success: {}", x));
    println!("{result}");
}

fn calc() -&gt; Option&lt;i32&gt; {
    Some(get_src(1)? + get_src(2)?)
}

fn get_src(x: i32) -&gt; Option&lt;i32&gt; {
    if x &gt; 0 { Some(x) } else { None }
}
</code></pre>
		</section>
	</body>
</html>
