<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust トピック: Sized トレイト。</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<div class="title">
			<script>Base.insertTitle();</script>
		</div>
		<p>
<code>Sized</code> トレイトについて。
		</p>
		<section>
			<h1>基礎知識</h1>
			<p>
<code>Sized</code> トレイトはマーカートレイトであり、スタック上でのメモリサイズが固定値になる型に自動的に実装される。また、そうでない型は <code>!Sized</code> としてマークされる。そして、型がそのどちらでも構わない場合のトレイト境界には <code>?Sized</code> を指定する。
			</p>
			<aside class="normal">
				<p>
<abbr>DST</abbr> (Dynamically Sized Type)。
				</p>
				<p>
<code>!Sized</code> でマークされる型は DST やサイズなし型などと呼ばれる。
				</p>
			</aside>
			<div class="sub">
				<h2>代表的な型について</h2>
				<p>
以下の型は <code>Sized</code> になる。
				</p>
				<ul>
					<li>
一般的な型 (<code>u32</code> や <code>Vec&lt;u32&gt;</code> など)
					</li> <li>
参照型 (<code>&amp;u32</code> や <code>&amp;str</code> など)
					</li> <li>
配列型 (<code>[u32; 256]</code> など)
					</li> <li>
構造体型かつ全てのフィールドが <code>Sized</code>
					</li>
				</ul>
				<p>
以下の型は <code>!Sized</code> になる。
				</p>
				<ul>
					<li>
スライス型 (<code>[u32]</code> や <code>[i32]</code> など)
					</li> <li>
文字列スライス型 (<code>str</code> のこと)
					</li> <li>
トレイトオブジェクト (<code>dyn Display</code> など)
					</li> <li>
構造体型かつ一部のフィールドが <code>!Sized</code>
					</li>
				</ul>
				<aside class="normal">
					<p>
<code>Sized</code> トレイトと構造体について。
					</p> <p>
構造体は最後のフィールドのみ <code>!Sized</code> にできる。そして、その場合に限って構造体は <code>!Sized</code> になる。ただし、こうした構造体の初期化にはアンセーフな機能が必要になるなど、取扱いがやや難しい。
					</p>
				</aside>
			</div>
		</section> <section>
			<h1>関係各所でのルール</h1>
			<p>
関係各所で <code>Sized</code> に関する独特のルールがある。
			</p>
			<section>
				<h1>API ドキュメント</h1>
				<p>
rustdoc による API ドキュメントでは、型ごとに <q>Auto Trait Implementations</q> の項目があり、自動実装されたトレイトが一覧できる。しかし、<code>Sized</code> は文書化されず、<code>!Sized</code> のみが文書化される。そのため、<code>Sized</code> かどうかは <code>!Sized</code> を探すことになる。
				</p>
			</section> <section>
				<h1>型パラメタ</h1>
				<p>
型パラメタは暗黙で <code>Sized</code> 境界を持つ (ただし、後述の通りトレイトの <code>Self</code> は例外)。
				</p> <p>
暗黙の境界が不要な場合、<code>?Sized</code> を指定すればよい。
				</p> 
			</section> <section>
				<h1>Self</h1>
				<p>
<code>Self</code> は型パラメタの一種だが、トレイトの <code>Self</code> は暗黙の <code>Sized</code> 境界を持たない。
				</p> <p>
必要な場合、明示的に指定しなければならない。 
				</p> <p>
なお、指定した場合の扱いも他とかなり異なる。
				</p> 
				<dl class="normal">
					<dt>他と共通する扱い</dt>
					<dd>
						<ul>
							<li>
								<p>
引数や戻り値の値渡しが可能になる。
								</p>
							</li>
						</ul>
					</dd>
					<dt>他と異なる扱い</dt>
					<dd>
						<ul>
							<li>
								<p>
本来の意味での <code>Sized</code> 境界が機能しない。
								</p> <p>
つまり、<code>Self</code> が <code>!Sized</code> でもトレイトやトレイトメソッドの対象になる。 
								</p>
							</li> <li>
								<p>
トレイトの本体において、<code>Self</code> に <code>Sized</code> 境界を指定した場合。
								</p> <p>
そのトレイトのトレイトオブジェクトが作れなくなる。
								</p>
							</li> <li>
								<p>
トレイトのメソッドにおいて、<code>Self</code> に <code>Sized</code> 境界を指定した場合。
								</p> <p>
そのメソッドをトレイトオブジェクトから呼べなくなる。
								</p>
							</li>
						</ul>
					</dd>
				</dl>
				<aside class="normal moan">
					<p>
このあたりは個人的にかなりの初見殺し…。
					</p>
				</aside>
				<aside class="normal">
					<p>
コードリーディング時の注意点。
					</p> <p>
<code>Self</code> に <code>Sized</code> 境界を指定するパターンには、<code>where</code> キーワードで <code>Self: Sized</code> とする以外にも幾つかある。トレイト宣言時に <code><var>TraitName</var>: Sized</code> とする糖衣構文のパターン、ブランケット実装の型パラメタを経由して指定するパターン、さらに <code>Sized</code> を実装した他トレイトを介するパターン、これらを考慮する必要がある。
					</p>
				</aside>
			</section>
		</section>
	</body>
</html>
