<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0716 - 参照中の一時変数の破棄。</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<div class="title">
			<script>Base.insertTitle();</script>
		</div>
<pre><samp class="console-rustc">
<mark class="error">error[E0716]</mark>: temporary value dropped while borrowed
</samp></pre>
		<p>
一時変数への参照を、より長いライフタイムを持った参照として扱うとエラーになる。<br/>
これは、参照途中で参照先が破棄され、ダングリングポインタになるのを防いでくれる。
		</p>
		<section>
			<h1>サンプルコード</h1>
			<p>
以下では、<code>Foo::new()</code> により作成された一時変数について、その参照からメソッド <code>val_ref()</code> で参照を辿り、それをローカル参照の <code>local_ref</code> として処理している。つまり、一時変数に由来する参照を、ローカル参照として扱っているため、エラーになる。
			</p>
<pre><code class="language-rust">
fn main() {
    let local_ref = <mark class="error">Foo::new()</mark>.val_ref();
    println!("Value is {}.", *local_ref);
}

struct Foo {
    val: i32
}

impl Foo {
    fn new() -&gt; Self {
        Self { val: 0 }
    }
    
    fn val_ref(&amp;self) -&gt; &amp;i32 {
        &amp;self.val
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0716]</mark>: temporary value dropped while borrowed
<mark class="info"> --&gt;</mark> src\main.rs:2:21
<mark class="info">  |</mark>
<mark class="info">2 |</mark>     let local_ref = Foo::new().val_ref();
<mark class="info">  |</mark>                     <mark class="error">^^^^^^^^^^</mark>          <mark class="info">- temporary value is freed at the end of this statement</mark>
<mark class="info">  |</mark>                     <mark class="error">|</mark>
<mark class="info">  |</mark>                     <mark class="error">creates a temporary value which is freed while still in use</mark>
<mark class="info">3 |</mark>     println!("Value is {}.", *local_ref);
<mark class="info">  |</mark>                              <mark class="info">---------- borrow later used here</mark>
<mark class="info">  |</mark>
<mark class="info">help</mark>: consider using a `let` binding to create a longer lived value
<mark class="info">  |</mark>
<mark class="info">2</mark> <mark class="edit">~</mark>     <mark class="edit">let binding = Foo::new();</mark>
<mark class="info">3</mark> <mark class="edit">~</mark>     let local_ref = <mark class="edit">binding</mark>.val_ref();
</samp></pre>
		</section> <section>
			<h1>エラーの背景と回避方法</h1>
			<p>
より具体的にはこのエラーは、一時変数が破棄されるタイミングが文末 (セミコロンの位置) になることが多く、各種の参照が破棄されるタイミングよりも早い事に起因する。
			</p> <p>
そのため、エラーを回避するには、サンプルコードのエラーメッセージの <q>help</q> の項目にもある通り、一時変数が破棄されないよう、ローカル変数にいったん保存すればよい。
			</p> <p>
なお、上記で一時変数が破棄されるタイミングについて、<q>文末になることが多く</q> と書いたのは、<code>&amp;</code> 演算子で一時変数への参照をじかに取り込む場合などの例外があるため。そしてその場合、ローカル変数への保存が自動化されたような動作となる (つまり、サンプルコードの例では、<code>&amp;Foo<wbr/>::new()<wbr/>.val</code> としてもエラーを解決できる)。
			</p>
			<aside class="normal">
				<p>
Rust の独特な仕様。
				</p> <p>
Rust 以外の多くの言語では、計算過程の値をいったんローカル変数へと保存するべきかどうかは、主にリファクタリングの話題である。ところが、Rust ではこれによりエラーになるかどうかが変わることがある。
				</p> <p>
これと関連してか、他の言語では「変数を宣言する」や「変数を値で初期化する」などと表現するところを、Rust では「変数に値を束縛する (let binding)」などと表現する。
				</p>
			</aside>
		</section>
	</body>
</html>
