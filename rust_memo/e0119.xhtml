<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0119 - トレイト実装の衝突</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `SomeTrait`</mark>
</samp></pre>
		<p>
トレイト実装の指定が既存のものと衝突した。
		</p>
		<section>
			<h1>基本ルール</h1>
			<p>
同じ型と同じトレイトの組合せで、すでに他に実装があると衝突する。
			</p> <p>
これがもし許されると、どの実装が正しいのか分からなくなってしまう。
			</p>
			<section>
				<h2>空のトレイトの取扱</h2>
				<p>
マーカートレイトのような空のトレイトについても、例外扱いはされない。つまり、空の実装どうしでも衝突しうる (ソースが短くなるので以降のサンプルでは多用している)。
				</p>
			</section>
		</section> <section>
			<h1>パターン</h1>
			<nav class="sub"/>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">自明なパターン</div>
				</hgroup>
				<p>
全く同じトレイトと型を指定している。
				</p>
				<hr class="split"/>
<pre><code class="language-rust">
struct MyType {}
trait MyTrait { fn f(&amp;self); }

impl MyTrait for MyType { fn f(&amp;self) { /* ... */ } }
<mark class="error">impl MyTrait for MyType</mark> { fn f(&amp;self) { /* ... */ } }
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType { fn f(&amp;self) { /* ... */ } }
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl MyTrait for MyType { fn f(&amp;self) { /* ... */ } }
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B1</h1>
					<div class="subTitle">型パラメタ (ブランケット実装に対する衝突)</div>
				</hgroup>
				<p>
同じトレイトについて、個別の型への実装と、ブランケット実装がある。<br/>
しかし、個別の型がブランケット実装の範囲に含まれてしまっている。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyType</code> は <code>T</code> に含まれている。
				</p>
<pre><code class="language-rust">
struct MyType {}
trait MyTrait {}

impl MyTrait for MyType {}
<mark class="error">impl&lt;T&gt; MyTrait for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\sub.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B2</h1>
					<div class="subTitle">型パラメタ (ブランケット実装どうしの衝突)</div>
				</hgroup>
				<p>
同じトレイトについて、ブランケット実装が複数ある。<br/>
しかし、両者の範囲が重複してしまっている。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>TraitX</code> と <code>TraitY</code> の両方を実装する型への考慮がない。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
trait TraitX {}
trait TraitY {}

impl&lt;T&gt; MyTrait for T where T: TraitX {}
<mark class="error">impl&lt;T&gt; MyTrait for T</mark> where T: TraitY {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:6:1
<mark class="info">  |</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for T where T: TraitX {}
<mark class="info">  |</mark> <mark class="info">--------------------- first implementation here</mark>
<mark class="info">6 |</mark> impl&lt;T&gt; MyTrait for T where T: TraitY {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B3</h1>
					<div class="subTitle">型パラメタ <span class="nw">(ジェネリクス型での型パラメタ)</span></div>
				</hgroup>
				<p>
ジェネリクス型どうしが同じになりうるパターン。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyType&lt;i32&gt;</code> と <code>MyType&lt;T&gt;</code> は同じになりうる。<br/>
なぜなら、<code>i32</code> は <code>Common</code> を実装しているため <code>T</code> になれる。
				</p>
<pre><code class="language-rust">
struct MyType&lt;T&gt;(T);
trait MyTrait {}
trait Common {}
impl&lt;T&gt; Common for T {}

impl MyTrait for MyType&lt;i32&gt; {}
<mark class="error">impl&lt;T: Common&gt; MyTrait for MyType&lt;T&gt;</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait` for type `MyType&lt;i32&gt;`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:7:1
<mark class="info">  |</mark>
<mark class="info">6 |</mark> impl MyTrait for MyType&lt;i32&gt; {}
<mark class="info">  |</mark> <mark class="info">---------------------------- first implementation here</mark>
<mark class="info">7 |</mark> impl&lt;C: Common&gt; MyTrait for MyType&lt;C&gt; {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType&lt;i32&gt;`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B4</h1>
					<div class="subTitle">型パラメタ <span class="nw">(ジェネリクストレイトでの型パラメタ)</span></div>
				</hgroup>
				<p>
ジェネリクストレイトどうしが同じになりうるパターン。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyTrait&lt;i32&gt;</code> と <code>MyTrait&lt;T&gt;</code> は同じになりうる。<br/>
なぜなら、<code>i32</code> は <code>Common</code> を実装しているため <code>T</code> になれる。
				</p>
<pre><code class="language-rust">
struct MyType {}
trait MyTrait&lt;T&gt; {}
trait Common {}
impl&lt;T&gt; Common for T {}

impl MyTrait&lt;i32&gt; for MyType {}
<mark class="error">impl&lt;T: Common&gt; MyTrait&lt;T&gt; for MyType</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait&lt;i32&gt;` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:7:1
<mark class="info">  |</mark>
<mark class="info">6 |</mark> impl MyTrait&lt;i32&gt; for MyType {}
<mark class="info">  |</mark> <mark class="info">---------------------------- first implementation here</mark>
<mark class="info">7 |</mark> impl&lt;T: Common&gt; MyTrait&lt;T&gt; for MyType {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B5</h1>
					<div class="subTitle">型パラメタ <span class="nw">(型とトレイトで共有される型パラメタ)</span></div>
				</hgroup>
				<p>
型とトレイトに同じ型パラメタが含まれるパターン。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyTrait</code> から <code><a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;dyn MyTrait&gt;</code> を作れるよう、<a href="https://doc.rust-lang.org/core/convert/trait.From.html"><code>From</code></a> トレイトを実装しようとしている。しかし、<a href="https://doc.rust-lang.org/core/index.html"><code>core</code></a> クレートに元からある恒等変換のための <a href="https://doc.rust-lang.org/core/convert/trait.From.html"><code>From</code></a> トレイトの実装と衝突してしまっている。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
impl&lt;T&gt; MyTrait for T {}

<mark class="error">impl&lt;T: MyTrait + 'static&gt; From&lt;T&gt; for Box&lt;dyn MyTrait&gt;</mark> {
    fn from(value: T) -&gt; Self {
        Box::new(value)
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `From&lt;Box&lt;(dyn MyTrait + 'static)&gt;&gt;` for type `Box&lt;(dyn MyTrait + 'static)&gt;`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:4:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl&lt;T: MyTrait + 'static&gt; From&lt;T&gt; for Box&lt;dyn MyTrait&gt; {
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: conflicting implementation in crate `core`:
          - impl&lt;T&gt; From&lt;T&gt; for T;
</samp></pre>
				<p>
エラーメッセージは以下の二つの衝突を指摘している。
				</p>
				<ul>
					<li>
						<p>
<code>impl&lt;T&gt; <a href="https://doc.rust-lang.org/core/convert/trait.From.html">From</a>&lt;T&gt; for T</code>
						</p>
					</li> <li>
						<p>
<code>impl&lt;T: MyTrait + 'static&gt; <a href="https://doc.rust-lang.org/core/convert/trait.From.html">From</a>&lt;T&gt; for <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;dyn MyTrait&gt;</code>
						</p>
					</li>
				</ul>
				<p>
ここで以下の通り、型とトレイトそれぞれが同じになりうる。
				</p>
				<dl class="normal">
					<dt>型</dt>
					<dd>
						<p>
前者の <code>T</code> は全ての型を含む。後者の <code>Box&lt;dyn MyTrait&gt;</code> もこれに含まれる。
						</p>
					</dd>
					<dt>トレイト</dt>
					<dd>
						<p>
前者と後者はどちらも <code><a href="https://doc.rust-lang.org/core/convert/trait.From.html">From</a>&lt;T&gt;</code> である。そして、前者の <code>T</code> は実装対象の型と同じである。後者の <code>T</code> は <code>MyTrait</code> の実装を求められるが、全ての型は <code>MyTrait</code> を実装するため、ここは <code><a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;dyn MyTrait&gt;</code> でも良く、これは実装対象の型と同じである。
						</p>
					</dd>
				</dl>
			</section> <section>
				<hgroup>
					<h1>パターン D</h1>
					<div class="subTitle">関連型の影響 <span class="nw">(Rust の欠陥)</span></div>
				</hgroup>
				<p>
トレイト実装において、関連型が条件として区別されない問題がある。
				</p>
				<aside class="normal moan">
					<p>
修正の見込みについて。
					</p> <p>
<time>2024 年現在</time>、修正は延期中。<a href="https://github.com/rust-lang/rust/issues/20400">Github の投稿</a>によると、トレイトシステム全体の刷新が控えているらしく、また修正が及ぼす波及効果の検討も必要らしい。
					</p>
				</aside>
				<hr class="split"/>
				<p>
以下では、<code>HasType&lt;Type = i32&gt;</code> と <code>HasType&lt;Type = i64&gt;</code> の範囲が重複していると取られてしまい、衝突が検出される。
				</p>
<pre><code class="language-rust">
trait HasType { type Type; }
trait MyTrait { fn method(&amp;self) -&gt; &amp;str { "" } }

impl&lt;T: HasType&lt;Type = i32&gt;&gt; MyTrait for T {}
<mark class="error">impl&lt;T: HasType&lt;Type = i64&gt;&gt; MyTrait for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl&lt;T: HasType&lt;Type = i32&gt;&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="info">------------------------------------------ first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T: HasType&lt;Type = i64&gt;&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
			</section>
		</section>
	</body>
</html>
