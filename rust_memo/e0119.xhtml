<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0119 - トレイト実装の衝突</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `SomeTrait`
</samp></pre>
		<p>
トレイト実装の指定が既存のものと衝突した。
		</p>
		<section>
			<h1>基礎知識</h1>
			<div class="sub">
				<h2>トレイトの実装</h2>
				<p>
トレイト実装では以下の二つを指定する。
				</p>
				<dl class="normal lowProfile">
					<dt>トレイト</dt>
					<dd>
						<p>
どのトレイトを実装するか。
						</p>
					</dd>
					<dt>条件</dt>
					<dd>
						<p>
どのような型に実装するか。
						</p>
					</dd>
				</dl>
			</div>
			<div class="sub">
				<h2>エラーの原因</h2>
				<p>
トレイト実装の指定どうしが衝突するのは、対象となるトレイトが同じで、かつ条件に重複がある場合である。そうなると、コンパイラは指定が重複している型に対して、どちらの実装を使えば良いか分からなくなる。
				</p>
			</div>
		</section> <section>
			<h1>パターン</h1>
			<p>
エラーには幾つかパターンがある。
			</p>
			<dl class="normal lowProfile">
				<dt><a href="#ptnA">パターン A</a></dt> <dd>自明なパターン。</dd>
				<dt><a href="#ptnB">パターン B</a></dt> <dd>実装が空のパターン。</dd>
				<dt><a href="#ptnC">パターン C</a></dt> <dd>ブランケット実装との衝突。</dd>
				<dt><a href="#ptnD">パターン D</a></dt> <dd>ブランケット実装どうしの衝突。 </dd>
				<dt><a href="#ptnE">パターン E</a></dt> <dd>型パラメタの影響 <span class="nw">(条件側の型パラメタ)</span>。</dd>
				<dt><a href="#ptnF">パターン F</a></dt> <dd>型パラメタの影響 <span class="nw">(トレイト側の型パラメタ)</span>。</dd>
				<dt><a href="#ptnG">パターン G</a></dt> <dd>型パラメタの影響 <span class="nw">(パターン E と F の合成)</span>。</dd>
				<dt><a href="#ptnH">パターン H</a></dt> <dd>関連型の影響 <span class="nw">(Rust の欠陥)</span>。</dd>
			</dl>
			<section>
				<hgroup>
					<h1 id="ptnA">パターン A.</h1>
					<div class="subtitle">自明なパターン</div>
				</hgroup>
				<p>
全く同じトレイトと条件を指定している。
				</p>
<pre><code class="language-rust">
struct MyType {}
trait MyTrait { fn f(&amp;self); }

impl MyTrait for MyType { fn f(&amp;self) { /* ... */ } }
<mark class="error">impl MyTrait for MyType</mark> { fn f(&amp;self) { /* ... */ } }
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait` for type `MyType`
<mark class="info"> --&gt;</mark> src\main.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType { fn f(&amp;self) { /* ... */ } }
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl MyTrait for MyType { fn f(&amp;self) { /* ... */ } }
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="ptnB">パターン B.</h1>
					<div class="subtitle">実装が空のパターン</div>
				</hgroup>
				<p>
前のパターンの変種。トレイトがマーカートレイト、または全てのトレイトメソッドがデフォルト実装を持つ場合、個別の実装が空になりうるが、この場合も同様である。
				</p>
<pre><code class="language-rust">
struct MyType {}
trait MyTrait {}

impl MyTrait for MyType {}
<mark class="error">impl MyTrait for MyType</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait` for type `MyType`
<mark class="info"> --&gt;</mark> src\sub.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="ptnC">パターン C.</h1>
					<div class="subtitle">ブランケット実装との衝突</div>
				</hgroup>
				<p>
ある型がブランケット実装と同じトレイトを実装している。<br/>
そして、その型はそのブランケット実装にも適合している。
				</p>
<pre><code class="language-rust">
struct MyType {}
trait MyTrait {}

impl MyTrait for MyType {}
<mark class="error">impl&lt;T&gt; MyTrait for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait` for type `MyType`
<mark class="info"> --&gt;</mark> src\sub.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="ptnD">パターン D.</h1>
					<div class="subtitle">ブランケット実装どうしの衝突</div>
				</hgroup>
				<p>
あるトレイトについてのブランケット実装が複数ある。<br/>
そして、それら複数に適合する型が作成可能になっている。
				</p> <p>
以下では、二つのブランケット実装指定があり、トレイトはどちらも <code>MyTrait</code> を、条件はそれぞれ <code>TraitX</code> と <code>TraitY</code> の実装型を指定している。そして、これら二つの実装を両方持つ型が作成可能になっている。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
trait TraitX {}
trait TraitY {}

impl&lt;T&gt; MyTrait for T where T: TraitX {}
<mark class="error">impl&lt;T&gt; MyTrait for T</mark> where T: TraitY {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait`
<mark class="info"> --&gt;</mark> src\main.rs:6:1
<mark class="info">  |</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for T where T: TraitX {}
<mark class="info">  |</mark> <mark class="info">--------------------- first implementation here</mark>
<mark class="info">6 |</mark> impl&lt;T&gt; MyTrait for T where T: TraitY {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="ptnE">パターン E.</h1>
					<div class="subtitle">型パラメタの影響 (条件側の型パラメタ)</div>
				</hgroup>
				<p>
型パラメタがあるため、条件の重複に気付きにくいパターン。
				</p> <p>
以下では、条件 <code>X</code> と <code>i32</code> は重複している。なぜなら、<code>X</code> は <code>TraitX</code> の実装が求められるが、<code>i32</code> を含めた全ての型には <code>TraitX</code> が実装されている。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
trait TraitX {}
impl&lt;T&gt; TraitX for T {}

impl&lt;X: TraitX&gt; MyTrait for X {}
<mark class="error">impl MyTrait for i32</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait` for type `i32`
<mark class="info"> --&gt;</mark> src\main.rs:6:1
<mark class="info">  |</mark>
<mark class="info">5 |</mark> impl&lt;X: TraitX&gt; MyTrait for X {}
<mark class="info">  |</mark> <mark class="info">----------------------------- first implementation here</mark>
<mark class="info">6 |</mark> impl MyTrait for i32 {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="ptnF">パターン F.</h1>
					<div class="subtitle">型パラメタの影響 (トレイト側の型パラメタ)</div>
				</hgroup>
				<p>
型パラメタがあるため、トレイトの重複に気付きにくいパターン。
				</p> <p>
以下では、トレイト <code>MyTrait&lt;X&gt;</code> と <code>MyTrait&lt;i32&gt;</code> は重複している。なぜなら、<code>X</code> には <code>TraitX</code> の実装が求められるが、<code>i32</code> を含めた全ての型には <code>TraitX</code> が実装されている。
				</p>
<pre><code class="language-rust">
trait MyTrait&lt;T&gt; {}
trait TraitX {}
impl&lt;T&gt; TraitX for T {}

impl&lt;T, X: TraitX&gt; MyTrait&lt;X&gt; for T {}
<mark class="error">impl&lt;T&gt; MyTrait&lt;i32&gt; for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait&lt;i32&gt;`
<mark class="info"> --&gt;</mark> src\main.rs:6:1
<mark class="info">  |</mark>
<mark class="info">5 |</mark> impl&lt;T, X: TraitX&gt; MyTrait&lt;X&gt; for T {}
<mark class="info">  |</mark> <mark class="info">----------------------------------- first implementation here</mark>
<mark class="info">6 |</mark> impl&lt;T&gt; MyTrait&lt;i32&gt; for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="ptnG">パターン G.</h1>
					<div class="subtitle">型パラメタの影響 (パターン E と F の合成)</div>
				</hgroup>
				<p>
条件とトレイトの両方に型パラメタがあるパターン。
				</p> <p>
以下では、<code>MyTrait</code> から <code><a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;dyn MyTrait&gt;</code> を作れるよう、<a href="https://doc.rust-lang.org/std/convert/trait.From.html"><code>From</code></a> トレイトを実装しようとしている。しかし、<a href="https://doc.rust-lang.org/std/convert/trait.From.html"><code>From</code></a> トレイトについて重複する実装がすでに Rust 組込の <a href="https://doc.rust-lang.org/std/index.html"><code>std</code></a> クレート内で定義済のため、コンパイルエラーになる。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
impl&lt;T&gt; MyTrait for T {}

<mark class="error">impl&lt;T: MyTrait&gt; From&lt;T&gt; for Box&lt;dyn MyTrait&gt;</mark> {
    fn from(value: T) -&gt; Self {
        Box::new(value)
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `From&lt;Box&lt;(dyn MyTrait + 'static)&gt;&gt;` for type `Box&lt;(dyn MyTrait + 'static)&gt;`
<mark class="info"> --&gt;</mark> src\main.rs:4:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl&lt;T: MyTrait&gt; From&lt;T&gt; for Box&lt;dyn MyTrait&gt; {
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> note: conflicting implementation in crate `core`:
          - impl&lt;T&gt; From&lt;T&gt; for T;
</samp></pre>
				<p>
エラーメッセージは以下の二つの競合を指摘している。
				</p>
				<ul>
					<li>
						<p>
<code>impl&lt;T&gt; <a href="https://doc.rust-lang.org/std/convert/trait.From.html">From</a>&lt;T&gt; for T</code>
						</p>
					</li> <li>
						<p>
<code>impl&lt;T: MyTrait&gt; <a href="https://doc.rust-lang.org/std/convert/trait.From.html">From</a>&lt;T&gt; for <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;dyn MyTrait&gt;</code>
						</p>
					</li>
				</ul>
				<p>
ここで、トレイトが同じで条件が重複している。
				</p>
				<dl class="normal">
					<dt>条件</dt>
					<dd>
						<p>
前者の条件 <code>T</code> は全ての型が適合するので、後者の条件が何であれ重複する。
						</p>
					</dd>
					<dt>トレイト</dt>
					<dd>
						<p>
前者と後者はどちらも <code><a href="https://doc.rust-lang.org/std/convert/trait.From.html">From</a>&lt;T&gt;</code> で、型パラメタ <code>T</code> も同じ内容を指している。前者の <code>T</code> には条件と同じ型である事が、後者の <code>T</code> には <code>MyTrait</code> の実装が求められるが、全ての型は <code>MyTrait</code> を実装するため、ここは <code><a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;dyn MyTrait&gt;</code> でも良い。そのため、後者も前者と同様、<code>T</code> には条件と同じ型が指定できてしまう。
						</p>
					</dd>
				</dl>
			</section> <section>
				<hgroup>
					<h1 id="ptnH">パターン H.</h1>
					<div class="subtitle">関連型の影響 (Rust の欠陥)。</div>
				</hgroup>
				<p>
トレイト実装において、関連型が条件として区別されない<a href="https://github.com/rust-lang/rust/issues/20400">問題</a>がある。
				</p>
				<aside class="normal moan">
					<p>
修正の見込みについて。
					</p> <p>
2024 年現在、修正は延期中。Github の投稿によると、トレイトシステム全体の刷新が控えているらしく、また修正が及ぼす波及効果の検討も必要らしい。
					</p>
				</aside>
				<div class="sub">
					<h2>サンプルコード</h2>
					<p>
以下では、<code>HasType&lt;Type = i32&gt;</code> と <code>HasType&lt;Type = i64&gt;</code> は重複しないはずだが、競合が検出されてしまう。
					</p>
<pre><code class="language-rust">
trait HasType { type Type; }
trait MyTrait { fn method(&amp;self) -&gt; &amp;str { "" } }

impl&lt;T: HasType&lt;Type = i32&gt;&gt; MyTrait for T {}
<mark class="error">impl&lt;T: HasType&lt;Type = i64&gt;&gt; MyTrait for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait`
<mark class="info"> --&gt;</mark> src\main.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl&lt;T: HasType&lt;Type = i32&gt;&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="info">------------------------------------------ first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T: HasType&lt;Type = i64&gt;&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
				</div>
			</section>
		</section>
	</body>
</html>
