<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0502 - 不変参照と可変参照の同時使用。</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<div class="title">
			<script>Base.insertTitle();</script>
		</div>
<pre><samp class="console-rustc">
<mark class="error">error[E0502]</mark>: cannot borrow `data` as mutable because it is also borrowed as immutable
</samp></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0502]</mark>: cannot borrow `data` as immutable because it is also borrowed as mutable
</samp></pre>
		<p>
同じ参照先への不変参照と可変参照は共存できない。このルールはコンパイラによる静的解析や最適化に利用できるだけでなく、取得系操作と更新系操作の分離を促進することで、コードの可読性も高める。
		</p>
		<aside class="normal">
			<p>
初見殺しの落し穴。
			</p> <p>
このエラー自体は単純だが､『<a href="topic_ref_lifetime.xhtml">参照のライフタイム</a>』で紹介しているライフタイムについての<a href="topic_ref_lifetime.xhtml#first_sight_killer">初見殺し</a>の影響を受ける場合があり、その点には注意が必要。
			</p>
		</aside>
		<section>
			<h1>メッセージの構成</h1>
			<p>
メッセージの要約部の内容。
			</p>
			<ul>
				<li>
不変参照中の可変参照か？可変参照中の不変参照か？
				</li> <li>
不変参照と可変参照の同時使用が検出された変数の名前
				</li>
			</ul>
			<p>
メッセージの詳細部の内容 (不変参照中の可変参照の場合)。
			</p>
			<ul>
				<li>
不変参照の発生個所 ← エラー個所より前方
				</li> <li>
可変参照の発生個所 ← エラー個所
				</li> <li>
不変参照の使用箇所 ← エラー個所より後方
				</li>
			</ul>
		</section> <section>
			<h1>パターン</h1>
			<dl class="normal lowProfile">
				<dt><a href="#ptnA">パターン A</a></dt>
				<dd>不変参照中の可変参照。</dd>
				<dt><a href="#ptnB">パターン B</a></dt>
				<dd>可変参照中の不変参照。</dd>
			</dl>
			<section>
				<h1 id="ptnA">パターン A.</h1>
				<p>
不変参照中に可変参照が発生したパターン。
				</p>
<pre><code class="language-rust">
fn main() {
    let mut data = 0;
    let data_ref = &amp;data;
    *<mark class="error">&amp;mut data</mark> = 1;
    println!("{}", data_ref);
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0502]</mark>: cannot borrow `data` as mutable because it is also borrowed as immutable
 --&gt; src\main.rs:4:6
  |
3 |     let data_ref = &amp;data;
  |                    <mark class="info">----- immutable borrow occurs here</mark>
4 |     *&amp;mut data = 1;
  |      <mark class="error">^^^^^^^^^ mutable borrow occurs here</mark>
5 |     println!("{}", data_ref);
  |                    <mark class="info">-------- immutable borrow later used here</mark>
</samp></pre>
			</section> <section>
				<h1 id="ptnB">パターン B.</h1>
				<p>
可変参照中に不変参照が発生したパターン。
				</p>
<pre><code class="language-rust">
fn main() {
    let mut data = 0;
    let data_mut = &amp;mut data;
    println!("{}", <mark class="error">&amp;data</mark>);
    *data_mut = 1;
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0502]</mark>: cannot borrow `data` as immutable because it is also borrowed as mutable
 --&gt; src\main.rs:4:20
  |
3 |     let data_mut = &amp;mut data;
  |                    <mark class="info">--------- mutable borrow occurs here</mark>
4 |     println!("{}", &amp;data);
  |                    <mark class="error">^^^^^ immutable borrow occurs here</mark>
5 |     *data_mut = 1;
  |     <mark class="info">------------- mutable borrow later used here</mark>
</samp></pre>
			</section> 
		</section>
	</body>
</html>
