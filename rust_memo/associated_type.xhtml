<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: 関連型</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
関連型 (Associated types) はトレイトのアイテムとして定義される。そして、トレイトを実装する型から、その関連型を通して、別の型を得られるようにする。つまり、トレイトの関連型 A は「トレイトを実装する型 X から、別の型への写像 A(X)」となる。
		</p>
		<section>
			<h1>基本</h1>
			<p>
トレイトの側では、<code>type <var>Assoc</var>;</code> のように定義する。
			</p> <p>
トレイトの実装側では、<code>type <var>Assoc</var> = <var>SomeType</var>;</code> のように型を指定する。
			</p>
			<section>
				<h2>サンプルコード</h2>
				<p>
以下では、トレイト <code>Sequence</code> からの生成値のために、関連型 <code>Value</code> を定義している。
			</p> <p>
そして、<code>Sequence</code> を実装する型 <code>IntCounter</code> にて、<code>Value</code> は <code>i32</code> に指定されている。
				</p>
<pre><code class="language-rust">
fn main() {
    let seq = &amp;mut IntCounter(0);
    let seq = seq as &amp;mut dyn Sequence&lt;Value = i32&gt;;
    assert_eq!(seq.next(), 1);
}

trait Sequence {
    type Value;
    fn next(&amp;mut self) -&gt; Self::Value;
}

struct IntCounter(i32);
impl Sequence for IntCounter {
    type Value = i32;
    fn next(&amp;mut self) -&gt; Self::Value {
        self.0 += 1;
        self.0
    }
}
</code></pre>
			</section>
		</section> <section>
			<h1>境界の指定</h1>
			<p>
関連型に境界を指定する方法について。
			</p>
			<section>
				<h1>定義時の指定</h1>
				<p>
<code>type <var>Assoc</var>: <var>Bounds</var></code> のように定義すると、境界が付加される。
				</p> <p>
これにより、実装側で <code><var>Assoc</var></code> として指定できる型に <code><var>Bounds</var></code> の制約がつく。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下のコードは、直前の例と似たような構成だが、関連型 <code>Value</code> に境界 <a href="https://doc.rust-lang.org/std/cmp/trait.Ord.html"><code>Ord</code></a> がある。
					</p> <p>
そして、型 <code>IntCounter</code> における <code>Value</code> である <code>i32</code> はもちろん <a href="https://doc.rust-lang.org/std/cmp/trait.Ord.html"><code>Ord</code></a> である。
					</p>
<pre><code class="language-rust">
fn main() {
    let seq = &amp;mut IntCounter(0);
    skip_to(seq, 3);
    assert_eq!(seq.next(), 4);
}

trait Sequence {
    type Value: Ord;
    fn next(&amp;mut self) -&gt; Self::Value;
}

struct IntCounter(i32);
impl Sequence for IntCounter {
    type Value = i32;
    fn next(&amp;mut self) -&gt; Self::Value {
        self.0 += 1;
        self.0
    }
}

fn skip_to&lt;T&gt;(target: &amp;mut T, max: T::Value)
where
    T: Sequence
{
    loop {
        let val = target.next();
        if val &gt;= max {
            return
        }
    }
}
</code></pre>
				</section>
			</section> <section>
				<h1>使用時の指定</h1>
				<p>
定義時に指定した境界の他に、関連型の使用時にも境界を追加できる。
				</p> <p>
これには、型パラメタ <code>T</code> が関連型 <code>Assoc</code> を持つ場合、<code>T::<var>Assoc</var>: <var>Bounds</var></code> のようにする。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下のコードは、直前の例と同じ動作をする。ただし、関連型 <code>Value</code> の境界 <a href="https://doc.rust-lang.org/std/cmp/trait.Ord.html"><code>Ord</code></a> は、関連型の定義時でなく、外部の関数 <code>skip_to</code> での関連型の使用時に指定されている。
					</p>
<pre><code class="language-rust">
fn main() {
    let seq = &amp;mut IntCounter(0);
    skip_to(seq, 3);
    assert_eq!(seq.next(), 4);
}

trait Sequence {
    type Value;
    fn next(&amp;mut self) -&gt; Self::Value;
}

struct IntCounter(i32);
impl Sequence for IntCounter {
    type Value = i32;
    fn next(&amp;mut self) -&gt; Self::Value {
        self.0 += 1;
        self.0
    }
}

fn skip_to&lt;T&gt;(target: &amp;mut T, max: T::Value)
where
    T: Sequence,
    T::Value: Ord,
{
    loop {
        let val = target.next();
        if val &gt;= max {
            return
        }
    }
}
</code></pre>
				</section>
			</section>
		</section> <section>
			<h1 id="gat">ジェネリクス (GAT)</h1>
			<p>
関連型はジェネリクスパラメタを付加する事で、パラメトリックにできる。また必要ならば、それらのパラメタに対して、<code>where</code> による境界を設定できる。 
			</p>
			<section>
				<h2>ジェネリクスによる制限</h2>
				<p>
この機能を使ったトレイトはトレイトオブジェクトになれない。<br/>
(ジェネリクスパラメタを含む型を動的に処理できないため)。
				</p>
			</section> <section>
				<h2>補足 (Rust の歴史と機能名)</h2>
				<p>
この機能は Rust 1.65 (<time>2022/11/03</time>) から正式に導入された。<br/>
機能名は <abbr>GAT</abbr> (Generic Associated Types) と呼ばれている。
				</p>
			</section> <section>
				<h1>型パラメタ</h1>
				<p>
関連型のジェネリクスパラメタに型パラメタを使うパターン。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下では、トレイト <code>ContainerBuilder</code> が生成するコンテナ型のために、ジェネリックな関連型 <code>Container&lt;T&gt;</code> が定義されている (<code>T</code> はコンテナの要素型)。
					</p>
<pre><code class="language-rust">
fn main() {
    let vec_builder = VecBuilder();
    let vec = vec_builder.build(42, 3);
    assert_eq!(vec, vec![42, 42, 42]);
}

trait ContainerBuilder {
    type Container&lt;T&gt;: Default + Collection&lt;T&gt;;
    fn build&lt;T: Clone&gt;(&amp;self, v: T, n: usize) -&gt; Self::Container&lt;T&gt; {
        let mut result = &lt;Self::Container&lt;T&gt;&gt;::default();
        for _ in 0..n {
            result.add(v.clone());
        }
        result
    }
}

trait Collection&lt;T&gt; {
    fn add(&amp;mut self, x: T);
}

struct VecBuilder();
impl ContainerBuilder for VecBuilder {
    type Container&lt;T&gt; = Vec&lt;T&gt;;
}

impl&lt;T&gt; Collection&lt;T&gt; for Vec&lt;T&gt; {
    fn add(&amp;mut self, x: T) {
        self.push(x);
    }
}
</code></pre>
				</section>
			</section> <section>
				<h1>ライフタイム</h1>
				<p>
関連型のジェネリクスパラメタにライフタイム指定子を使うパターン。
				</p>
				<section>
					<h2>サンプルコード</h2>
					<p>
以下では、トレイト <code>IntCollection</code> が生成するイテレータのために、ジェネリックな関連型 <code>IntStream&lt;'a&gt;</code> が定義されている。ここで、<code>'a</code> はイテレータのアイテムが所属するライフタイムで、<code>IntCollection</code> を参照できなければならない (<code>Self: 'a</code> の境界のため)。
					</p>
<pre><code class="language-rust">
use std::slice::Iter;

fn main() {
    let vec = vec![1, 2, 3];
    let stream = vec.int_stream();
    assert_eq!(stream.sum::&lt;i32&gt;(), 6);
}

trait IntCollection {
    type IntStream&lt;'a&gt;: Iterator&lt;Item = &amp;'a i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt;;
}

impl IntCollection for Vec&lt;i32&gt; {
    type IntStream&lt;'a&gt; = Iter&lt;'a, i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt; {
        self.iter()
    }
}
</code></pre>
				</section>
			</section> <section>
				<h1 id="gat_limitation">制限</h1>
				<p>
2024 年現在、GAT には厄介な制限がまだいくつかある。この事は<a href="https://blog.rust-lang.org/2022/10/28/gats-stabilization.html#when-gats-go-wrong---a-few-current-bugs-and-limitations">公式ブログ</a>でも紹介されている。それによると、これらは新機能である GAT の導入を急いだ結果らしく、将来的には改善される見込みらしい。
				</p>
				<ul>
					<li>
<a href="e_gat_hrtb.xhtml">GAT と HRTB の組合せによるエラー</a>
					</li>
				</ul>
			</section>
		</section>
	</body>
</html>
