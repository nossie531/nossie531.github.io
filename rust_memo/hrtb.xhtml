<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: HRTB (Higher Ranked Trait Bound)</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
<abbr>HRTB</abbr> (Higher Ranked Trait Bound) によるライフタイム注釈について。
		</p>
		<section>
			<h1>基本</h1>
			<section>
				<h2>通常版との差異</h2>
				<dl class="normal">
					<dt>通常のライフタイム注釈</dt>
					<dd>
						<ul>
							<li>
								<p>
関数、型、トレイトに付加される。
								</p>
							</li> <li>
								<p>
実際のライフタイムの提供元はアイテムの操作元になる。<br/>
(アイテムが関数なら呼出元、型やトレイトならインスタンスの生成元。)
								</p>
							</li>
						</ul>
					</dd>
					<dt>HRTB によるライフタイム注釈</dt>
					<dd>
						<ul>
							<li>
								<p>
トレイト境界に付加される。
								</p>
							</li> <li>
								<p>
実際のライフタイムの提供元はトレイト境界で制限した型の操作元になる。<br/>
(トレイト境界がクロージャならその呼出元。)
								</p>
							</li>
						</ul>
					</dd>
				</dl>
			</section> <section>
				<h2>書式</h2>
				<p>
トレイト境界の左辺または右辺の先頭で <code>for&lt;'<var>a</var>&gt;</code> のように宣言する<br/>
(複数必要な場合、<code>for&lt;'<var>a</var>, '<var>b</var>&gt;</code> のようにカンマで区切る)。
				</p>
			</section> <section>
				<h2>ライフタイム省略</h2>
				<p>
HRTB によるライフタイム注釈がクロージャの引数や返値に適用されるパターンでは、関数の引数や返値における通常のライフタイム注釈と同様、ライフタイムの記載を省略できる (例: ライフタイム注釈が一つしかない場合など) 。
				</p>
			</section>
		</section> <section>
			<h1>サンプル</h1>
			<section>
				<h1>クロージャ</h1>
				<p>
以下では、関数 <code>get_cmp_text</code> でクロージャを扱うために HRTB が使用されている。
				</p> <p>
なお、このパターンはライフタイムが一つしかないため HRTB ごと省略可能。
				</p>
<pre><code class="language-rust">
use std::cmp::Ordering;

fn main() {
    let text = get_cmp_text(i32::cmp, 1, 2);
    assert_eq!(text, "&lt;");
}

fn get_cmp_text&lt;F&gt;(cmp: F, x: i32, y: i32) -&gt; String
where
    F: for&lt;'a&gt; Fn(&amp;'a i32, &amp;'a i32) -&gt; Ordering
{
    match cmp(&amp;x, &amp;y) {
        Ordering::Less =&gt; "&lt;",
        Ordering::Equal =&gt; "=",
        Ordering::Greater =&gt; "&gt;",
    }.to_string()
}
</code></pre>
			</section> <section>
				<h1>GAT - 1</h1>
				<p>
以下では、関数 <code>sum</code> で <a href="associated_type.xhtml#gat">GAT</a> を用いたトレイトについて HRTB を使用している。
				</p>
<pre><code class="language-rust">
use std::slice::Iter;

fn main() {
    let vec = vec![1, 2, 3];
    assert_eq!(sum(vec), 6);
}

trait IntCollection {
    type IntStream&lt;'a&gt;: Iterator&lt;Item = &amp;'a i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt;;
}

impl IntCollection for Vec&lt;i32&gt; {
    type IntStream&lt;'a&gt; = Iter&lt;'a, i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt; {
        self.iter()
    }
}

fn sum&lt;T&gt;(ints: T) -&gt; i32
where
    T: for&lt;'a&gt; IntCollection&lt;IntStream&lt;'a&gt; = Iter&lt;'a, i32&gt;&gt;
{
    ints.int_stream().sum()
}
</code></pre>
			</section> <section>
				<h1>GAT - 2</h1>
				<p>
以下では、関数 <code>average</code> で <a href="associated_type.xhtml#gat">GAT</a> を用いたトレイトについて HRTB を使用している。
				</p>
<pre><code class="language-rust">
use std::slice::Iter;

fn main() {
    let vec = vec![1, 2, 3];
    assert_eq!(average::&lt;Vec&lt;_&gt;&gt;(vec), 2.0);
}

trait IntCollection {
    type IntStream&lt;'a&gt;: Iterator&lt;Item = &amp;'a i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt;;
}

impl IntCollection for Vec&lt;i32&gt; {
    type IntStream&lt;'a&gt; = Iter&lt;'a, i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt; {
        self.iter()
    }
}

fn average&lt;T&gt;(ints: T) -&gt; f32
where
    T: IntCollection,
    for&lt;'a&gt; T::IntStream&lt;'a&gt;: ExactSizeIterator
{
    let sum = ints.int_stream().sum::&lt;i32&gt;();
    let len = ints.int_stream().len();
    sum as f32 / len as f32
}
</code></pre>
			</section>
		</section> <section>
			<h1 id="limitation">制限</h1>
			<p>
<time>2024 年現在</time>、HRTB には以下の制限がある。
			</p>
			<ul>
				<li>
<a href="e_hrtb_limitation.xhtml">[error] HRTB の機能制限</a>
				</li> <li>
<a href="e_hrtb_gat.xhtml">[error] HRTB の機能制限と GAT</a>
				</li> <li>
<a href="e0597_hrtb_limitation.xhtml">[E0597] HRTB の機能制限</a>
				</li> <li>
<a href="e0597_hrtb_gat.xhtml">[E0597] HRTB の機能制限と GAT</a>
				</li>
			</ul>
		</section>
	</body>
</html>
