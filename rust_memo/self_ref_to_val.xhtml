<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: self の値型で参照型を受ける方法</title>
		<link rel="stylesheet" href="style/base.css"/>
		<link rel="stylesheet" href="style/must_use.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
通常、値型を参照型で受けると、コンパイル時の型チェックでエラーになる。しかし、一部のトレイトメソッドでは、<code>&amp;self</code> でなく <code>self</code> で参照を受ける事ができ、これはあたかも値型を参照型で受けているように見える。
		</p>
		<aside class="normal">
			<p>
このメモの背景。
			</p> <p>
この機能を知らずにコードリーディングしていると、とても混乱しがちなため (筆者の場合、なぜコンパイルエラーにならないのか分からず、あげくに見当違いで自動参照外しや型強制について調べまわった…)。
			</p>
		</aside>
		<section>
			<h1>実現方法</h1>
			<p>
これが可能になるのは、トレイトの適用対象がそもそも参照型の場合である。
			</p> <p>
この場合、<code>self</code> は参照型であるため、当然と言えば当然である。
			</p>
			<section>
				<h2>サンプル (参照型版)</h2>
				<p>
以下では、末尾の実装の <code>&amp;</code> の箇所が重要。
				</p>
<pre><code class="language-rust">
fn main() {
    let r = &amp;MyStruct {};
    r.with_self_value();
}

trait MyTrait {
    fn with_self_value(self) where Self: Sized {}
}

struct MyStruct {}

impl MyTrait for &amp;MyStruct {}
</code></pre>
			</section> <section>
				<h2>サンプル (型パラメタ版)</h2>
				<p>
以下では、型パラメタ <code>T</code> が参照型も含んでいる。
				</p>
<pre><code class="language-rust">
fn main() {
    let r = &amp;MyStruct {};
    r.with_self_value();
}

trait MyTrait {
    fn with_self_value(self) where Self: Sized {}
}

struct MyStruct {}

impl&lt;T&gt; MyTrait for T {}
</code></pre>
			</section> <section>
				<h2>補足</h2>
				<p>
以下は最初のサンプルの <code>for &amp;MyStruct</code> から <code>&amp;</code> を削った場合のエラー。
				</p>
<pre><samp class="console-rustc">
<mark class="error">error[E0507]</mark><mark class="title">: cannot move out of `*r` which is behind a shared reference</mark>
</samp></pre>
			</section>
		</section> <section>
			<h1>身近な例</h1>
			<p>
<a href="https://doc.rust-lang.org/std/index.html"><code>std</code></a> では、<a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a> の一部メソッドなどに利用例がある。
			</p>
			<section>
				<h2>関連する宣言</h2>
				<p>
以下は <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a> の <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count"><code>count</code></a> メソッド。
				</p>
<pre><code class="language-rust">
fn count(self) -&gt; usize where Self: Sized
</code></pre>
				<p>
以下は <a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"><code>Iterator</code></a> の参照に対する実装。
				</p>
<pre><code class="language-rust">
impl&lt;I: Iterator + ?Sized&gt; Iterator for &amp;mut I
</code></pre>
			</section> <section>
				<h2>サンプル</h2>
				<p>
そのため、以下のようなコードが可能。
				</p>
<pre><code class="language-rust">
fn main() {
    let vec = vec![1, 2, 3];
    let ir = &amp;mut vec.iter();
    assert_eq!(ir.count(), 3);
}
</code></pre>
			</section>
		</section> <section>
			<h1>使い所</h1>
			<p>
こうした手法は、値での操作が基本となるトレイトについて、値と参照、その両方からの呼出に対応した実装を提供するのに向いている。
			</p> <p>
なお、より簡単に <code>&amp;self</code> を受けとるメソッドだけでも、値と参照、その両方からの呼出に対応できる (値から参照への自動型変換があるため)。ただこの場合、値と参照とで実装を分離できない。また、値の場合にその消費が行われない。など、両者には微妙な違いがある。
			</p>
		</section>
	</body>
</html>
