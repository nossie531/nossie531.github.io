<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: ZST (Zero Sized Type)。</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
サイズがゼロの型は ZST (Zero Sized Types) と呼ばれる。
		</p>
		<section>
			<h1>ZST になる型</h1>
			<p>
以下の型は ZST として扱われる。
			</p>
			<ul>
				<li>
空のタプル
				</li> <li>
フィールドのない構造体
				</li> <li>
長さ 0 の配列
				</li> <li>
その他: フィールド全てが ZST の構造体など
				</li>
			</ul>
なお、とりあえず ZST を利用したい場合、空のタプル <code>()</code> が使われる事が多い。
		</section> <section>
			<h1>利用方法</h1>
			<p>
ZST では何も記憶できないが、状況によっては役に立つ場合もある。
			</p>
			<section>
				<h1>型パラメタへの指定</h1>
				<p>
これが ZST の主な利用方法となる。
				</p> <p>
型パラメタに ZST を指定する事で、その型パラメタに関する全ての読書操作をスキップできる。これにより例えば、キーバリューマップを管理する <code>Dict&lt;K, V&gt;</code> 型から、キーのみを管理するキーセット型を <code>type KeySet&lt;K&gt; = Dict&lt;K, ()&gt;</code> のように実装できる。
				</p>
			</section> <section>
				<h1>アドレスの確保 (通常編)</h1>
				<p>
おそらくこれは滅多に使われない機能だと思われる。
				</p> <p>
ZST の読書時のサイズはゼロだが、通常の変数として用意した場合、アドレスを識別するための最低限度のメモリ領域は確保される。
				</p>
<pre><code class="language-rust">
fn main() {
    let zst1 = Zst {};
    let zst2 = Zst {};
    dbg!(&amp;zst1 as *const _);
    dbg!(&amp;zst2 as *const _);
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:4] &amp;zst1 as *const _ = 0x000000c08ecfeb70
[src\main.rs:5] &amp;zst2 as *const _ = 0x000000c08ecfeb78
</samp></pre>
				<p>
なお、配列では要素ごとのアドレスが重複する。
				</p>
<pre><code class="language-rust">
fn main() {
    let arr = [Zst, Zst];
    dbg!(&amp;arr[0] as *const _);
    dbg!(&amp;arr[1] as *const _);
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:3] &amp;arr[0] as *const _ = 0x00000089702fec08
[src\main.rs:4] &amp;arr[1] as *const _ = 0x00000089702fec08
</samp></pre>
			</section> <section>
				<h1>アドレスの確保 (<code>Box</code> 編)</h1>
				<p>
<code>Box</code> と ZST の組合せは何の役にも立たない。
				</p> <p>
アドレスを識別するためのメモリすら用意されない。
				</p>
<pre><code class="language-rust">
fn main() {
    let zst1 = Box::new(Zst {});
    let zst2 = Box::new(Zst {});
    dbg!(Box::into_raw(zst1));
    dbg!(Box::into_raw(zst2));
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:4] Box::into_raw(zst1) = 0x0000000000000001
[src\main.rs:5] Box::into_raw(zst2) = 0x0000000000000001
</samp></pre>
			</section> <section>
				<h1>アドレスの確保 (<code>Vec</code> 編)</h1>
				<p>
<code>Vec</code> と ZST の組合せも何の役にも立たない。
				</p> <p>
各要素ごとにも全体でもメモリは用意されない。
				</p>
<pre><code class="language-rust">
fn main() {
    let vec1 = vec![Zst {}];
    let vec2 = vec![Zst {}];
    dbg!(&amp;vec1.as_slice()[0] as *const _);
    dbg!(&amp;vec2.as_slice()[0] as *const _);
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:4] &amp;vec1.as_slice()[0] as *const _ = 0x0000000000000001
[src\main.rs:5] &amp;vec2.as_slice()[0] as *const _ = 0x0000000000000001
</samp></pre>
			</section>
		</section>
	</body>
</html>
