<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: GAT と HRTB の組合せによるエラー</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
エラーメッセージの出方には後述するいくつかパターンがある。
		</p> <p>
このエラーは 2024 年現在、<a href="associated_type.xhtml#gat_limitation">GAT に残る制限</a>の一つ。
		</p>
		<aside class="normal moan">
			<p>
このエラーはかなりの初見殺し。
			</p>
		</aside>
		<section>
			<h1>発生条件</h1>
			<p>
以下の条件を全て満たすと発生する。
			</p>
			<ul>
				<li>
HRTB によるライフタイムを使っている。
				</li> <li>
上記のライフタイムが GAT の引数になっている。
				</li> <li>
上記のライフタイムを <code>'static</code> で代用できない。
				</li>
			</ul>
			<section>
				<h2>舞台裏 (<code>'static</code> の出所)</h2>
				<p>
まず、GAT が関係しない場合について。この場合、HRTB によるライフタイム注釈は、常に任意のライフタイムを適用できなければならない。つまり、利用先の境界でライフタイムを縮小してはならない。ここで、<code>'static</code> が適用できた場合、ライフタイムの縮小がないと保証できる。この事がエラーの検出に流用されてきた。
				</p> <p>
次に、GAT が関係する場合について。この場合、HRTB によるライフタイム注釈は、もはや任意のライフタイムを適用できるわけではない。なぜなら、GAT のライフタイムパラメタは他のライフタイムとの境界条件を持ちうる。そのため、<code>'static</code> による方法を使うと、それらに違反してしまう場合がある。
				</p>
			</section>
		</section> <section>
			<h1>パターン</h1>
			<nav class="sub"/>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">
エラーメッセージに注釈あり
					</div>
				</hgroup>
<pre><samp class="console-rustc">
<mark class="edit">note</mark>: due to current limitations in the borrow checker, this implies a `'static` lifetime
</samp></pre>
				<p>
エラーメッセージに GAT の制限についての注釈がでる。
				</p> <p>
エラー番号は <a href="e0597.xhtml"><code>E0597</code></a> などで表れる (他にもあるかも…)。
				</p>
				<section>
					<h2>サンプル</h2>
					<p>
以下では、関数 <code>average</code> に HRTB によるライフタイム <code>'a</code> がある。そして、<code>'a</code> はトレイト <code>IntCollection</code> の関連型 <code>IntStream</code> の引数になる。ここで、<code>IntStream</code> の境界条件 <code>Self: 'a</code> により、<code>IntCollection</code> は <code>'a</code> から参照できなければならない。しかし、<code>'a</code> が <code>'static</code> で代用されると、<code>&amp;vec</code> を含む値は <code>'a</code> から参照できなくなる。
					</p>
<pre><code class="language-rust">
use std::slice::Iter;

fn main() {
    let vec = vec![1, 2, 3];
    let vp = IntVecPointer(<mark class="error">&amp;vec</mark>);
    average::&lt;IntVecPointer&gt;(vp);
}

trait IntCollection {
    type IntStream&lt;'a&gt;: Iterator&lt;Item = &amp;'a i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt;;
}

struct IntVecPointer&lt;'v&gt;(&amp;'v Vec&lt;i32&gt;);
impl&lt;'v&gt; IntCollection for IntVecPointer&lt;'v&gt; {
    type IntStream&lt;'a&gt; = Iter&lt;'a, i32&gt; where Self: 'a;
    fn int_stream(&amp;self) -&gt; Self::IntStream&lt;'_&gt; {
        self.0.iter()
    }
}

fn average&lt;T&gt;(arg: T) -&gt; f32
where
    T: IntCollection,
    for&lt;'a&gt; T::IntStream&lt;'a&gt;: ExactSizeIterator,
{
    let stream = arg.int_stream();
    let len = stream.len();
    let sum = stream.sum::&lt;i32&gt;();
    sum as f32 / len as f32
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0597]</mark><mark class="title">: `vec` does not live long enough</mark>
<mark class="info">  --&gt;</mark> src\main.rs:5:28
<mark class="info">   |</mark>
<mark class="info">4  |</mark>     let vec = vec![1, 2, 3];
<mark class="info">   |</mark>         <mark class="info">--- binding `vec` declared here</mark>
<mark class="info">5  |</mark>     let vp = IntVecPointer(&amp;vec);
<mark class="info">   |</mark>                            <mark class="error">^^^^ borrowed value does not live long enough</mark>
<mark class="info">6  |</mark>     average::&lt;IntVecPointer&gt;(vp);
<mark class="info">   |</mark>     <mark class="info">---------------------------- argument requires that `vec` is borrowed for `'static`</mark>
<mark class="info">7  |</mark> }
<mark class="info">   |</mark> <mark class="info">- `vec` dropped here while still borrowed</mark>
<mark class="info">   |</mark>
<mark class="edit">note</mark>: due to current limitations in the borrow checker, this implies a `'static` lifetime
<mark class="info">  --&gt;</mark> src\main.rs:25:31
<mark class="info">   |</mark>
<mark class="info">25 |</mark>     for&lt;'a&gt; T::IntStream&lt;'a&gt;: ExactSizeIterator,
<mark class="info">   |</mark>                               <mark class="edit">^^^^^^^^^^^^^^^^^</mark>
</samp></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1>パターン B</h1>
					<div class="subTitle">
エラーメッセージに注釈なし
					</div>
				</hgroup>
<pre><samp class="console-rustc">
<mark class="error">error</mark><mark class="title">: `T` does not live long enough</mark>
</samp></pre>
				<p>
エラーメッセージに GAT の制限についての注釈がでない。
				</p> <p>
また、関数の型パラメタについての指摘を、なぜか関数の宣言部ではなく本体部で受ける。
				</p>
				<section>
					<h2>サンプル</h2>
					<p>
					以下では、メソッド <code>all</code> に暗黙の HRTB によるライフタイムがある。そして、そのライフタイムがトレイト <code>Array</code> の関連型 <code>Element</code> の引数になる。ここで、<code>Element</code> の境界条件 <code>Self: 'a</code> により、<code>Array</code> は <code>'a</code> から参照できなければならない。しかし、<code>'a</code> が <code>'static</code> で代用されると、関数 <code>all_positive</code> の <code>T</code> には <code>'static</code> の境界がないためエラーになる (境界を追加するとエラーは解消する)。
					</p>
<pre><code class="language-rust">
fn main() {
    assert!(all_positive(vec![1, 2, 3]));
}

fn all_positive&lt;T&gt;(array: T) -&gt; bool
where
    T: for&lt;'a&gt; Array&lt;Element&lt;'a&gt; = &amp;'a i32&gt;,
{
    <mark class="error">array.all(|&amp;x| x &gt; 0)</mark>
}

trait Array {
    type Element&lt;'a&gt; where Self: 'a;

    fn get(&amp;self, index: usize) -&gt; Option&lt;Self::Element&lt;'_&gt;&gt;;

    fn all&lt;F&gt;(&amp;self, f: F) -&gt; bool
    where
        F: Fn(Self::Element&lt;'_&gt;) -&gt; bool,
    {
        for i in 0.. {
            let Some(elm) = self.get(i) else { return true };
            if !f(elm) {
                return false;
            }
        }

        unreachable!();
    }
}

impl Array for Vec&lt;i32&gt; {
    type Element&lt;'a&gt; = &amp;'a i32 where Self: 'a;

    fn get(&amp;self, index: usize) -&gt; Option&lt;Self::Element&lt;'_&gt;&gt; {
        (self as &amp;[_]).get(index)
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error</mark><mark class="title">: `T` does not live long enough</mark>
<mark class="info"> --&gt;</mark> src\main.rs:9:5
<mark class="info">  |</mark>
<mark class="info">9 |</mark>     array.all(|&amp;x| x &gt; 0)
<mark class="info">  |</mark>     <mark class="error">^^^^^^^^^^^^^^^^^^^^^</mark>
</samp></pre>
				</section>
			</section>
		</section>
	</body>
</html>
