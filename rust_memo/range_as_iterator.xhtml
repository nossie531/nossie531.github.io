<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: RangeBounds とイテレータ。</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
範囲型 (<code>RangeBounds</code> トレイトを実装する型) にはイテレータとして機能するものがある。
		</p> <p>
<code>next</code> メソッドを呼ぶと、開始端がインクリメントされ、直前の開始端が戻される。
		</p> 
		<aside class="normal">
			<p>
このメモの背景。
			</p> <p>
これは <code>for <var>pat</var> in <var>iter</var></code> 式におけるイテレータに <code>0..10</code> などと記載できることから、よく考えると当然なのだが、筆者個人としてはややトリッキーに感じたので…。
			</p>
		</aside>
		<section>
			<h1>対象となる型</h1>
			<p>
対象となる型には以下の条件が必要。
			</p>
			<ul>
				<li>
					<p>
範囲端を表す型が <code>Step</code> トレイトに適合。
					</p>
				</li> <li>
					<p>
範囲の開始点を持つ。
					</p> <p>
つまり、<code>Range</code>, <code>RangeFrom</code>, <code>RangeInclusive</code> が対象。
					</p> <p>
つまり、<code>RangeTo</code>, <code>RangeToInclusive</code>, <code>RangeFull</code> は対象外。
					</p>
				</li>
			</ul>
		</section> <section>
			<h1>簡単な例</h1>
			<p>
以下では <code>Range</code> 構造体をイテレータとして直接操作している。
			</p>
<pre><code class="language-rust">
fn main() {
    let mut range = 3..6;
    assert_eq!(range.next(), Some(3));
    assert_eq!(range, 4..6);
}
</code></pre>
		</section>
	</body>
</html>
