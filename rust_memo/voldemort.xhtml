<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: Voldemort パターン</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
Voldemort パターンは Rust でたまに使われるデザインパターンである。
		</p> <p>
クレート外に公開する型やトレイトについて、名指しでの利用を禁止する。
		</p>
		<aside class="normal">
			<p>
名前の由来について。
			</p> <p>
Voldemort は J. K. Rowling の小説『Harry Potter』の登場人物の名前である。彼は同作における最大の悪役で、他の登場人物からはその名前を口にする事すらも恐れられており、代わりに「名前を言ってはいけないあの人」などと言われている。
			</p>
		</aside>
		<section>
			<h1>基本</h1>
			<p>
以下を満たす型やトレイトが Voldemort パターンの適用対象になる。
			</p>
			<ul>
				<li>
					<p>
クレート外に公開されないモジュールに所属している。
					</p>
				</li> <li>
					<p>
クレート外に公開される他アイテムの構成要素になっている。
					</p>
				</li>
			</ul>
			<section>
				<h2>サンプルコード</h2>
				<p>
以下では、<code>my_lib</code> クレートの <code>MaginNo</code> 型が  Voldemort パターンの適用対象になる。
<br/>そのため、<code>my_lib</code> クレートが提供する以外の方法では、<code>MagicNo</code> の操作は行えない。
				</p>
				<figure class="file">
					<figcaption>my_app/src/main.rs</figcaption>
<pre><code class="language-rust">
use my_lib::*;

fn main() {
    print_magic_no(get_magic_no());
}
</code></pre>
				</figure>
				<figure class="file">
					<figcaption>my_lib/src/lib.rs</figcaption>
<pre><code class="language-rust">
mod private {
    pub struct MagicNo(pub i32);
}

pub fn print_magic_no(val: private::MagicNo) {
    println!("Magic number is {}.", val.0);
}

pub fn get_magic_no() -&gt; private::MagicNo {
    private::MagicNo(42)
}
</code></pre>
				</figure>
			</section> <section>
				<h2>補足: 公開指定の意味</h2>
				<p>
Voldemort パターンでは、"非公開" モジュール内のアイテムが、名指しこそできなくとも、他クレートに "公開" されている。この文言の不一致はどう解釈すれば良いのだろうか？
				</p> <p>
まず、モジュールの公開指定は、モジュール自身の公開有無にのみ関係し、そこに含まれる各アイテムの公開有無とは関係ない。そして、各アイテムの公開有無については、そのアイテム自身の公開指定が制御する。つまり、非公開モジュールは、それを経た名前空間での名指しを禁止する効果しかない…と考えると合点がいく。
				</p> <p>
もちろん殆どの場合、公開するなら名指しも許可する運用となるが、Voldemort パターンはその数少ない例外となる。
				</p>
			</section>
		</section> <section>
			<h1>応用</h1>
			<p>
上で紹介した例の他にも、いくつか使い方がある。
			</p>
			<section>
				<h2>Sealed トレイトパターン</h2>
				<p>
トレイトの基底となるトレイトに Voldemort パターンを適用する事で、新たなトレイトの実装を禁止する。詳しくは『<a href="sealed_trait.xhtml">Sealed トレイトパターン</a>』を参照。
				</p>
			</section> <section>
				<h2>仮想的な非公開化 (非推奨)</h2>
				<p>
Voldemort 型のダミー引数やダミー型引数を使えば、仮想的に非公開の関数を作れる。
				</p> <p>
これにより、トレイトメソッドの一部のみを非公開として扱う、といった事が可能になる。
				</p> <p>
ただし、この手法はトレイトのデフォルト実装から呼ばれる共通処理のそこそこ分かりやすい置場、くらいにしかならない。それに対し、欠点は多い。まず、無駄な引数があり気が散る。また、IDE の補完候補が信用できなくなる問題もある。
				</p>
			</section>
		</section> <section>
			<h1>rustdoc</h1>
			<p>
Voldemort パターンを適用したアイテムは、rustdoc では文書化されない。
			</p> <p>
ただし、それを構成要素とするアイテムの宣言部には名前が残る。この名前はもはや名指しできないが、それを含むために制限される操作がある事の暗示や、Voldemort パターンが適用されたその他のアイテムとの区別には役立つ。
			</p>
		</section>
	</body>
</html>
