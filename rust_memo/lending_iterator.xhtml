<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: 貸出イテレータ</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
貸出イテレータ (Lending Iterator) はイテレータの変種である。通常のイテレータと違い、アイテムにイテレータへの参照が含まれる。そのため、イテレータが破棄されるとアイテムも使用できなくなる。
		</p>
		<section>
			<h1>サンプル</h1>
			<p>
以下では、<code>WindowsMut</code> 型が <code>LendingIterator</code> を実装している。このイテレータのアイテムは配列の可変なスライスで、指定された長さとアイテムの取得ごとにずれる開始位置を持つ。ここで、アイテムが同時に存在すると編集が競合しうる。そのため、各アイテムの可変参照をイテレータ由来として排他制御する必要がある。
			</p>
<pre><code class="language-rust">
fn main() {
    let mut arr = [1, 2, 3];
    let mut iter = WindowsMut::new(&amp;mut arr, 2);
    assert_eq!(iter.next(), Some([1, 2].as_mut_slice()));
    assert_eq!(iter.next(), Some([2, 3].as_mut_slice()));
    assert_eq!(iter.next(), None);
}

trait LendingIterator {
    type Item&lt;'a&gt; where Self: 'a;
    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&lt;'_&gt;&gt;;
}

struct WindowsMut&lt;'arr, T&gt; {
    slice: &amp;'arr mut [T],
    size: usize,
    pos: usize,
}

impl&lt;'arr, T&gt; WindowsMut&lt;'arr, T&gt; {
    fn new(slice: &amp;'arr mut [T], size: usize) -&gt; Self {
        assert_ne!(size, 0);
        Self { slice, size, pos: 0 }
    }
}

impl&lt;'arr, T&gt; LendingIterator for WindowsMut&lt;'arr, T&gt; {
    type Item&lt;'a&gt; = &amp;'a mut [T] where Self: 'a;

    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&lt;'_&gt;&gt; {
        let result = self.slice[self.pos..].get_mut(..self.size)?;
        self.pos += 1;
        Some(result)
    }
}
</code></pre>
		</section>
	</body>
</html>
