<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0597 - 参照中の参照先の破棄</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="error">error[E0597]</mark><mark class="title">: `x` does not live long enough</mark>
</samp></pre>
		<p>
参照先が参照より先に破棄される場合に発生するエラー。
		</p>
		<section>
			<h1>パターン</h1>
			<doc-nav-sub/>
			<aside class="normal old">
				<p>
Rust 2024 での改良点
				</p> <p>
現在のエディションではパターン <a href="#blockTail">D</a> は発生しない。
				</p>
			</aside>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">スコープの違反</div>
				</hgroup>
				<p>
以下では、<code>inside_val</code> と <code>outside_ref</code> を比べると、前者が先に破棄される。<br/>
そのため、前者の参照は後者に代入できない。
				</p>
<pre><code class="language-rust">
fn main() {
    let outside_ref;

    {
        let inside_val = 0;
        outside_ref = <mark class="error">&amp;inside_val</mark>
    }

    dbg!(outside_ref);
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0597]</mark><mark class="title">: `inside_val` does not live long enough</mark>
<mark class="info"> --&gt;</mark> src\main.rs:6:23
<mark class="info">  |</mark>
<mark class="info">5 |</mark>         let inside_val = 0;
<mark class="info">  |</mark>             <mark class="info">---------- binding `inside_val` declared here</mark>
<mark class="info">6 |</mark>         outside_ref = &amp;inside_val
<mark class="info">  |</mark>                       <mark class="error">^^^^^^^^^^^ borrowed value does not live long enough</mark>
<mark class="info">7 |</mark>     <mark class="error">}</mark>
<mark class="info">  |</mark>     <mark class="info">- `inside_val` dropped here while still borrowed</mark>
<mark class="info">8 |</mark>
<mark class="info">9 |</mark>     dbg!(outside_ref);
<mark class="info">  |</mark>          <mark class="info">----------- borrow later used here</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B</h1>
					<div class="subTitle">ライフタイムの違反</div>
				</hgroup>
				<p>
以下では、<code>use_static_ref</code> の引数は <code>static</code> ライフタイムの参照型でなければならない。<br/>
にも関わらず、ローカルライフタイムの参照 <code>&amp;local</code> を指定している。
				</p>
<pre><code class="language-rust">
fn main() {
    let local = 0;
    use_static_ref(<mark class="error">&amp;local</mark>);
}

fn use_static_ref(_: &amp;'static i32) {
    // NOP.
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0597]</mark><mark class="title">: `local` does not live long enough</mark>
<mark class="info"> --&gt;</mark> src\main.rs:3:20
<mark class="info">  |</mark>
<mark class="info">2 |</mark>     let local = 0;
<mark class="info">  |</mark>         <mark class="info">----- binding `local` declared here</mark>
<mark class="info">3 |</mark>     use_static_ref(&amp;local);
<mark class="info">  |</mark>     <mark class="info">---------------</mark><mark class="error">^^^^^^</mark><mark class="info">-</mark>
<mark class="info">  |</mark>     <mark class="info">|</mark>              <mark class="error">|</mark>
<mark class="info">  |</mark>     <mark class="info">|</mark>              <mark class="error">borrowed value does not live long enough</mark>
<mark class="info">  |</mark>     <mark class="info">argument requires that `local` is borrowed for `'static`</mark>
<mark class="info">4 |</mark> <mark class="error">}</mark>
<mark class="info">  |</mark> <mark class="info">- `local` dropped here while still borrowed</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="siblingRef">パターン C</h1>
					<div class="subTitle">
<code>Drop</code> トレイトの影響 (兄弟フィールドの参照防止)
					</div>
				</hgroup>
				<p>
詳しくは『<a href="e_drop_lifetime.xhtml">Drop トレイトのライフタイムへの影響</a> - <a href="e_drop_lifetime.xhtml#siblingRef">兄弟フィールドの参照防止</a>』を参照。
<br/> (注: <code>Drop</code> トレイトを直接的に扱っていなくても考慮が必要。)
				</p>
				<section>
					<h2>サンプル</h2>
<pre><code class="language-rust">
fn main() {
    let mut data = MyData::default();
    data.on_drop = Some(OnDrop(<mark class="error">&amp;data.id</mark>));
}

#[derive(Default)]
struct MyData&lt;'a&gt; {
    id: i32,
    on_drop: Option&lt;OnDrop&lt;'a&gt;&gt;,
}

struct OnDrop&lt;'a&gt;(&amp;'a i32);
impl&lt;'a&gt; Drop for OnDrop&lt;'a&gt; {
    fn drop(&amp;mut self) {
        println!("ID [{}] is drpoped.", self.0)
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0597]</mark><mark class="title">: `data.id` does not live long enough</mark>
<mark class="info"> --&gt;</mark> src\main.rs:3:38
<mark class="info">  |</mark>
<mark class="info">2 |</mark>     let mut data = MyData::default();
<mark class="info">  |</mark>         <mark class="info">-------- binding `data` declared here</mark>
<mark class="info">3 |</mark>     data.on_drop = Some(OnDrop(&amp;data.id));
<mark class="info">  |</mark>                                <mark class="error">^^^^^^^^ borrowed value does not live long enough</mark>
<mark class="info">4 |</mark> }
<mark class="info">  |</mark> <mark class="info">-</mark>
<mark class="info">  |</mark> <mark class="info">|</mark>
<mark class="info">  |</mark> <mark class="info">`data.id` dropped here while still borrowed</mark>
<mark class="info">  |</mark> <mark class="info">borrow might be used here, when `data` is dropped and runs the destructor for type `MyData&lt;'_&gt;`</mark>
</samp></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1 id="blockTail">
<del>パターン D</del> <span class="navNone">(改良済)</span>
					</h1>
					<div class="subTitle">
<code>Drop</code> トレイトの影響 (ブロック式の末尾)
					</div>
				</hgroup>
				<details class="normal">
					<summary>[旧情報]</summary>
					<p>
詳しくは『<a href="e_drop_lifetime.xhtml">Drop トレイトのライフタイムへの影響</a> - <a href="e_drop_lifetime.xhtml#blockTail">ブロック式の末尾処理</a>』を参照。
<br/> (注: <code>Drop</code> トレイトを直接的に扱っていなくても考慮が必要。)
					</p>
					<section>
						<h2>サンプル</h2>
						<p>
以下では、<code>OnDrop(&amp;local)</code> がブロック式の末尾にある。しかし、その破棄による <a href="https://doc.rust-lang.org/std/ops/trait.Drop.html#tymethod.drop"><code>drop</code></a> が実行される時点で、<code>local</code> はすでに破棄され使えなくなっている。
						</p>
<pre><code class="language-rust">
fn main() {
    let val = {
        let local = 42;
        *OnDrop(<mark class="error">&amp;local</mark>).0
    };

    println!("{}", val);
}

struct OnDrop&lt;'a&gt;(&amp;'a i32);
impl Drop for OnDrop&lt;'_&gt; {
    fn drop(&amp;mut self) {
        println!("ID [{}] is drpoped.", self.0)
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0597]</mark><mark class="title">: `local` does not live long enough</mark>
<mark class="info"> --&gt;</mark> src\main.rs:4:11
<mark class="info">  |</mark>
<mark class="info">3 |</mark>         let local = 42;
<mark class="info">  |</mark>             <mark class="info">----- binding `local` declared here</mark>
<mark class="info">4 |</mark>         *OnDrop(&amp;local).0
<mark class="info">  |</mark>          <mark class="info">-------</mark><mark class="error">^^^^^^</mark><mark class="info">-</mark>
<mark class="info">  |</mark>          <mark class="info">|</mark>      <mark class="error">|</mark>
<mark class="info">  |</mark>          <mark class="info">|</mark>      <mark class="error">borrowed value does not live long enough</mark>
<mark class="info">  |</mark>          <mark class="info">a temporary with access to the borrow is created here ...</mark>
<mark class="info">5 |</mark>     };
<mark class="info">  |</mark>     <mark class="info">-- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `OnDrop`</mark>
<mark class="info">  |</mark>     <mark class="info">|</mark>
<mark class="info">  |</mark>     <mark class="info">`local` dropped here while still borrowed</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: the temporary is part of an expression at the end of a block;
          consider forcing this temporary to be dropped sooner, before the block's local variables are dropped
<mark class="info">help</mark>: for example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block
<mark class="info">  |</mark>
<mark class="info">4 |</mark>         <mark class="edit">let x =</mark> *OnDrop(&amp;local).0<mark class="edit">; x</mark>
<mark class="info">  |</mark>         <mark class="edit">+++++++</mark>                  <mark class="edit">+++</mark>
</samp></pre>
					</section>
				</details>
			</section> <section>
				<hgroup>
					<h1>パターン E</h1>
					<div class="subTitle">HRTB の機能制限</div>
				</hgroup>
<pre><samp class="console-rustc">
<mark class="edit">note</mark>: due to current limitations in the borrow checker, this implies a `'static` lifetime
</samp></pre>
				<p>
このパターンはエラーメッセージに上記の特徴的な注釈が含まれる。
				</p> <p>
詳しくは『<a href="e0597_hrtb_limitation.xhtml">E0597 - HRTB の機能制限</a>』を参照。
				</p>
			</section>
		</section>
	</body>
</html>
