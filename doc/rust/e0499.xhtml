<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0499 - 可変参照の重複</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="error">error[E0499]</mark><mark class="title">: cannot borrow `x` as mutable more than once at a time</mark>
</samp></pre>
		<p>
すでに可変参照されている領域を可変参照しようとした。
		</p> <p>
(可変参照は排他参照とも呼ばれる。)
		</p>
		<section>
			<h1>パターン</h1>
			<nav class="sub"/>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">基本形</div>
				</hgroup>
				<p>
すでに可変参照されている変数を可変参照している。
				</p>
<pre><code class="language-rust">
fn main() {
    let mut value = 0;
    let mut mr1 = &amp;mut value;
    let mut mr2 = &amp;mut value;
    println!("{mr1}");
    println!("{mr2}");
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0499]</mark><mark class="title">: cannot borrow `value` as mutable more than once at a time</mark>
<mark class="info"> --&gt;</mark> src/main.rs:4:19
<mark class="info">  |</mark>
<mark class="info">3 |</mark>     let mut mr1 = &amp;mut value;
<mark class="info">  |</mark>                   <mark class="info">---------- first mutable borrow occurs here</mark>
<mark class="info">4 |</mark>     let mut mr2 = &amp;mut value;
<mark class="info">  |</mark>                   <mark class="error">^^^^^^^^^^ second mutable borrow occurs here</mark>
<mark class="info">5 |</mark>     println!("{mr1}");
<mark class="info">  |</mark>               <mark class="info">----- first borrow later used here</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B</h1>
					<div class="subTitle">ループ</div>
				</hgroup>
				<p>
過去のループで保存した可変参照と競合している。
				</p>
<pre><code class="language-rust">
fn main() {
    let mut value = 0;
    let mut refs = vec![];
    for _ in 0..2 {
        refs.push(<mark class="error">&amp;mut value</mark>);
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0499]</mark><mark class="title">: cannot borrow `value` as mutable more than once at a time</mark>
<mark class="info"> --&gt;</mark> src\main.rs:5:19
<mark class="info">  |</mark>
<mark class="info">5 |</mark>         refs.push(&amp;mut value);
<mark class="info">  |</mark>         <mark class="info">----</mark>      <mark class="error">^^^^^^^^^^ `value` was mutably borrowed here in the previous iteration of the loop</mark>
<mark class="info">  |</mark>         <mark class="info">|</mark>
<mark class="info">  |</mark>         <mark class="info">first borrow used here, in later iteration of loop</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1 id="nll_fp">パターン C</h1>
					<div class="subTitle">NLL の偽陽性</div>
				</hgroup>
				<p>
2025 年現在の借用チェッカー NLL の偽陽性が原因になっている。
				</p> <p>
詳しくは『<a href="e_borrow_checker_limitation.xhtml">借用チェッカーの制限</a> - <a href="e_borrow_checker_limitation.xhtml#nll_fp2">偽陽性の例 2</a>』を参照。
				</p>
				<section>
					<h2>GAT の制限</h2>
					<p>
<a href="associated_type.xhtml#gat">GAT</a> を使っている場合、それによる擬陽性もよく発生する。
					</p>
					<p>
詳しくは『<a href="e0499_nll_gat.xhtml">E0499 - NLL の偽陽性 × GAT</a>』を参照。
					</p>
				</section>
			</section>
		</section>
	</body>
</html>
