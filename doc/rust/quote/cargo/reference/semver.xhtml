<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>blockquote</title>
		<script src="../../../../../lib/quote.js"></script>
		<script src="../../../../../lib/prism/prism.js"></script>
		<link rel="stylesheet" href="../../../../../style/quote_frame.css"/>
	</head>
	<body class="forQuote">
		<blockquote cite="https://doc.rust-lang.org/cargo/reference/semver.html#impl-item-new">
			<h3 id="impl-item-new">
<a class="header" href="#impl-item-new">許容される破壊的変更: 任意の固有アイテムの追加</a>
			</h3>
			<p>
通常は実装に固有のアイテムを追加するのは安全である。なぜなら固有のアイテムはトレイトのアイテムより優先される。ただし、もし実装されたトレイトのアイテムと同じ名前で異なるシグネチャなら、特定の場合では衝突して問題の原因になるかもしれない。
			</p>
<pre><code class="language-rust">// Breaking change example

///////////////////////////////////////////////////////////
// Before
pub struct Foo;

///////////////////////////////////////////////////////////
// After
pub struct Foo;

impl Foo {
    pub fn foo(&amp;self) {}
}

///////////////////////////////////////////////////////////
// Example usage that will break.
use updated_crate::Foo;

trait Trait {
    fn foo(&amp;self, x: i32) {}
}

impl Trait for Foo {}

fn main() {
    let x = Foo;
    x.foo(1); // Error: this method takes 0 arguments but 1 argument was supplied
}</code></pre>
			<p>
注意すべきはシグネチャが一致する場合で、これはコンパイル時のエラーにはならないだろう、だが実行時の挙動のこっそりとした変更になりうる (なぜならそれはもう異なる関数を実行している)。
			</p> <p>
マイグレーション戦略:
			</p>
			<ul>
				<li>
プロジェクトによってはこれを容認可能な破壊として捉えるだろう、特に新しいアイテムの名前が既存コードと衝突しなさそうなら。こうした衝突を避けるために名前は慎重に選べ。さらに、依存性の更新時に正しい関数を選択するために利用者側に<a href="../../reference/expressions/call-expr.html#disambiguating-function-calls">曖昧でない構文</a>の追加を要請するのも容認可能かもしれない。
				</li>
			</ul>
		</blockquote>
	</body>
</html>

