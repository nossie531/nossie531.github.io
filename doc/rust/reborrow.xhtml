<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: 再借用</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
既存の参照から新しい参照を生成する事を再借用という。
		</p>
		<aside class="normal">
			<p>
用語の出所について。
			</p> <p>
この用語が公式のものかどうかは不明。ネット上でたまに見かける程度。<br/>
ただ、この用語がないとしっくりと説明できない挙動が多い。
			</p>
		</aside>
		<section>
			<h1>単純な例</h1>
			<p>
以下は単純な再借用の例。
			</p> <p>
- 既存の参照の別名を得るパターン。
			</p>
<pre><code class="language-rust">
let data = 0;
let data_ref = &amp;data;
let _data_ref2 = data_ref as &amp;i32;
</code></pre>
			<p>
- 可変参照を不変参照化するパターン。
			</p>
<pre><code class="language-rust">
let mut data = 0;
let data_mut = &amp;mut data;
let _data_ref = data_mut as &amp;i32;
</code></pre>
		</section> <section>
			<h1>型推論との関係</h1>
			<p>
型推論と再借用について。
			</p> <p>
参照から <code>let</code> による初期化を行う場合、型宣言やキャストにより型を明示すると、再借用による新しい参照と見なされ、型を省略すると、既存の参照の所有権の移動とみなされる。
			</p>
			<aside class="normal">
				<p>
Rust の独特な仕様。
				</p> <p>
Rust 以外の多くの言語では、型推論はただの糖衣構文である。一方、Rust では、型の明示は新しいスコープの立ち上げを意味していて、これにより動作が微妙に変わる事がある。
				</p>
			</aside>
<pre><code class="language-rust">
// 型を明示 ⇒ 再借用。
fn test1() {
    let x = &amp;mut 0;
    let _y = x as &amp;mut _;
    dbg!(*x);
}

// 型を省略 ⇒ 所有権の移動。
fn test2() {
    let x = &amp;mut 0;
    let _y = x;
	dbg!(<mark class="error">*x</mark>);
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0382]</mark><mark class="title">: use of moved value: `x`</mark>
<mark class="info">  --&gt;</mark> src\main.rs:10:10
<mark class="info">   |</mark>
<mark class="info">10 |</mark>     let x = &amp;mut 0;
<mark class="info">   |</mark>         <mark class="info">- move occurs because `x` has type `&amp;mut i32`, which does not implement the `Copy` trait</mark>
<mark class="info">11 |</mark>     let _y = x;
<mark class="info">   |</mark>              <mark class="info">- value moved here</mark>
<mark class="info">12 |</mark>     dbg!(*x);
<mark class="info">   |</mark>          <mark class="error">^^ value used here after move</mark>
</samp></pre>
		</section>
	</body>
</html>
