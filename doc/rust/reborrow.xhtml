<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: 再借用</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
再借用について。
		</p>
		<aside class="normal">
			<p>
用語の出所。
			</p> <p>
<time>2025 年現在</time>、公式資料でもたまに見る用語だが、正式な定義は<a href="https://github.com/rust-lang/reference/issues/788">まだない</a>。<br/>
			</p>
		</aside>
		<section>
			<h1>概要</h1>
			<p>
再借用では、元になる参照から新たな参照が、そのライフタイムや可変性のみを変えて再取得される。なお、殆どの場合これはほぼ暗黙で行われる。そのため、普段はあまり意識する機会がない。しかし、関連したエラーなどを読み解くには、その知識が必要になる事がある。
			</p>
		</section> <section>
			<h1>不変参照の再借用</h1>
			<p>
不変参照から再借用された参照は、元の参照の別名のように扱える。
			</p>
			<section>
				<h2>関連動作</h2>
			<p>
不変参照 <code>&amp;T</code> はトレイト <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> を<a href="https://doc.rust-lang.org/std/marker/trait.Copy.html#impl-Copy-for-%26T">実装</a>している。再借用時もこれが利用される。
			</p>
<pre><code class="language-rust">
impl&lt;T&gt; Copy for &amp;T where T: ?Sized
</code></pre>
			</section> <section>
				<h2>ライフタイムの制限</h2>
				<p>
不変参照がフィールドアクセス式経由で再借用される場合、<a href="#mut_lifetime_limit">可変参照の場合</a>と異なり、結果のライフタイムは特に制限はされず、フィールド側のライフタイムそのものになる。そのため、フィールドからベース側のデータの親データを取得したりもできる。
				</p>
			</section> <section>
				<h2>サンプル</h2>
				<p>
以下では、参照 <code>data_ref</code> の別名として、<code>_data_ref2</code> を取得している。
				</p>
<pre><code class="language-rust">
let data = 0;
let data_ref = &amp;data;
let _data_ref2 = data_ref as &amp;i32;
</code></pre>
			</section>
		</section> <section>
			<h1>可変参照の再借用</h1>
			<p>
可変参照から再借用された参照は、元の参照の一時的な代理になる。
			</p> <p>
なお、可変参照の使用前の再借用はほぼ必須であり、暗黙で行われる。
			</p>
			<section>
				<h2>関連動作</h2>
				<p>
可変参照 <code>&amp;mut T</code> は不変参照 <code>&amp;T</code> と異なり、トレイト <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> を実装しない。しかし、可変参照の使用のために毎回ムーブを行うと、その使用後に毎回ムーブの戻しが必要になる。ここで、再借用で作られた代理を使えば、そうしたムーブは必要なくなる。
				</p>
			</section> <section>
				<h2 id="mut_lifetime_limit">ライフタイムの制限</h2>
				<p>
可変参照がフィールドアクセス式経由で再借用される場合、結果のライフタイムはベース側のライフタイムを超えないよう制限される。そうでなければ、ベース側から辿れる可変参照と、再借用による可変参照、両者が同時に存在する期間が生まれ、可変参照の排他ルールが破られてしまう。(エラーの詳細は､『<a href="e_short_lifetime_reborrow.xhtml">error - ライフタイムの不足と再借用</a>』を参照。)
				</p>
			</section> <section>
				<h2>サンプル</h2>
				<p>
以下では、関数 <code>use_mut</code> の引数として、参照 <code>val_mut</code> の再借用が渡されている。
				</p>
<pre><code class="language-rust">
fn main() {
    let mut val = 42;
    let val_mut = &amp;mut val;
    use_mut(val_mut);
    assert_eq!(*val_mut, 43)
}

fn use_mut(arg: &amp;mut i32) {
    *arg += 1;
}
</code></pre>
			</section>
		</section> <section>
			<h1>可変参照の不変参照化</h1>
			<p>
再借用を利用して、可変参照を不変参照化できる。
			</p>
			 <section>
				<h2>サンプル</h2>
				<p>
以下では、可変参照 <code>data_mut</code> を不変参照化して、<code>_data_ref</code> を取得している。
				</p>
<pre><code class="language-rust">
let mut data = 0;
let data_mut = &amp;mut data;
let _data_ref = data_mut as &amp;i32;
</code></pre>
			</section>
		</section> <section>
			<h1>型推論との関係</h1>
			<p>
初期化や代入で型推論が行われる場合、再借用は行われない。
			</p> <p>
なぜならその場合、ライフタイムや可変性が右辺と同じであると想定される。
			</p> <p>
つまり、型を省略するか否かで再借用か、もしくは通常のコピーや移動かが変化する。
			</p>
			<aside class="normal">
				<p>
Rust の独特な仕様。
				</p> <p>
Rust 以外の多くの言語では、型推論はただの糖衣構文である。一方、Rust では、型の明示は新しいスコープの立ち上げを意味していて、これにより動作が微妙に変わる事がある。
				</p>
			</aside>
			<section>
				<h2>サンプル</h2>
				<p>
以下では、<code>with_infer</code> と <code>with_move</code> は <code>_y</code> の初期化時の型推論の有無のみが異なる。
				</p>
<pre><code class="language-rust">
fn with_infer() {
    let x = &amp;mut 0;
    let _y = x as &amp;mut _;
    dbg!(*x);
}

fn with_move() {
    let x = &amp;mut 0;
    let _y = x;
	dbg!(<mark class="error">*x</mark>);
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0382]</mark><mark class="title">: use of moved value: `x`</mark>
<mark class="info">  --&gt;</mark> src\main.rs:10:10
<mark class="info">   |</mark>
<mark class="info">10 |</mark>     let x = &amp;mut 0;
<mark class="info">   |</mark>         <mark class="info">- move occurs because `x` has type `&amp;mut i32`, which does not implement the `Copy` trait</mark>
<mark class="info">11 |</mark>     let _y = x;
<mark class="info">   |</mark>              <mark class="info">- value moved here</mark>
<mark class="info">12 |</mark>     dbg!(*x);
<mark class="info">   |</mark>          <mark class="error">^^ value used here after move</mark>
</samp></pre>
			</section>
		</section>
	</body>
</html>
