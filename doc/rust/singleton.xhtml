<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: Singleton パターン</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
Rust での Singleton パターンの適用方法について。
		</p> 
		<section>
			<h1>用語</h1>
			<p>
Singleton パターンとは、GoF 本に掲載されるデザインパターンの一つ。クラス (構造体) のインスタンスをただ一つに制限する事で、一つの共有データにアプリのどこからでもアクセスできるようにする。
			</p>
		</section> <section>
			<h1>サンプル</h1>
			<p>
状況に応じた手法がいくつかある。
			</p>
			<nav class="sub"/>
			<section>
				<hgroup>
					<h1>サンプル 1</h1>
					<div class="subTitle">
						遅延初期化 (読取専用)
					</div>
				</hgroup>
				<p>
以下では、<code>MyData</code> のインスタンスの作成に必要となるメンバが、<code>sample</code> から公開されていない。そのため、<code>MyData</code> のインスタンスは、<code>sample</code> が作るただ一つに制限される。
				</p>
<pre><code class="language-rust">
use crate::sample::MyData;

fn main() {
    let singleton = MyData::get();
    assert_eq!(singleton.val(), 42);
}

mod sample {
    use std::sync::LazyLock;

    static SINGLETON: LazyLock&lt;MyData&gt; = LazyLock::new(||
        MyData::new(42)
    );

    pub struct MyData {
        val: i32
    }
    
    impl MyData {
        pub fn get() -&gt; &amp;'static MyData {
            LazyLock::force(&amp;SINGLETON)
        }

        pub fn val(&amp;self) -&gt; i32 {
            self.val
        }

        fn new(val: i32) -&gt; Self {
            Self { val }
        }
    }
}
</code></pre>
			</section> <section>
				<hgroup>
					<h1>サンプル 2</h1>
					<div class="subTitle">
						遅延初期化 (書込可能)
					</div>
				</hgroup>
				<p>
以下では、前の例とは異なり、構造体へのアクセスを <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a> で同期している。なお、同期を構造体単位でなくフィールド単位にしたり、<a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex</code></a> の代わりに <a href="https://doc.rust-lang.org/std/sync/struct.RwLock.html"><code>RwLock</code></a> やアトミック型を使う方法も考えられる (コード量と並列性からどれも一長一短がある)。 
				</p>
<pre><code class="language-rust">
use crate::sample::MyData;

fn main() {
    let mut singleton = MyData::get();
    singleton.set_val(43);
    assert_eq!(singleton.val(), 43);
}

mod sample {
    use std::sync::{LazyLock, Mutex, MutexGuard};

    static SINGLETON: LazyLock&lt;Mutex&lt;MyData&gt;&gt; = LazyLock::new(||
        Mutex::new(MyData::new(42))
    );

    pub struct MyData {
        val: i32,
    }

    impl MyData {
        pub fn get() -&gt; MutexGuard&lt;'static, MyData&gt; {
            LazyLock::force(&amp;SINGLETON).lock().unwrap()
        }

        pub fn val(&amp;self) -&gt; i32 {
            self.val
        }

        pub fn set_val(&amp;mut self, value: i32) {
            self.val = value
        }

        fn new(val: i32) -&gt; Self {
            Self { val }
        }
    }
}
</code></pre>
			</section> <section>
				<hgroup>
					<h1>サンプル 3</h1>
					<div class="subTitle">
						手動初期化
					</div>
				</hgroup>
				<p>
以下では、遅延初期化のサンプルで使われていた <a href="https://docs.rs/once_cell/1.19.0/once_cell/sync/struct.Lazy.html"><code>Lazy</code></a> に代わって <a href="https://docs.rs/once_cell/1.19.0/once_cell/sync/struct.OnceCell.html"><code>OnceCell</code></a> を使っている。これにより、アクセス時に自動的に既定値で初期化するのではなく、事前に引数を与えて初期化するようにしている。
				</p>
<pre><code class="language-rust">
use crate::sample::MyData;

fn main() {
    MyData::init(42);
    assert_eq!(MyData::get().val(), 42);
}

mod sample {
    use std::sync::OnceLock;

    static SINGLETON: OnceLock&lt;MyData&gt; = OnceLock::new();

    #[derive(Debug)]
    pub struct MyData {
        val: i32,
    }

    impl MyData {
        pub fn init(val: i32) {
            SINGLETON
                .set(MyData::new(val))
                .expect("Should be called only one time.");
        }

        pub fn get() -&gt; &amp;'static MyData {
            SINGLETON
                .get()
                .expect("Should be called after initialization.")
        }

        pub fn val(&amp;self) -&gt; i32 {
            self.val
        }

        fn new(val: i32) -&gt; Self {
            Self { val }
        }
    }
}
</code></pre>
			</section>
		</section>
	</body>
</html>
