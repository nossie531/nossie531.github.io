<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0119 - トレイト実装の衝突</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `SomeTrait`</mark>
</samp></pre>
		<p>
トレイト実装の指定が既存のものと衝突した。
		</p>
		<section>
			<h1>基本ルール</h1>
			<p>
同じ型と同じトレイトの組合せで、すでに他に実装があると衝突する。
			</p> <p>
これがもし許されると、どの実装が正しいのか分からなくなってしまう。
			</p>
			<section>
				<h2>空のトレイトの取扱</h2>
				<p>
マーカートレイトのような空のトレイトについても、例外扱いはされない。つまり、空の実装どうしでも衝突しうる (ソースが短くなるので以降のサンプルでは多用している)。
				</p>
			</section>
		</section> <section>
			<h1>パターン</h1>
			<nav class="sub"/>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">自明なパターン</div>
				</hgroup>
				<p>
全く同じトレイトと型を指定している。
				</p>
				<hr class="split"/>
<pre><code class="language-rust">
trait MyTrait {}
struct MyType {}

impl MyTrait for MyType {}
<mark class="error">impl MyTrait for MyType</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B1</h1>
					<div class="subTitle">型パラメタ (ブランケット実装との衝突)</div>
				</hgroup>
				<p>
同じトレイトについて、個別の型への実装と、ブランケット実装がある。<br/>
しかし、個別の型がブランケット実装の範囲に含まれてしまっている。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyType</code> は <code>T</code> に含まれている。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
struct MyType {}

impl MyTrait for MyType {}
<mark class="error">impl&lt;T&gt; MyTrait for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\sub.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType {}
<mark class="info">  |</mark> <mark class="info">----------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B2</h1>
					<div class="subTitle">型パラメタ (ブランケット実装どうしの衝突)</div>
				</hgroup>
				<p>
同じトレイトについて、ブランケット実装が複数ある。<br/>
しかし、両者の範囲が重複してしまっている。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>TraitX</code> と <code>TraitY</code> の両方を実装する型への考慮がない。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
trait TraitX {}
trait TraitY {}

impl&lt;T&gt; MyTrait for T where T: TraitX {}
<mark class="error">impl&lt;T&gt; MyTrait for T</mark> where T: TraitY {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:6:1
<mark class="info">  |</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for T where T: TraitX {}
<mark class="info">  |</mark> <mark class="info">--------------------- first implementation here</mark>
<mark class="info">6 |</mark> impl&lt;T&gt; MyTrait for T where T: TraitY {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B3</h1>
					<div class="subTitle">
型パラメタ <span class="nw">(ジェネリクス型)</span>
					</div>
				</hgroup>
				<p>
ジェネリクス型どうしが同じになりうるパターン。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyType&lt;i32&gt;</code> と <code>MyType&lt;T&gt;</code> は同じになりうる。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
struct MyType&lt;T&gt;(T);

impl MyTrait for MyType&lt;i32&gt; {}
<mark class="error">impl&lt;T&gt; MyTrait for MyType&lt;T&gt;</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait` for type `MyType&lt;i32&gt;`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait for MyType&lt;i32&gt; {}
<mark class="info">  |</mark> <mark class="info">---------------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait for MyType&lt;T&gt; {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType&lt;i32&gt;`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B4</h1>
					<div class="subTitle">
型パラメタ <span class="nw">(ジェネリクストレイト)</span>
					</div>
				</hgroup>
				<p>
ジェネリクストレイトどうしが同じになりうるパターン。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyTrait&lt;i32&gt;</code> と <code>MyTrait&lt;T&gt;</code> は同じになりうる。
				</p>
<pre><code class="language-rust">
trait MyTrait&lt;T&gt; {}
struct MyType {}

impl MyTrait&lt;i32&gt; for MyType {}
<mark class="error">impl&lt;T&gt; MyTrait&lt;T&gt; for MyType</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait&lt;i32&gt;` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl MyTrait&lt;i32&gt; for MyType {}
<mark class="info">  |</mark> <mark class="info">---------------------------- first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T&gt; MyTrait&lt;T&gt; for MyType {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyType`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン B5</h1>
					<div class="subTitle">
型パラメタ <span class="nw">(共有される型パラメタ)</span>
					</div>
				</hgroup>
				<p>
トレイトと型に同じ型パラメタが含まれるパターン。
				</p>
				<hr class="split"/>
				<p>
以下では、<code>MyTrait&lt;i32&gt;</code> と <code>i32</code> の組は、<code>MyTrait&lt;T&gt;</code> と <code>T</code> の組と同じになりうる。
				</p>
<pre><code class="language-rust">
trait MyTrait&lt;T&gt; {}

impl MyTrait&lt;i32&gt; for i32 {}
<mark class="error">impl&lt;T&gt; MyTrait&lt;T&gt; for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark>: conflicting implementations of trait `MyTrait&lt;i32&gt;` for type `i32`
<mark class="info"> --&gt;</mark> src\lib.rs:4:1
<mark class="info">  |</mark>
<mark class="info">3 |</mark> impl MyTrait&lt;i32&gt; for i32 {}
<mark class="info">  |</mark> <mark class="info">------------------------- first implementation here</mark>
<mark class="info">4 |</mark> impl&lt;T&gt; MyTrait&lt;T&gt; for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン C</h1>
					<div class="subTitle">
関連型の影響 <span class="nw">(Rust の欠陥)</span>
					</div>
				</hgroup>
				<p>
関連型を区別しない問題がある。
				</p>
				<aside class="normal moan">
					<p>
修正の見込みについて。
					</p> <p>
<time>2025 年現在</time>、修正は延期中。<a href="https://github.com/rust-lang/rust/issues/20400">Github の投稿</a>によると、トレイトシステム全体の刷新が控えているらしく、また修正が及ぼす波及効果の検討も必要らしい。
					</p>
				</aside>
				<hr class="split"/>
				<p>
以下では、<code>HasType&lt;Type = i32&gt;</code> と <code>HasType&lt;Type = i64&gt;</code> 区別されず衝突にいたる。
				</p>
<pre><code class="language-rust">
trait MyTrait {}
trait HasType { type Type; }

impl&lt;T: HasType&lt;Type = i32&gt;&gt; MyTrait for T {}
<mark class="error">impl&lt;T: HasType&lt;Type = i64&gt;&gt; MyTrait for T</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:5:1
<mark class="info">  |</mark>
<mark class="info">4 |</mark> impl&lt;T: HasType&lt;Type = i32&gt;&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="info">------------------------------------------ first implementation here</mark>
<mark class="info">5 |</mark> impl&lt;T: HasType&lt;Type = i64&gt;&gt; MyTrait for T {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン D1</h1>
					<div class="subTitle">
外部クレート <span class="nw">(上流クレートとの衝突)</span>
					</div>
				</hgroup>
				<p>
作成中のクレートと上流クレートのトレイト実装が衝突するパターン。
				</p> <p>
これは身に覚えがないぶん、いざ発生すると混乱しやすい。
				</p>
				<hr class="split"/>
				<p>
以下では、<a href="https://doc.rust-lang.org/core/index.html"><code>core</code></a> にある <a href="https://doc.rust-lang.org/core/convert/trait.From.html"><code>From</code></a> の<a href="https://doc.rust-lang.org/core/convert/trait.From.html#impl-From%3CT%3E-for-T">ブランケット実装</a> (自身への恒等変換) と重複がおきる。
				</p>
<pre><code class="language-rust">
struct MyType {}

<mark class="error">impl From&lt;MyType&gt; for MyType</mark> {
    fn from(value: MyType) -&gt; Self {
        value
    }
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `From&lt;MyType&gt;` for type `MyType`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:3:1
<mark class="info">  |</mark>
<mark class="info">3 |</mark> impl From&lt;MyType&gt; for MyType {
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: conflicting implementation in crate `core`:
<mark class="info"></mark>          - impl&lt;T&gt; From&lt;T&gt; for T;
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>パターン D2</h1>
					<div class="subTitle">
外部クレート <span class="nw">(下流クレートとの衝突予防)</span>
					</div>
				</hgroup>
				<p>
作成中のクレートと下流クレートのトレイト実装の衝突予防のためのパターン。
				</p> <p>
型とトレイトの両方が作成中のクレート由来の場合、かつそれらが『<a href="orphan_rule.xhtml">孤児ルール</a>』の抜け道となる『<a href="orphan_rule.xhtml#specialRule">特別ルール</a>』の適用パターンの場合に発生する。なお、殆どの衝突予防は孤児ルールの『<a href="orphan_rule.xhtml#basicRule">基本ルール</a>』の守備範囲のため、そちらで対策されている。
				</p>
				<hr class="split"/>
				<p>
以下では、下流クレートが <code>OurTrait</code> を <code>OurType</code> に実装するかもしれない。
				</p>
<pre><code class="language-rust">
trait MyTrait&lt;T&gt; {}
trait OurTrait&lt;T&gt; {}
struct OurType {}

impl&lt;P&gt; MyTrait&lt;P&gt; for OurType {}
<mark class="error">impl&lt;P, T&gt; MyTrait&lt;P&gt; for T where T: OurTrait&lt;P&gt;</mark> {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0119]</mark><mark class="title">: conflicting implementations of trait `MyTrait&lt;_&gt;` for type `OurType`</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:6:1
<mark class="info">  |</mark>
<mark class="info">5 |</mark> impl&lt;P&gt; MyTrait&lt;P&gt; for OurType {}
<mark class="info">  |</mark> <mark class="info">------------------------------ first implementation here</mark>
<mark class="info">6 |</mark> impl&lt;P, T&gt; MyTrait&lt;P&gt; for T where T: OurTrait&lt;P&gt; {}
<mark class="info">  |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `OurType`</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: downstream crates may implement trait `OurTrait&lt;_&gt;` for type `OurType`
</samp></pre>
			</section>
		</section>
	</body>
</html>
