<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: [dead_code] 未使用のアイテム</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: function `xxx` is never used</mark>
</samp></pre>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: struct `Xxx` is never used</mark>
</samp></pre>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: enum `Xxx` is never used</mark>
</samp></pre>
		<p>
未使用のアイテムがあると警告が出る。
		</p> <p>
当然の機能なのだが、Rust 特有の落し穴がいくつかある。
		</p>
		<section>
			<h1>パターン</h1>
			<nav class="sub"/>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">基本形</div>
				</hgroup>
				<p>
そのアイテムが実際にどこからも使われていないパターン。
				</p>
				<section>
					<h2>サンプル</h2>
<pre><code class="language-rust">
pub fn main() {
	// nop.
}

fn <mark class="warn">unused</mark>() {
	// nop.
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: function `unused` is never used</mark>
<mark class="info"> --&gt;</mark> src\main.rs:4:4
<mark class="info">  |</mark>
<mark class="info">4 |</mark> fn unused() {
<mark class="info">  |</mark>    <mark class="warn">^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: `#[warn(dead_code)]` on by default
</samp></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1>パターン B</h1>
					<div class="subTitle">使用元が未使用</div>
				</hgroup>
				<p>
そのアイテムを使っているアイテムがどこからも使われていないパターン。
				</p>
				<aside class="normal">
					<p>
Rust の独特な仕様。
					</p>
					<p>
Rust 以外の多くの言語では、こうした巻き添えのような警告はでない。Rust の方法は網羅的だが、本質的な警告が数に埋もれるため、筆者個人としては微妙な所である。
					</p>
				</aside>
				<section>
					<h2>サンプル</h2>
<pre><code class="language-rust">
pub fn main() {
    // nop.
}

fn <mark class="warn">unused</mark>() {
    unused_sub();
}

fn <mark class="warn">unused_sub</mark>() {
    // nop.
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: function `unused` is never used</mark>
<mark class="info"> --&gt;</mark> src\main.rs:5:4
<mark class="info">  |</mark>
<mark class="info">5 |</mark> fn unused() {
<mark class="info">  |</mark>    <mark class="warn">^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: `#[warn(dead_code)]` on by default

<mark class="title"><mark class="warn">warning</mark>: function `unused_sub` is never used</mark>
<mark class="info"> --&gt;</mark> src\main.rs:9:4
<mark class="info">  |</mark>
<mark class="info">9 |</mark> fn unused_sub() {
<mark class="info">  |</mark>    <mark class="warn">^^^^^^^^^^</mark>
</samp></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1>パターン C</h1>
					<div class="subTitle">単体テストが関係</div>
				</hgroup>
				<p>
そのアイテムが単体テスト以外から使われていないと発生する。
				</p>
				<section>
					<h2>サンプル</h2>
<pre><code class="language-rust">
#[test]
fn test() {
    test_helper();
}

fn <mark class="warn">test_helper</mark>() {
    // nop.
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: function `test_helper` is never used</mark>
<mark class="info"> --&gt;</mark> src\lib.rs:6:4
<mark class="info">  |</mark>
<mark class="info">6 |</mark> fn test_helper() {
<mark class="info">  |</mark>    <mark class="warn">^^^^^^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: `#[warn(dead_code)]` on by default
</samp></pre>
				</section> <section>
					<h2>解決策</h2>
					<p>
対象のアイテムに <code>#[cfg(test)]</code> 属性を付加すれば良い。
					</p>
<pre><code class="language-rust">
#[test]
fn test() {
    test_helper();
}

#[cfg(test)]
fn test_helper() {
    // nop.
}
</code></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1>パターン D</h1>
					<div class="subTitle">統合テストが関係</div>
				</hgroup>
				<p>
Rust の統合テストでは、<code>tests</code> ディレクトリ直下のファイルがそれぞれ独立したクレートとして認識される。そのため、テストヘルパ系のアイテムについては、<code>tests</code> ディレクトリ直下の全てのファイルから使われていないと、クレート内に使われていないアイテムがあると認識されてしまう。
				</p>
				<aside class="normal">
					<p>
Rust の独特な仕様。
					</p> <p>
Rust 以外の多くの言語では、こうしたファイルの認識のされ方はしない。後述の解決策さえ知っていれば何という事はないのだが、Github の<a href="https://github.com/rust-lang/rust/issues/46379">課題</a>を見ていると、筆者と同様、これを初見殺しだと感じる人は多いようだ。
					</p>
				</aside>
				<section>
					<h2>サンプル</h2>
					<figure class="file">
						<figcaption>my_lib/tests/common.rs</figcaption>
<pre><code class="language-rust">
pub fn test_helper1() {}
pub fn <mark class="warn">test_helper2</mark>() {}
</code></pre>
					</figure>
					<figure class="file">
						<figcaption>my_lib/tests/a.rs</figcaption>
<pre><code class="language-rust">
mod common;
use common::*;

#[test]
fn test() {
    test_helper1();
}
</code></pre>
					</figure>
					<figure class="file">
						<figcaption>my_lib/tests/b.rs</figcaption>
<pre><code class="language-rust">
mod common;
use common::*;

#[test]
fn test() {
    test_helper1();
    test_helper2();
}
</code></pre>
					</figure>
<pre><samp class="console-rustc">
<mark class="title"><mark class="warn">warning</mark>: function `test_helper2` is never used</mark>
<mark class="info"> --&gt;</mark> tests\common.rs:2:8
<mark class="info">  |</mark>
<mark class="info">2 |</mark> pub fn test_helper2() {}
<mark class="info">  |</mark>        <mark class="warn">^^^^^^^^^^^^</mark>
<mark class="info">  |</mark>
<mark class="info">  =</mark> <mark class="title">note</mark>: `#[warn(dead_code)]` on by default
</samp></pre>
				</section> <section>
					<h2>解決策</h2>
					<p>
お勧めは解決策 3 の方法。
					</p>
					<dl class="normal lowProfile">
						<dt><a href="#sol1">解決策 1</a></dt> <dd>テストヘルパのクレート化</dd>
						<dt><a href="#sol2">解決策 2</a></dt> <dd>テストヘルパのダミー公開</dd>
						<dt><a href="#sol3">解決策 3</a></dt> <dd>ディレクトリ構成の変更</dd>
					</dl>
					<section>
						<h3 id="sol1">テストヘルパのクレート化</h3>
						<p>
テストヘルパを全て独立したクレートに移動する。
						</p> <p>
この方法は大げさでやや手間がかかるのが問題点。
						</p>
					</section> <section>
						<h3 id="sol2">テストヘルパのダミー公開</h3>
						<p>
使用していないテストヘルパを <code>pub use</code> で公開する。
						</p> <p>
テストコードは外部から使えないため、この公開は問題にならない。
						</p> <p>
この方法はその場しのぎだが手間はかからない。
						</p>
					</section> <section>
						<h3 id="sol3">ディレクトリ構成の変更</h3>
						<p>
ディレクトリ構成を変更してテストを一つのクレートにまとめる。
						</p> <p>
これには <code>tests</code> の中で <code>main.rs</code> を使えばよい (参考: パッケージ構成の<a href="https://doc.rust-lang.org/cargo/guide/project-layout.html">公式資料</a>)。
						</p> <p>
例えば、前述の例の場合、以下のようなディレクトリ構成にすればよい。
						</p>
<pre class="directory">my_lib
├─ src
│  └─ ...
└─ tests
   └─ it
      ├─ main.rs
      ├─ a.rs
      ├─ b.rs
      └─ common.rs</pre>
					</section>
				</section>
			</section>
		</section> <section>
			<h1>警告の抑制</h1>
			<p>
本質的な方法ではないが、強制的に警告を抑制する方法がいくつかある。
			</p>
			<section>
				<h1>アンダースコアの使用</h1>
				<p>
アイテム名をアンダースコア '<code>_</code>' で始めると警告がでなくなる。
				</p>
<pre><code class="language-rust">
pub fn main() {
    // nop.
}

fn _unused() {
    // nop.
}
</code></pre>
			</section> <section>
				<h1><code>#[allow(dead_code)]</code></h1>
				<p>
警告を抑制したい箇所に <code>#[allow(dead_code)]</code> を付加する。
				</p>
				<section>
					<h2>個別指定</h2>
					<p>
アイテムごとに個別指定する方法。
					</p>
<pre><code class="language-rust">
pub fn main() {
    // nop.
}

#[allow(dead_code)]
fn unused() {
    // nop.
}
</code></pre>
				</section> <section>
					<h2>一括指定</h2>
					<p>
ファイルやモジュールに所属するアイテムを一括指定する方法。
					</p>
<pre><code class="language-rust">
fn main() {}

#[allow(dead_code)]
mod my_mod {
    fn unused1() {}
    fn unused2() {}
}
</code></pre>
				</section>
			</section>
		</section>
	</body>
</html>
