<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: ZST (Zero Sized Type)</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
サイズがゼロの型は ZST (Zero Sized Types) と呼ばれる。
		</p>
		<section>
			<h1>対象の型</h1>
			<p>
以下の型は ZST として扱われる。
			</p>
			<ul>
				<li>
空のタプル
				</li> <li>
フィールドのない構造体
				</li> <li>
長さ 0 の配列
				</li> <li>
その他: フィールド全てが ZST の構造体など
				</li>
			</ul>
		</section> <section>
			<h1>利用方法</h1>
			<p>
とりあえず ZST を利用したい場合、空のタプル <code>()</code> が使われる事が多い。
			</p> <p>
より具体的な方法については『<a href="unit.xhtml">空のタプル (ユニット)</a>』を参照。
			</p>
		</section> <section>
			<h1>補足: アドレスの確保</h1>
			<p>
おそらく滅多に使われない機能だと思われるが、気付いたので一応メモしておく。
			</p> <p>
ZST の読書時のサイズはゼロだが、アドレスは用意される場合がある。
			</p>
			<section>
				<h1>変数の場合</h1>
				<p>
				</p> <p>
ZST を通常の変数として用意した場合、アドレスを識別するための最低限度のメモリ領域が確保される。
				</p>
<pre><code class="language-rust">
fn main() {
    let zst1 = Zst;
    let zst2 = Zst;
    dbg!(&amp;zst1 as *const _);
    dbg!(&amp;zst2 as *const _);
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:4] &amp;zst1 as *const _ = 0x000000c08ecfeb70
[src\main.rs:5] &amp;zst2 as *const _ = 0x000000c08ecfeb78
</samp></pre>
				<p>
なお、配列では要素ごとのアドレスが重複する。
				</p>
<pre><code class="language-rust">
fn main() {
    let arr = [Zst, Zst];
    dbg!(&amp;arr[0] as *const _);
    dbg!(&amp;arr[1] as *const _);
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:3] &amp;arr[0] as *const _ = 0x00000089702fec08
[src\main.rs:4] &amp;arr[1] as *const _ = 0x00000089702fec08
</samp></pre>
			</section> <section>
				<h1>
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box</code></a> の場合
				</h1>
				<p>
<a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box</code></a> と ZST の組合せは何の役にも立たない。
				</p> <p>
アドレスを識別するためのメモリすら用意されない。
				</p>
<pre><code class="language-rust">
fn main() {
    let zst1 = Box::new(Zst);
    let zst2 = Box::new(Zst);
    dbg!(Box::into_raw(zst1));
    dbg!(Box::into_raw(zst2));
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:4] Box::into_raw(zst1) = 0x0000000000000001
[src\main.rs:5] Box::into_raw(zst2) = 0x0000000000000001
</samp></pre>
			</section> <section>
				<h1>
<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec</code></a> の場合
				</h1>
				<p>
<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec</code></a> と ZST の組合せも何の役にも立たない。
				</p> <p>
各要素ごとにも全体でもメモリは用意されない。
				</p>
<pre><code class="language-rust">
fn main() {
    let vec1 = vec![Zst];
    let vec2 = vec![Zst];
    dbg!(&amp;vec1.as_slice()[0] as *const _);
    dbg!(&amp;vec2.as_slice()[0] as *const _);
}

pub struct Zst;
</code></pre>
<pre><samp>
[src\main.rs:4] &amp;vec1.as_slice()[0] as *const _ = 0x0000000000000001
[src\main.rs:5] &amp;vec2.as_slice()[0] as *const _ = 0x0000000000000001
</samp></pre>
			</section>
		</section>
	</body>
</html>
