<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: dyn 型の実装</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
<code>dyn</code> 型 (トレイトオブジェクト) はそれ自体に実装を付加できる。
		</p> <p>
代表例は、<code>impl dyn <var>MyTrait</var> { ... }</code> のような固有機能の実装パターン。
		</p> <p>
または、<code>impl <var>SomeTrait</var> for dyn <var>MyTrait</var> { ... }</code> のようなトレイトの実装パターン。
		</p>
		<section>
			<h1>固有機能の実装</h1>
			<section>
				<h2>主な用途</h2>
				<p>
ダウンキャスト系のメソッドを実装する場合が多い。
				</p>
			</section> <section>
				<h2>サンプル</h2>
				<p>
以下では、<code>dyn Animal</code> を <code>Dog</code> にダウンキャストしている。なお、ダウンキャスト用のメソッドは <code>dyn Any</code> にあるため、いったん <code>dyn Animal</code> から <code>dyn Any</code> へアップキャストしている (参考:『<a href="dyn_upcast.xhtml"><code>dyn</code> 型のアップキャスト</a>』)。
				</p>
<pre><code class="language-rust">
use std::any::Any;

fn main() {
    let animal = &amp;(Dog {}) as &amp;dyn Animal;
    let dog = animal.downcast::&lt;Dog&gt;();
    dog.trick();
}

// -- Animal -- //

trait Animal: Any {
    fn upcast(&amp;self) -&gt; &amp;dyn Any;
}

impl dyn Animal {
    fn downcast&lt;T: Animal&gt;(&amp;self) -&gt; &amp;T {
        self.upcast().downcast_ref().unwrap()
    }
}

// -- Dog -- //

struct Dog {}

impl Dog {
    fn trick(&amp;self) {
        println!("Bow!");
    }
}

impl Animal for Dog {
    fn upcast(&amp;self) -&gt; &amp;dyn Any {
        self
    }
}
</code></pre>
			</section>
		</section> <section>
			<h1>トレイトの実装</h1>
			<section>
				<h2>主な用途</h2>
				<p>
オブジェクトセーフでないトレイトを動的に活用できるようにする。
				</p>
			</section> <section>
				<h2>サンプル</h2>
				<p>
以下では、<a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html"><code>PartialEq</code></a> トレイトの <a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq"><code>eq</code></a> メソッドにより、数値型または文字列型をとる <code>dyn Id</code> どうしを比較している。なお、<a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq"><code>eq</code></a> は比較先に <code>Self</code> を用いる。そのため、<a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html"><code>PartialEq</code></a> はこの手法なしでは、異なる型どうしの比較も、動的型の処理もできない (オブジェクトセーフの条件を満たせないため)。
				</p>
<pre><code class="language-rust">
fn main() {
    let x = &amp;1 as &amp;dyn Id;
    let y = &amp;"1".to_string() as &amp;dyn Id;
    assert!(!x.eq(y));
}

trait Id {
    fn key(&amp;self) -&gt; String;
    fn is(&amp;self, other: &amp;dyn Id) -&gt; bool {
        self.key() == other.key()
    }
}

impl PartialEq for dyn Id {
    fn eq(&amp;self, other: &amp;Self) -&gt; bool {
        self.is(other)
    }
}

impl Id for i32 {
    fn key(&amp;self) -&gt; String { format!("i32: {self}") }
}

impl Id for String {
    fn key(&amp;self) -&gt; String { format!("str: {self}") }
}
</code></pre>
			</section>
		</section> <section>
			<h1>備考</h1>
			<p>
上記を応用する上で、つい忘れがちな点について。
			</p> <p>
<code>dyn <var>TraitName</var></code> は糖衣構文であり、<code>dyn <var>TraitName</var> + 'static</code> と等価である。
			</p> <p>
<code>dyn <var>TraitName</var> + '_</code> のように匿名ライフタイムを使えば、<code>'static</code> 境界が解除される。
			</p>
		</section>
	</body>
</html>
