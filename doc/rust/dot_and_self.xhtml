<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: メソッド呼出と型変換</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
メソッド呼出では、ドット演算子の左辺が <code>self</code> に適合するよう型変換される。
		</p>
		<aside class="normal">
		<p>
この機能は便利だが、初心者殺しな挙動につながる場合がある。
		</p>
		</aside>
		<section>
			<h1>仕様</h1>
			<p>
左辺が <code>self</code> の型に適合するまで、以下の型変換ルールを再帰的に適用する。
			</p>
			<ol>
				<li>
					<p>
元の型をそのまま試す。
					</p>
				</li> <li>
					<p>
元の型を不変参照した型を試す (自動参照)。
					</p>
				</li> <li>
					<p>
元の型を可変参照した型を試す (自動参照)。
					</p>
				</li> <li>
					<p>
元の型が <code>Deref</code> を実装するなら、参照を外した型を試す (自動逆参照)。
					</p>
				</li> <li>
					<p>
元の型が固定長配列なら、その全体のスライス型を試す。
					</p>
				</li>
			</ol>
		</section> <section>
			<h1>注意点</h1>
			<p>
仕様を知らないと、予想外の型で処理が進んでしまう。これにより、コンパイルエラーのメッセージが意味不明に思えたり、より悪くコンパイルエラーにならない場合だと、意図したのと別の型で処理が実行される、等の事態が起きてしまう。
			</p>
			<section>
				<h1>対策</h1>
				<p>
関数呼出の記法は、ドット演算子の記法より型変換が弱い。そのため、上記の仕様が関係していると疑われる場合、記法を変えると問題の理解に役立つ可能性がある。
				</p> <p>
例えば、<code>x.method()</code> の場合、<code>&lt;SomeStruct&gt;::<wbr/>method(x)</code> や <code>&lt;SomeStruct&gt;::<wbr/>method(&amp;x)</code> 等を試すとよい (参考: トレイトが絡む場合は <code>&lt;&amp;SomeStruct as SomeTrait&gt;::<wbr/>method(&amp;x)</code> のような記法も使える)。
				</p>
			</section> <section>
				<hgroup>
					<h1>事例 1.</h1>
					<div class="subTitle">
						コンパイルエラーが意味不明
					</div>
				</hgroup>
				<p>
以下のコードでは、前述のどのルールでもエラーになるが、エラーメッセージについては二つ目のルールを基準に出力されている。そのため、他のルールを想定して読んでいると、エラーメッセージの意味が通らなくなる。
				</p>
				<ol>
					<li>
						<p>
一つ目のルールの適用は失敗する。
						</p>
						<ul>
							<li>
								<p>
<code>&lt;[i32] as SomeTrait&gt;::method(arr)</code> が試される。
								</p>
							</li> <li>
								<p>
つまり、<code>T</code> は <code>[i32]</code> になる。
								</p>
							</li> <li>
								<p>
しかし、<code>T</code> は <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> に違反する。
								</p>
							</li>
						</ul>
						<p>
※ 型パラメタは暗黙で <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> 境界を持つ。
						</p>
					</li> <li>
						<p>
二つ目のルールの適用も失敗する。
						</p>
						<ul>
							<li>
								<p>
<code>&lt;&amp;[i32] as SomeTrait&gt;::method(&amp;arr)</code> が試される。
								</p>
							</li> <li>
								<p>
つまり、<code>T</code> は <code>&amp;[i32]</code> になる。
								</p>
							</li> <li>
								<p>
ここで、<code>T</code> は <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> に適合する。
								</p>
							</li> <li>
								<p>
しかし、<code>T</code> は <code>'static</code> に違反する。
								</p>
							</li>
						</ul>
						<p>
※ <code>Any</code> は <code>'static</code> ライフタイム境界を持つ。
						</p>
					</li>
				</ol>
<pre><code class="language-rust">
use std::any::Any;

fn main() {
    test(&amp;[1, 2, 3]);
}

fn test(arr: &amp;[i32]) {
    <mark class="error">arr.method()</mark>;
}

trait SomeTrait {
    fn method(&amp;self) {}
}

impl&lt;T: Any&gt; SomeTrait for T {
    // NOP.
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0521]</mark><mark class="title">: borrowed data escapes outside of function</mark>
<mark class="info"> --&gt;</mark> src\main.rs:8:5
<mark class="info">  |</mark>
<mark class="info">7 |</mark> fn test(arr: &amp;[i32]) {
<mark class="info">  |</mark>         <mark class="info">---  - let's call the lifetime of this reference `'1`</mark>
<mark class="info">  |</mark>         <mark class="info">|</mark>
<mark class="info">  |</mark>         <mark class="info">`arr` is a reference that is only valid in the function body</mark>
<mark class="info">8 |</mark>     arr.method();
<mark class="info">  |</mark>     <mark class="error">^^^^^^^^^^^^</mark>
<mark class="info">  |</mark>     <mark class="error">|</mark>
<mark class="info">  |</mark>     <mark class="error">`arr` escapes the function body here</mark>
<mark class="info">  |</mark>     <mark class="error">argument requires that `'1` must outlive `'static`</mark>
</samp></pre>
			</section> <section>
				<hgroup>
					<h1>事例 2.</h1>
					<div class="subTitle">
						意図しない型での処理の実行
					</div>
				</hgroup>
				<p>
以下のコードでは、いくつかの値と型をペアで出力しているが、文字列スライス型でのみ失敗している。これは筆者が誤って文字列スライスを <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> として処理、コンパイラがその不備を修正するため、型変換でスライス型をスライスの参照型にした結果である。
				</p>
				<ol>
					<li>
						<p>
一つ目のルールの適用は失敗する。
						</p>
						<ul>
							<li>
								<p>
<code>&lt;str as Report&gt;::report("text")</code> が試される。
								</p>
							</li> <li>
								<p>
つまり、<code>T</code> は <code>str</code> になる。
								</p>
							</li> <li>
								<p>
しかし、<code>T</code> は <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> に違反する。
								</p>
							</li>
						</ul>
						<p>
※ 型パラメタは暗黙で <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> 境界を持つ。
						</p>
					</li> <li>
						<p>
二つ目のルールの適用は成功する。
						</p>
						<ul>
							<li>
								<p>
<code>&lt;&amp;str as Report&gt;::report(&amp;"text")</code> が試される。
								</p>
							</li> <li>
								<p>
つまり、<code>T</code> は <code>&amp;str</code> になる。
								</p>
							</li> <li>
								<p>
ここで、<code>T</code> は <a href="https://doc.rust-lang.org/std/marker/trait.Sized.html"><code>Sized</code></a> に適合する。
								</p>
							</li>
						</ul>
					</li>
				</ol>
<pre><code class="language-rust">
use std::any::{Any, TypeId};
use std::collections::HashMap;
use std::fmt::Display;
use std::sync::OnceLock;

fn main() {
    (&amp;false as &amp;bool).report();
    (&amp;42 as &amp;i32).report();
    ("text" as &amp;str).report();
}

trait Report {
    fn report(&amp;self);
}

impl&lt;T: Any + Display&gt; Report for T {
    fn report(&amp;self) {
        let type_id = TypeId::of::&lt;T&gt;();
        let header = *header_map().get(&amp;type_id).unwrap_or(&amp;"?");
        println!("{}: {}", header, self);
    }
}

fn header_map() -&gt; &amp;'static HashMap&lt;TypeId, &amp;'static str&gt; {
    static MAP: OnceLock&lt;HashMap&lt;TypeId, &amp;'static str&gt;&gt; = OnceLock::new();
    MAP.get_or_init(|| {
        let mut result = HashMap::new();
        result.insert(TypeId::of::&lt;bool&gt;(), "b");
        result.insert(TypeId::of::&lt;i32&gt;(), "i");
        result.insert(TypeId::of::&lt;str&gt;(), "s");
        result
    })
}
</code></pre>
<pre><code>
b: false
i: 42  
?: text
</code></pre>
			</section>
		</section>
		<footer>
			<section>
				<h1>参考文献</h1>
				<ul>
					<li>
<a href="https://doc.rust-lang.org/nomicon/dot-operator.html">The Rustonomicon / The Dot Operator</a>
					</li>
				</ul>
			</section>
		</footer>
	</body>
</html>
