<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: E0277 - トレイト境界への不適合</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
<pre><samp class="console-rustc">
<mark class="error">error[E0277]</mark><mark class="title">: the trait bound `Type: Trait` is not satisfied</mark>
</samp></pre>
		<p>
期待されるトレイト境界に型が適合しなかった。
		</p>
		<section>
			<h1>パターン</h1>
			<doc-nav-sub/>
			<section>
				<hgroup>
					<h1>パターン A</h1>
					<div class="subTitle">基本形</div>
				</hgroup>
				<p>
単純にトレイト境界を満たさないパターン。
				</p>
				<section>
					<h2>サンプル</h2>
					<p>
以下では、関数 <code>func</code> の引数 <code>arg</code> は <code>MyTrait</code> 境界に適合しなければならない。<br/>
しかし、実引数として指定された値 <code>false</code> は <code>bool</code> 型でそれに適合していない。
					</p>
<pre><code class="language-rust">
fn main() {
    func(<mark class="error">false</mark>);
}

fn func&lt;T: MyTrait&gt;(arg: T) {
    println!("arg: {}", arg.text());
}

trait MyTrait {
    fn text(&amp;self) -&gt; &amp;str;
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0277]</mark><mark class="title">: the trait bound `bool: MyTrait` is not satisfied</mark>
<mark class="info"> --&gt;</mark> src\main.rs:2:10
<mark class="info">  |</mark>
<mark class="info">2 |</mark>     func(false);
<mark class="info">  |</mark>     <mark class="info">----</mark> <mark class="error">^^^^^ the trait `MyTrait` is not implemented for `bool`</mark>
<mark class="info">  |</mark>     <mark class="info">|</mark>
<mark class="info">  |</mark>     <mark class="info">required by a bound introduced by this call</mark>
<mark class="info">  |</mark>
<mark class="info">help</mark>: this trait has no implementations, consider adding one
<mark class="info"> --&gt;</mark> src\main.rs:9:1
<mark class="info">  |</mark>
<mark class="info">9 |</mark> trait MyTrait {
<mark class="info">  |</mark> <mark class="info">^^^^^^^^^^^^^</mark>
<mark class="edit">note</mark>: required by a bound in `func`
<mark class="info"> --&gt;</mark> src\main.rs:5:12
<mark class="info">  |</mark>
<mark class="info">5 |</mark> fn func&lt;T: MyTrait&gt;(arg: T) {
<mark class="info">  |</mark>            <mark class="edit">^^^^^^^ required by this bound in `func`</mark>
</samp></pre>
				</section> <section>
					<h2>解決策</h2>
					<p>
トレイト境界を満たすよう型にトレイト実装を追加する。
					</p>
<pre><code class="language-rust">
fn main() {
    func(false);
}

fn func&lt;T: MyTrait&gt;(arg: T) {
    println!("arg: {}", arg.text());
}

trait MyTrait {
    fn text(&amp;self) -&gt; &amp;str;
}

impl MyTrait for bool {
    fn text(&amp;self) -&gt; &amp;str {
        if *self { "T" } else { "F" }
    }
}
</code></pre>
				</section>
			</section> <section>
				<hgroup id="deriveAttribute">
					<h1>パターン B</h1>
					<div class="subTitle"><code>derive</code> 属性</div>
				</hgroup>
				<p>
問題のトレイト境界が <code>derive</code> 属性によるパターン。
				</p> <p>
『<a href="derive_attribute.xhtml">derive 属性</a> - <a href="derive_attribute.xhtml#typeParam">型パラメタの影響</a>』で紹介する通り、<code>derive</code> 属性は型パラメタについての境界を導入する場合が多い。この境界に違反するとエラーになる。なお、下記のサンプルではエラーメッセージがその境界 <code>T: Default</code> について指摘しているが、ソース中に該当箇所が存在しない。そのため、混乱しやすい。
				</p>
				<section>
					<h2>サンプル</h2>
					<p>
以下では、<code>MyVec&lt;T&gt;</code> の <code>Deault</code> の実装は <code>derive</code> 属性に由来するため、<code>T: Default</code> の境界を持つ。しかし、<code>MyVec::default()</code> の呼出箇所の <code>T</code> は <code>Clone</code> しか実装していない。
					</p>
<pre><code class="language-rust">
fn main() {
    let values = values(1, 3);
    assert_eq!(values.0, vec![1, 1, 1]);
}

fn values&lt;T: Clone&gt;(value: T, len: usize) -&gt; MyVec&lt;T&gt; {
    let mut ret = <mark class="error">MyVec</mark>::default();
    for _ in 0..len {
        ret.0.push(value.clone());
    }

    ret
}

#[derive(Default, Clone, PartialEq)]
struct MyVec&lt;T&gt;(Vec&lt;T&gt;);
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0277]</mark><mark class="title">: the trait bound `T: Default` is not satisfied</mark>
<mark class="info">  --&gt;</mark> src\main.rs:7:19
<mark class="info">   |</mark>
<mark class="info"> 7 |</mark>     let mut ret = MyVec::default();
<mark class="info">   |</mark>                   <mark class="error">^^^^^ the trait `Default` is not implemented for `T`</mark>
<mark class="info">   |</mark>
<mark class="edit">note</mark>: required for `MyVec&lt;T&gt;` to implement `Default`
<mark class="info">  --&gt;</mark> src\main.rs:15:10
<mark class="info">   |</mark>
<mark class="info">15 |</mark> #[derive(Default, Clone, PartialEq)]
<mark class="info">   |</mark>          <mark class="edit">^^^^^^^ unsatisfied trait bound introduced in this `derive` macro</mark>
<mark class="info">help</mark>: consider further restricting type parameter `T` with trait `Default`
<mark class="info">   |</mark>
<mark class="info"> 6 |</mark> fn values&lt;T: Clone <mark class="edit">+ std::default::Default</mark>&gt;(value: T, len: usize) -&gt; MyVec&lt;T&gt; {
<mark class="info">   |</mark>                    <mark class="edit">+++++++++++++++++++++++</mark>
</samp></pre>
				</section> <section>
					<h2>解決策</h2>
					<p>
<code>derive</code> 属性による境界が問題の場合、それを除去したコードを手動で記述する。
					</p>
<pre><code class="language-rust">
fn main() {
    let values = values(1, 3);
    assert_eq!(values.0, vec![1, 1, 1]);
}

fn values&lt;T: Clone&gt;(value: T, len: usize) -&gt; MyVec&lt;T&gt; {
    let mut ret = MyVec::default();
    for _ in 0..len {
        ret.0.push(value.clone());
    }

    ret
}

#[derive(Clone, PartialEq)]
struct MyVec&lt;T&gt;(Vec&lt;T&gt;);

impl&lt;T&gt; Default for MyVec&lt;T&gt; {
    fn default() -&gt; Self {
        Self(Default::default())
    }
}
</code></pre>
				</section>
			</section>
		</section>
	</body>
</html>
