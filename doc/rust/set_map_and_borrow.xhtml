<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: セットやマップからの検索と Borrow トレイト</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
<a href="https://doc.rust-lang.org/std/index.html"><code>std</code></a> クレートのセットやマップ (<a href="https://doc.rust-lang.org/std/collections/struct.BTreeSet.html"><code>BTreeSet</code></a>, <a href="https://doc.rust-lang.org/std/collections/struct.HashSet.html"><code>HashSet</code></a>, <a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html"><code>BTreeMap</code></a>, <a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html"><code>HashMap</code></a>) における検索系のメソッドについて。検索引数の型、検索対象の型、それから <a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"><code>Borrow</code></a> トレイト、それぞれの関係を紹介する。
		</p> 
		<section>
			<h1>基本と応用</h1>
			<p>
検索メソッドの用法には基本と応用がある。
			</p>
			<section>
				<h2>基本編</h2>
				<p>
検索引数として、検索対象への参照型を渡す。
				</p>
			</section> <section>
				<h2>応用編</h2>
				<p>
上記以外の検索引数も渡せるよう、検索メソッドの仕様はより汎用的になっている。具体的には、検索引数として渡せる型は、検索対象から借用でき、かつ検索対象と似た動作ができる型への参照型であればよい。
				</p>
			</section>
		</section> <section>
			<h1>具体例</h1>
			<p>
代表的なメソッドについて、いくつか見てみる。
			</p>
			<section>
				<h1>
<code><a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html"><code>BTreeMap</code></a>::<a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get">get</a></code>
				</h1>
				<p>
以下はメソッドの宣言部分。
				</p>
<pre><code class="language-rust">
impl&lt;K, V, A&gt; BTreeMap&lt;K, V, A&gt;
where
    A: Allocator + Clone,
{
	// ...

	pub fn get&lt;Q&gt;(&amp;self, key: &amp;Q) -&gt; Option&lt;&amp;V&gt;
	where
		K: Borrow&lt;Q&gt; + Ord,
		Q: Ord + ?Sized,
	{
		// ...
	}

	// ...
}
</code></pre>
				<p>
検索引数の型 <code>&amp;Q</code> と検索対象の型 <code>K</code> について。<code>Q</code> は <code>K</code> から <a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"><code>Borrow</code></a> を通して借用でき、かつ <code>K</code> と同じく <code>Ord</code> が必要。そして、<code>Q</code> を <code>K</code> から得る過程で、<code>Ord</code> による順序関係は変化してはならない (以下は rustdoc からの引用)。
				</p>
				<doc-quote>
					<blockquote data-time="2025-03-31" cite="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get" style="font-family: serif;">
						<hr class="omit"/>
						<p>
The key may be any borrowed form of the map’s key type, but the ordering on the borrowed form must match the ordering on the key type.
						</p>
						<hr class="omit"/>
					</blockquote>
				</doc-quote>
			</section> <section>
				<h1>
<code><a href="https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html">HashMap</a>::<a href="https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.get">get</a></code>
				</h1>
				<p>
以下はメソッドの宣言部分。
				</p>
<pre><code class="language-rust">
impl&lt;K, V, S&gt; HashMap&lt;K, V, S&gt;
where
    K: Eq + Hash,
    S: BuildHasher,
{
	// ...

	pub fn get&lt;Q&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt;
	where
		K: Borrow&lt;Q&gt;,
		Q: Hash + Eq + ?Sized,
	{
		// ...
	}

	// ...
}
</code></pre>
				<p>
検索引数の型 <code>&amp;Q</code> と検索対象の型 <code>K</code> について。<code>Q</code> は <code>K</code> から <a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"><code>Borrow</code></a> を通して借用でき、かつ <code>K</code> と同じく <code>Eq + Hash</code> が必要。そして、<code>Q</code> を <code>K</code> から得る過程で、<code>Eq</code> による同値関係と、<code>Hash</code> が生成する値は変化してはならない (以下は rustdoc からの引用)。
				</p>
				<doc-quote>
					<blockquote data-time="2025-03-31" cite="https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get" style="font-family: serif;">
						<hr class="omit"/>
						<p>
The key may be any borrowed form of the map’s key type, but <a href="../hash/trait.Hash.html" title="trait std::hash::Hash"><code>Hash</code></a> and <a href="../cmp/trait.Eq.html" title="trait std::cmp::Eq"><code>Eq</code></a> on the borrowed form <em>must</em> match those for the key type.
						</p>
						<hr class="omit"/>
					</blockquote>
				</doc-quote>
			</section>
		</section> <section>
			<h1>サンプル</h1>
			<section>
				<h1>基本編</h1>
				<p>
検索対象は <code>i32</code>、検索引数はその参照型の <code>&amp;i32</code> を利用。
				</p>
<pre><code class="language-rust">
use std::collections::HashMap;

fn main() {
    let mut dict = HashMap::&lt;i32, String&gt;::new();
    dict.insert(0, "foo".to_string());
    dict.insert(1, "bar".to_string());
    dict.insert(2, "baz".to_string());

	let result = dict.get(&amp;1);

    assert_eq!(result , Some(&amp;"bar".to_string()));
}
</code></pre>
			</section> <section>
				<hgroup>
					<h1>応用編 1</h1>
					<div class="subTitle">
						キー型が <code>String</code>
					</div>
				</hgroup>
				<p>
検索対象は <a href="https://doc.rust-lang.org/std/string/struct.String.html"><code>String</code></a>、検索引数はそこから <a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"><code>Borrow</code></a> で得られる <code>&amp;str</code> を利用。
				</p>
<pre><code class="language-rust">
use std::collections::HashMap;

fn main() {
    let mut dict = HashMap::&lt;String, String&gt;::new();
    dict.insert("Foo".to_string(), "foo".to_string());
    dict.insert("Bar".to_string(), "bar".to_string());
    dict.insert("Baz".to_string(), "baz".to_string());

    let result = dict.get("Bar");

    assert_eq!(result, Some(&amp;"bar".to_string()));
}
</code></pre>
			</section> <section>
				<hgroup>
					<h1>応用編 2</h1>
					<div class="subTitle">
						キー型が <code>Box</code>
					</div>
				</hgroup>
				<p>
検索対象は <code><a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Box</a>&lt;i32&gt;</code>、検索引数はそこから <a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"><code>Borrow</code></a> で得られる <code>&amp;i32</code> を利用。
				</p>
<pre><code class="language-rust">
use std::collections::HashMap;

fn main() {
    let mut dict = HashMap::&lt;Box&lt;i32&gt;, String&gt;::new();
    dict.insert(Box::new(0), "foo".to_string());
    dict.insert(Box::new(1), "bar".to_string());
    dict.insert(Box::new(2), "baz".to_string());

    let result = dict.get(&amp;1);

    assert_eq!(result, Some(&amp;"bar".to_string()));
}
</code></pre>
			</section> <section>
				<hgroup>
					<h1>応用編 3</h1>
					<div class="subTitle">
						キー型が独自型
					</div>
				</hgroup>
				<p>
検索対象は独自型 <code>Key</code>、検索引数はそこから <a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"><code>Borrow</code></a> で得られる <code>&amp;u32</code> を利用。
				</p>
<pre><code class="language-rust">
use std::{borrow::Borrow, collections::HashMap, hash::Hash};

fn main() {
    let mut dict = HashMap::&lt;Key, String&gt;::new();
    dict.insert(Key { id: 0 }, "foo".to_string());
    dict.insert(Key { id: 1 }, "bar".to_string());
    dict.insert(Key { id: 2 }, "baz".to_string());

	let result = dict.get(&amp;1);

    assert_eq!(result, Some(&amp;"bar".to_string()));
}

#[derive(PartialEq, Eq, Hash)]
struct Key {
    id: u32,
}

impl Borrow&lt;u32&gt; for Key {
    fn borrow(&amp;self) -&gt; &amp;u32 {
        &amp;self.id
    }
}
</code></pre>
				<p>
この検索が成立するのは、<code>derive</code> で自動実装される <a href="https://doc.rust-lang.org/std/hash/trait.Hash.html"><code>Hash</code></a>、そして <code>Key</code> の <code><a href="https://doc.rust-lang.org/std/boxed/struct.Box.html">Borrow</a>&lt;u32&gt;</code> から借用される <code>&amp;u32</code> の <a href="https://doc.rust-lang.org/std/hash/trait.Hash.html"><code>Hash</code></a>、両者の生成するハッシュ値が同じため。
				</p>
			</section>
		</section>
	</body>
</html>
