<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: ? 演算子の使いどころ</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
		<p>
エラー伝搬演算子 (<code>?</code> 演算子) は戻り値の型が <a href="https://doc.rust-lang.org/std/option/enum.Option.html"><code>Option</code></a> や <a href="https://doc.rust-lang.org/std/result/enum.Result.html"><code>Result</code></a> の関数内で使える。
		</p> 
		<aside class="normal">
			<p>
メモした理由。
			</p> <p>
<a href="https://doc.rust-lang.org/std/option/enum.Option.html"><code>Option</code></a> でも使えるようになったのは、Rust のバージョン 1.22.0 (2017/11/22 リリース) 以降。その名残りか <time>2023 年現在</time>でも <a href="https://doc.rust-lang.org/std/result/enum.Result.html"><code>Result</code></a> でのみ使えるとしている記事がある。筆者も勘違いしていたのでメモを残す。
			</p> <p>
より厳密には、<a href="https://doc.rust-lang.org/std/option/enum.Option.html"><code>Option</code></a> や <a href="https://doc.rust-lang.org/std/result/enum.Result.html"><code>Result</code></a> の背後にいる <a href="https://doc.rust-lang.org/std/ops/trait.Try.html"><code>Try</code></a> トレイトが関係しているようだが、こちらはまだナイトリー版限定の機能である。
			</p>
		</aside>
		<section>
			<h1><code>Option</code> による例</h1>
			<p>
<a href="https://doc.rust-lang.org/std/option/enum.Option.html"><code>Option</code></a> では <a href="https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some"><code>Some</code></a> か <a href="https://doc.rust-lang.org/std/option/enum.Option.html#variant.None"><code>None</code></a> かで動作が分岐する。
			</p>
<pre><code class="language-rust">
fn main() {
    let a1 = calc(40, 2);
    let a2 = calc(40, -2);
    assert_eq!(a1, Some(42));
    assert_eq!(a2, None);
}

fn calc(x: i32, y: i32) -&gt; Option&lt;i32&gt; {
    Some(get_src(x)? + get_src(y)?)
}

fn get_src(x: i32) -&gt; Option&lt;i32&gt; {
    if x &gt; 0 { Some(x) } else { None }
}
</code></pre>
		</section> <section>
			<h1><code>Result</code> による例</h1>
			<p>
<a href="https://doc.rust-lang.org/std/result/enum.Result.html"><code>Result</code></a> では <a href="https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok"><code>Ok</code></a> か <a href="https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err"><code>Err</code></a> かで動作が分岐する。
			</p>
<pre><code class="language-rust">
fn main() {
    let a1 = calc(40, 2);
    let a2 = calc(40, -2);
    assert_eq!(a1, Ok(42));
    assert_eq!(a2, Err(()));
}

fn calc(x: i32, y: i32) -&gt; Result&lt;i32, ()&gt; {
    Ok(get_src(x)? + get_src(y)?)
}

fn get_src(x: i32) -&gt; Result&lt;i32, ()&gt; {
    if x &gt; 0 { Ok(x) } else { Err(()) }
}
</code></pre>
		</section>
	</body>
</html>
