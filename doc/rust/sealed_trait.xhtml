<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: Sealed Trait パターン</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Doc.insertTitle();</script></h1>
		</header>
		<p>
Sealed Trait パターンは Rust でたまに使われるデザインパターンである。
		</p> <p>
トレイトの基底を『<a href="voldemort.xhtml">Voldemort パターン</a>』で作成したトレイトにする事で、他クレートから使用はできるが、実装や派生はできないトレイトを作成する。
		</p> 
		<section>
			<h1>使用例</h1>
			<p>
以下では、<code>SomeTrait</code> の実装は <code>f32</code> と <code>f64</code> のみとなり、他クレートからの追加はできない。なぜなら、<code>SomeTrait</code> の実装には、<code>private::<wbr/>Sealed</code> の実装が前提になるが、クレート外ではその名前は使用できない。
			</p>
<pre><code class="language-rust">
pub(crate) mod private {
    pub trait Sealed {}
}

pub trait SomeTrait: private::Sealed {
    fn test(&amp;self) {
        // ...
    }
}

impl private::Sealed for f32 {}
impl private::Sealed for f64 {}
impl SomeTrait for f32 {}
impl SomeTrait for f64 {}
</code></pre>
		</section> <section>
			<h1>利点</h1>
			<section>
				<h1>考察対象の限定</h1>
				<section>
					<h2>従来手法の欠点</h2>
					<p>
トレイトの実装は後から増やせる。そのため、トレイトを扱う場合、それらに共通した一般的な動作について考えなければならない。
					</p>
				</section> <section>
					<h2>パターンの利点</h2>
					<p>
Sealed Trait パターンを使うと、トレイトを実装する型をクレート内で定義された型のみに限定できる。これにより、考察対象を減らす事ができる。
					</p>
				</section>
			</section> <section>
				<h1>互換性の維持</h1>
				<section>
					<h2>従来手法の欠点</h2>
					<p>
トレイトにデフォルト実装のないメソッドを追加すると、そのトレイトの実装箇所の全てで、そのメソッドの実装が必要になる。当然、外部クレートでの実装箇所についても作業が必要となるため、これはバージョン間の互換性に問題を生じさせる。
					</p>
				</section> <section>
					<h2>パターンの利点</h2>
					<p>
Sealed Trait パターンを使うと、トレイトの実装が外部クレートには存在しない事が保証される。そのため、気軽にメソッドを追加できる (追加以外、変更や削除では使用箇所への影響があるため、この限りでない)。
					</p>
				</section>
			</section>
		</section>
	</body>
</html>
