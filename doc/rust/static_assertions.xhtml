<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: クレート紹介 / static-assertions </title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
		<p>
<a href="https://crates.io/crates/static_assertions/1.1.0"><code>static-assertions</code></a> (v1.1.0) について。
		</p> <p>
このクレートはコンパイル時点での各種の確認をサポートする。
		</p> 
		<section>
			<h1>機能</h1>
			<doc-nav-sub/>
			<p>
※ 他にも多くの機能がある。詳細は公式の <a href="https://docs.rs/static_assertions/1.1.0/static_assertions/index.html">Rustdoc</a> を参照。
			</p>
			<section>
				<hgroup>
					<h1>機能 1</h1>
					<div class="subTitle"> <code>dyn</code> 互換かの確認</div>
				</hgroup>
				<p>
以下はトレイトが <code>dyn</code> 互換かを確認できるマクロである。
				</p>
				<ul>
					<li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_obj_safe.html"><code>assert_obj_safe!</code></a>
					</li>
				</ul>
				<p>
これが嬉しいのは、Rust のトレイトの構文に原因がある。トレイトが <code>dyn</code> 互換かどうかは重要である。しかし、それはトレイトに専用のマークを設定するわけではなく、トレイト全体の内容から判断される。そのため、コードリーディング時に瞬間的に判別できない。また、トレイトへのメソッドの追加や削除でうっかり <code>dyn</code> 互換かどうかまでもを変更してしまうかもしれない。こうした心配事は明示的な確認があると不要になる。
				</p>
				<aside class="normal moan">
					<p>
Rust の不備？
					</p> <p>
筆者の知識不足かもしれないが、ここは Rust の良くない所のように思う。
					</p>
				</aside>
				<section>
					<h2>サンプル</h2>
<pre><code class="language-rust">
use static_assertions::assert_obj_safe;

assert_obj_safe!(MyDynTrait);
<mark class="error">assert_obj_safe!(MyStaticTrait)</mark>;

pub trait MyDynTrait {
    fn method(&amp;self);
}

pub trait MyStaticTrait {
    fn method&lt;T&gt;(&amp;self, arg: T);
}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0038]</mark>: the trait `MyStaticTrait` is not dyn compatible
<mark class="info">  --&gt;</mark> src\lib.rs:4:1
<mark class="info">   |</mark>
<mark class="info">4  |</mark> assert_obj_safe!(MyStaticTrait);
<mark class="info">   |</mark> <mark class="error">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MyStaticTrait` is not dyn compatible</mark>
<mark class="info">   |</mark>
<mark class="edit">note</mark>: for a trait to be dyn compatible it needs to allow building a vtable
<mark class="info">    </mark>  for more information, visit &lt;<a href="https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility">https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility</a>&gt;
<mark class="info">  --&gt;</mark> src\lib.rs:11:8
<mark class="info">   |</mark>
<mark class="info">10 |</mark> pub trait MyStaticTrait {
<mark class="info">   |</mark>           <mark class="info">------------- this trait is not dyn compatible...</mark>
<mark class="info">11 |</mark>     fn method&lt;T&gt;(&amp;self, arg: T);
<mark class="info">   |</mark>        <mark class="edit">^^^^^^ ...because method `method` has generic type parameters</mark>
<mark class="info">   =</mark> <mark class="title">help</mark>: consider moving `method` to another trait
<mark class="info">   =</mark> <mark class="title">note</mark>: this error originates in the macro `assert_obj_safe` (in Nightly builds, run with -Z macro-backtrace for more info)
</samp></pre>
				</section>
			</section> <section>
				<hgroup>
					<h1>機能 2</h1>
					<div class="subTitle"> トレイト実装の確認</div>
				</hgroup>
				<p>
以下は型のトレイト実装を確認するマクロの抜粋である。
				</p>
				<ul>
					<li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_impl_all.html"><code>assert_impl_all!</code></a>
					</li> <li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_impl_any.html"><code>assert_impl_any!</code></a>
					</li> <li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_impl_one.html"><code>assert_impl_one!</code></a>
					</li> <li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_not_impl_all.html"><code>assert_not_impl_all!</code></a>
					</li> <li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_not_impl_any.html"><code>assert_not_impl_any!</code></a>
					</li> <li>
<a href="https://docs.rs/static_assertions/1.1.0/static_assertions/macro.assert_obj_safe.html"><code>assert_obj_safe!</code></a>
					</li>
				</ul>
				<p>
これらが活躍するのは、トレイトのブランケット実装の境界が複雑な場合である。なぜなら、そのような場合は具体的にどの型がそのブランケット実装の対象になっているのか、瞬時には分からない。また、境界のリファクタリング時にうっかり目的とする型を対象から外してしまうかもしれない。こうした心配事は具体的な型を例として確認しておくと不要になる。
				</p>
				<section>
					<h2>サンプル</h2>
<pre><code class="language-rust">
use std::fmt::Display;
use static_assertions::assert_impl_all;

assert_impl_all!(i32: MyValue);
assert_impl_all!(<mark class="error">f32</mark>: MyValue);

pub trait MyValue: Display {
    fn print(&amp;self) {
        println!("{self}");
    }
}

impl&lt;T&gt; MyValue for T where T: Display + Eq {}
</code></pre>
<pre><samp class="console-rustc">
<mark class="error">error[E0277]</mark><mark class="title">: the trait bound `f32: MyValue` is not satisfied</mark>
<mark class="info">  --&gt;</mark> src\lib.rs:5:18
<mark class="info">   |</mark>
<mark class="info">5  |</mark> assert_impl_all!(f32: MyValue);
<mark class="info">   |</mark>                  <mark class="error">^^^ the trait `std::cmp::Eq` is not implemented for `f32`</mark>
<mark class="info">   |</mark>
<mark class="info">   =</mark> <mark class="title">help</mark>: the following other types implement trait `std::cmp::Eq`:
<mark class="info"></mark>             i128
<mark class="info"></mark>             i16
<mark class="info"></mark>             i32
<mark class="info"></mark>             i64
<mark class="info"></mark>             i8
<mark class="info"></mark>             isize
<mark class="info"></mark>             u128
<mark class="info"></mark>             u16
<mark class="info"></mark>           and 4 others
<mark class="edit">note</mark>: required for `f32` to implement `MyValue`
<mark class="info">  --&gt;</mark> src\lib.rs:13:9
<mark class="info">   |</mark>
<mark class="info">13 |</mark> impl&lt;T&gt; MyValue for T where T: Display + Eq {}
<mark class="info">   |</mark>         <mark class="edit">^^^^^^^     ^</mark>                    <mark class="info">-- unsatisfied trait bound introduced here</mark>
<mark class="edit">note</mark>: required by a bound in `_::{closure#0}::assert_impl_all`
<mark class="info">  --&gt;</mark> src\lib.rs:5:1
<mark class="info">   |</mark>
<mark class="info">5  |</mark> assert_impl_all!(f32: MyValue);
<mark class="info">   |</mark> <mark class="edit">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `assert_impl_all`</mark>
<mark class="info">   =</mark> note: this error originates in the macro `assert_impl_all` (in Nightly builds, run with -Z macro-backtrace for more info)
</samp></pre>
				</section>
			</section>
		</section>
	</body>
</html>
