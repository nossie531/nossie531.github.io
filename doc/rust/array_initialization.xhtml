<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
	<head>
		<title>Rust メモ: 配列の初期化</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="../../lib/doc.js"></script>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
		<p>
配列を初期化する各種の方法について。
		</p> 
		<doc-nav-sub/>
		<section>
			<hgroup>
				<h1>方法 1</h1>
				<div class="subTitle">各要素を指定</div>
			</hgroup>
			<p>
全ての要素の値を指定する。
			</p>
			<section>
				<h2>サンプル</h2>
<pre><code class="language-rust">
fn main() {
    let arr = [0, 1, 2];
    assert_eq!(arr, [0, 1, 2]);
}
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 2</h1>
				<div class="subTitle">
<a href="https://doc.rust-lang.org/std/default/trait.Default.html"><code>Default</code></a> トレイトの利用
				</div>
			</hgroup>
			<p>
既定値で全要素を初期化する。
			</p>
			<section>
				<h2>定数配列には使用不可</h2>
				<p>
この方法は <code>const</code> や <code>static</code> で宣言する配列には使用できない。
				</p> <p>
これは <code><a href="https://doc.rust-lang.org/std/default/trait.Default.html">Default</a>::<a href="https://doc.rust-lang.org/std/default/trait.Default.html#tymethod.default">default</a></code> が <code>const</code> 関数でないため。
				</p>
			</section> <section>
				<h2>サンプル</h2>
<pre><code class="language-rust">
fn main() {
    let arr = &lt;[i32; 3] as Default&gt;::default();
    assert_eq!(arr, [0, 0, 0]);
}
</code></pre>
			</section> <section>
				<h2 class="noTitle"></h2>
				<aside class="normal moan">
					<p>
要素数の制限について。
					</p> <p>
要素数が 32 を超えるとこの方法は使えない。なぜなら、<code>Default</code> は <code class="nw">[T; 0]</code> から <code class="nw">[T; 32]</code> までしか<a href="https://doc.rust-lang.org/std/primitive.array.html#impl-Default-for-%5BT;+32%5D">実装</a>されていない。これは <a href="https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html">Rust 1.51.0</a> による <a href="https://doc.rust-lang.org/reference/items/generics.html#const-generics">Const Generics</a> の導入前、要素数をジェネリクスで一般化できなかった時代の名残りのように思えるが、<time>2024 年現在</time>も、まだ改善されていない。
					</p>
				</aside>
			</section>
		</section> <section>
			<hgroup>
				<h1 id="copy">方法 3</h1>
				<div class="subTitle">
<a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> トレイトの利用
				</div>
			</hgroup>
			<p>
指定値のコピーで全要素を初期化する。
			</p>
			<section>
				<h2>サンプル</h2>
<pre><code class="language-rust">
fn main() {
    let arr = [42; 3];
    assert_eq!(arr, [42, 42, 42]);
}
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 4</h1>
				<div class="subTitle">
<a href="https://doc.rust-lang.org/std/keyword.const.html"><code>const</code></a> キーワードの利用
				</div>
			</hgroup>
			<p>
<code>const</code> 宣言した変数や <code>const</code> ブロック式の値で全要素を初期化する。
			</p> <p>
<code>Vec::&lt;i32&gt;::new()</code> なども値として指定可能 (<code><a href="https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec</a>::<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html#method.new">new</a></code> が <code>const</code> 関数のため)。
			</p>
			<section>
				<h2>サンプル</h2>
				<p>
以下では､『<a href="#copy">Copy トレイトの利用</a>』との差別化のため要素型 <code>CopyNg</code> を用いている。
				</p>
<pre><code class="language-rust">
fn main() {
    let arr = [const { CopyNg(42) }; 3];
    assert_eq!(arr, [CopyNg(42), CopyNg(42), CopyNg(42)]);
}

#[derive(Debug, Eq, PartialEq)]
struct CopyNg(i32);
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 5</h1>
				<div class="subTitle">
<a href="https://doc.rust-lang.org/std/array/fn.from_fn.html"><code>array::from_fn</code></a> 関数の利用
				</div>
			</hgroup>
			<p>
各要素の値をラムダで生成して初期化する。
			</p>
			<section>
				<h2>定数配列には使用不可</h2>
				<p>
この方法は <code>const</code> や <code>static</code> で宣言する配列には使用できない。
				</p> <p>
これは <code>array::from_fn</code> が <code>const</code> 関数でないため。
				</p>
			</section> <section>
				<h2>サンプル</h2>
<pre><code class="language-rust">
use std::array;

fn main() {
    let arr = array::from_fn::&lt;_, 3, _&gt;(|i| i as i32);
    assert_eq!(arr, [0, 1, 2]);
}
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 6</h1>
				<div class="subTitle">
<code><a href="https://doc.rust-lang.org/std/primitive.array.html">[T; N]</a>::<a href="https://doc.rust-lang.org/std/primitive.array.html#method.map">map</a></code> メソッドの利用
				</div>
			</hgroup>
			<p>
既存の配列をラムダで変換して初期化する。
			</p>
			<section>
				<h2>定数配列には使用不可</h2>
				<p>
この方法は <code>const</code> や <code>static</code> で宣言する配列には使用できない。
				</p> <p>
これは <code>[T; N]::map</code> が <code>const</code> 関数でないため。
				</p>
			</section> <section>
				<h2>サンプル</h2>
<pre><code class="language-rust">
fn main() {
    let arr_src = [0, 1, 2];
    let arr = arr_src.map(|x| x + 1);
    assert_eq!(arr, [1, 2, 3]);
}
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 7</h1>
				<div class="subTitle">
<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec</code></a> 型の利用
				</div>
			</hgroup>
			<p>
ベクタを配列へと変換する。サイズが合わないとエラーになる。
			</p> <p>
変換方法は以下の二通りがあり、どちらも同じ結果になる。
			</p>
			<ul>
				<li>
<a href="https://doc.rust-lang.org/std/primitive.array.html"><code>[T; N]</code></a> が実装する <code><a href="https://doc.rust-lang.org/std/convert/trait.TryFrom.html">TryFrom</a>&lt;<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec</a>&gt;::<a href="https://doc.rust-lang.org/std/convert/trait.TryFrom.html#tymethod.try_from">try_from</a></code> メソッド
				</li> <li>
<a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"><code>Vec</code></a> が実装する <code><a href="https://doc.rust-lang.org/std/convert/trait.TryInto.html">TryInto</a>&lt;<a href="https://doc.rust-lang.org/std/primitive.array.html">[T; N]</a>&gt;::<a href="https://doc.rust-lang.org/std/convert/trait.TryInto.html#tymethod.try_into">try_into</a></code> メソッド
				</li>
			</ul>
			<section>
				<h2>定数配列には使用不可</h2>
				<p>
この方法は <code>const</code> や <code>static</code> で宣言する配列には使用できない。
				</p> <p>
これは <code>try_from</code> や <code>try_into</code> が <code>const</code> 関数でないため。
				</p>
			</section> <section>
				<h2>サンプル 1</h2>
				<p>
以下では、<code>try_from</code> を利用している。
				</p>
<pre><code class="language-rust">
fn main() {
    let vec = vec![0, 1, 2];
    let arr = &lt;[_; 3]&gt;::try_from(vec).unwrap();
    assert_eq!(arr, [0, 1, 2]);
}
</code></pre>
			</section> <section>
				<h2>サンプル 2</h2>
				<p>
以下では、<code>try_into</code> を利用している。
				</p>
<pre><code class="language-rust">
fn main() {
    let vec = vec![0, 1, 2];
    let arr: [i32; 3] = vec.try_into().unwrap();
    assert_eq!(arr, [0, 1, 2]);
}
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 8</h1>
				<div class="subTitle">
<a href="https://doc.rust-lang.org/std/mem/union.MaybeUninit.html"><code>MaybeUninit</code></a> 共用体の利用
				</div>
			</hgroup>
			<p>
未初期化の配列を初期化後、アンセーフ機能で通常の配列へと転用する。
			</p>
			<section>
				<h2>サンプル</h2>
<pre><code class="language-rust">
use std::mem::{self, MaybeUninit};

fn main() {
    let mut arr = [const { MaybeUninit::&lt;i32&gt;::uninit() }; 3];

    let mut i = 0;
    while i &lt; arr.len() {
        arr[i] = MaybeUninit::new(i as i32);
        i += 1;
    }

    let arr = unsafe { mem::transmute::&lt;_, [i32; 3]&gt;(arr) };
    assert_eq!(arr, [0, 1, 2]);
}
</code></pre>
			</section>
		</section> <section>
			<hgroup>
				<h1>方法 9</h1>
				<div class="subTitle">配列全体を関数で作成</div>
			</hgroup>
			<p>
配列全体を関数で生成して初期化する。
			</p>
			<section>
				<h2>サンプル</h2>
				<p>
以下では、簡単にするためこっそりと <code>Copy</code> トレイトに依存している。<br/>
(他の方法と併用すれば、その依存もなくせる。)
				</p>
<pre><code class="language-rust">
fn main() {
    const ARR: [i32; 3] = create_arr();
    assert_eq!(ARR, [0, 1, 2]);
}

const fn create_arr() -&gt; [i32; 3] {
    let mut ret = [0; 3];
    let mut i = 0;
    while i &lt; ret.len() {
        ret[i] = i as i32;
        i += 1;
    }

    ret
}
</code></pre>
			</section>
		</section>
	</body>
</html>
