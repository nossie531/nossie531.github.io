<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:m="http://www.w3.org/1998/Math/MathML"
	  xml:lang="ja">
	<head>
		<title>連立線形方程式の解法</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p class="todo">
注: 書きかけです (残: 反復法について)。
		</p> <p>
連立線形方程式の代表的な計算方法についてまとめておく。
		</p> 
		<section>
			<h1>記号の導入</h1>
			<p>
連立線形方程式は行列で以下のように表せる。
			</p>
			<div class="math">
<m:math display="block">
	<m:mi>𝐀</m:mi>
	<m:mi>𝒙</m:mi>
	<m:op>=</m:op>
	<m:mi>𝒃</m:mi>
</m:math>
			</div>
			<ul>
				<li>
<m:math><m:mi>𝐀</m:mi></m:math> は <m:math><m:mi>n</m:mi></m:math> 次の正方行列
				</li> <li>
<m:math><m:mi>𝒙</m:mi></m:math> は未知ベクトル
				</li> <li>
<m:math><m:mi>𝒃</m:mi></m:math> は定数ベクトル
				</li>
			</ul>
			<p>
この等式を以下のように変形できると解が得られる。
			</p>
			<div class="math">
<m:math display="block">
	<m:mi>𝐄</m:mi>
	<m:mi>𝒙</m:mi>
	<m:op>=</m:op>
	<m:mi>𝒃</m:mi><m:op>′</m:op>
</m:math>
			</div>
			<ul>
				<li>
<m:math><m:mi>𝐄</m:mi></m:math> は単位行列
				</li> <li>
<m:math><m:mi>𝒃</m:mi><m:op>′</m:op></m:math> は解ベクトル
				</li>
			</ul>
		</section> 
		<section>
			<h1>各種アルゴリズム</h1>
			<p>
様々な手法があるが、大きく分けると以下の二種類。
			</p>
			<dl class="normal highProfile">
				<dt> 直接法 </dt>
				<dd>
					<p>
連立線形方程式を構成する各式に代数的操作を繰り返し、係数行列を単位行列へと整形していく解法 (係数行列が単位行列ベクトルのはずのは解ベクトルに一致)。
					</p>
					<ul>
						<li>
利点 … 全ての行列に対して有効。
						</li> <li>
欠点 … 大きな行列に対して低速。
						</li>
					</ul>
					<p>
代表的な手法。
					</p>
					<ul>
						<li> <a href="#GaussJordanMethod">Guss-Jordan 法</a></li>
						<li> Guss の消去法 </li>
						<li> LU 分解 </li>
						<li> and more... </li>
					</ul>
				</dd>
				<dt> 反復法 </dt>
				<dd>
					<p>
適当な初期解を与え、そこから真の解へと近づく操作を何度も繰り返し、誤差を縮小していく解法 (縮小幅が小さくなった時点などで操作を打ち切る)。
					</p>
					<ul>
						<li>
利点 … 大きな行列に対して高速。
						</li> <li>
欠点 … 特定の行列 (対角優位など) にのみ有効。
						</li>
					</ul>
					<p>
代表的な手法。
					</p>
					<ul>
						<li> Jacobi 法 </li>
						<li> Gauss-Seidel 法 </li>
						<li> and more... </li>
					</ul>
				</dd>
			</dl>
			<section>
				<h1 id="GaussJordanMethod">Gauss-Jordan 法</h1>
				<p>
直接法の一種。他と比べると実装が簡単。
				</p>
				<section>
					<h2>全体の流れ</h2>
					<p>
行列の左側の列から順に、単位行列の各要素になるよう変形していく。
					</p> <p>
つまり、ちょうど <m:math><m:mi>k</m:mi></m:math> 回目のループでの等式は以下のようになる。
					</p>
					<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mo fence="true">[</m:mo>
		<m:mtable columnlines="none none solid none none">
			<m:mtr>
				<m:mtd><m:msub><m:mi>δ</m:mi><m:mrow><m:mn>1</m:mn><m:mo>,</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:mtd>
				<m:mtd><m:mi>⋯</m:mi></m:mtd>
				<m:mtd><m:msub><m:mi>δ</m:mi><m:mrow><m:mn>1</m:mn><m:mo>,</m:mo><m:mi>k</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:mtd>
				<m:mtd><m:msub><m:mi>v</m:mi><m:mrow><m:mn>1</m:mn><m:mo>,</m:mo><m:mi>k</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mi>⋯</m:mi></m:mtd>
				<m:mtd><m:msub><m:mi>v</m:mi><m:mrow><m:mn>1</m:mn><m:mo>,</m:mo><m:mi>n</m:mi></m:mrow></m:msub></m:mtd>
			</m:mtr> <m:mtr>
				<m:mtd><m:mi>⋮</m:mi></m:mtd>
				<m:mtd></m:mtd>
				<m:mtd><m:mi>⋮</m:mi></m:mtd>
				<m:mtd><m:mi>⋮</m:mi></m:mtd>
				<m:mtd></m:mtd>
				<m:mtd><m:mi>⋮</m:mi></m:mtd>
			</m:mtr> <m:mtr>
				<m:mtd><m:msub><m:mi>δ</m:mi><m:mrow><m:mi>n</m:mi><m:mo>,</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:mtd>
				<m:mtd><m:mi>⋯</m:mi></m:mtd>
				<m:mtd><m:msub><m:mi>δ</m:mi><m:mrow><m:mi>n</m:mi><m:mo>,</m:mo><m:mi>k</m:mi><m:mo>−</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:mtd>
				<m:mtd><m:msub><m:mi>v</m:mi><m:mrow><m:mi>n</m:mi><m:mo>,</m:mo><m:mi>k</m:mi></m:mrow></m:msub></m:mtd><m:mtd><m:mi>⋯</m:mi></m:mtd>
				<m:mtd><m:msub><m:mi>v</m:mi><m:mrow><m:mi>n</m:mi><m:mo>,</m:mo><m:mi>n</m:mi></m:mrow></m:msub></m:mtd>
			</m:mtr>
		</m:mtable>
		<m:mo fence="true">]</m:mo>
	</m:mrow>
	<m:mi>𝒙</m:mi>
	<m:mo>=</m:mo>
	<m:mrow>
		<m:mo fence="true">[</m:mo>
		<m:mtable>
			<m:mtr><m:mtd><m:msub><m:mi>w</m:mi><m:mn>1</m:mn></m:msub></m:mtd></m:mtr>
			<m:mtr><m:mtd><m:mi>⋮</m:mi></m:mtd></m:mtr>
			<m:mtr><m:mtd><m:msub><m:mi>w</m:mi><m:mi>n</m:mi></m:msub></m:mtd></m:mtr>
		</m:mtable>
		<m:mo fence="true">]</m:mo>
	</m:mrow>
</m:math>
					</div>
					<ul>
						<li>
<m:math><m:msub><m:mi>δ</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math> は単位行列の <m:math><m:mi>i</m:mi></m:math> 行 <m:math><m:mi>j</m:mi></m:math> 列の値
						</li> <li>
<m:math><m:mi>v</m:mi></m:math> 行 <m:math><m:mi>w</m:mi></m:math> は計算途中の値
						</li>
					</ul>
				</section> <section>
					<h2>各行の操作</h2>
					<p>
<m:math><m:mi>k</m:mi></m:math> 回目のループにおける各行の操作は以下のように行う。
					</p>
					<ol>
						<li>
							<p>
行 <m:math><m:mi>k</m:mi></m:math> について <m:math><m:msub><m:mi>v</m:mi><m:mrow><m:mi>k</m:mi><m:mo>,</m:mo><m:mi>k</m:mi></m:mrow></m:msub></m:math> で除算
							</p>
						</li> <li>
							<p>
行 <m:math><m:mi>i</m:mi><m:mo>≠</m:mo><m:mi>k</m:mi></m:math> について、行 <m:math><m:mi>k</m:mi></m:math> の <m:math><m:msub><m:mi>v</m:mi><m:mrow><m:mi>i</m:mi><m:mi>k</m:mi></m:mrow></m:msub></m:math> 倍で減算
							</p>
						</li>
					</ol>
					<p>
※ ここで <m:math><m:msub><m:mi>v</m:mi><m:mrow><m:mi>k</m:mi><m:mo>,</m:mo><m:mi>k</m:mi></m:mrow></m:msub></m:math> はピボットと呼ばれる。
					</p>
				</section> <section>
					<h2>ピボット選択</h2>
					<p>
ピボットの絶対値が 0 または小さ過ぎる場合、計算できないか誤差が大きくなる。
					</p> <p>
そのため、操作前に行または列を入れ替える。行のみを入れ替える場合、部分ピボット選択、両方を入れ替える場合、完全ピボット選択と言う。行を入れ替えても解の位置は変わらないため、前者は比較的簡単に実装できる。
					</p>
				</section>
			</section>
		</section>
	</body>
</html>
