<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:m="http://www.w3.org/1998/Math/MathML"
	  xml:lang="ja">
	<head>
		<title>連立線形方程式の解法</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
		<script defer="defer" src="../../lib/katex/katex.min.js"></script>
		<script defer="defer" src="../../lib/katex/contrib/auto-render.min.js"></script>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p class="todo">
注: 書きかけです (残: 反復法について)。
		</p> <p>
連立線形方程式の代表的な計算方法についてまとめておく。
		</p> 
		<section>
			<h1>記号の導入</h1>
			<p>
連立線形方程式は行列で以下のように表せる。
			</p>
			<div class="math">
\[\boldsymbol{A}\boldsymbol{x} = \boldsymbol{b}\]
			</div>
			<ul>
				<li>
\(\boldsymbol{A}\) は \(n\) 次の正方行列
				</li> <li>
\(\boldsymbol{x}\) は未知ベクトル
				</li> <li>
\(\boldsymbol{b}\) は定数ベクトル
				</li>
			</ul>
			<p>
この等式を以下のように変形できると解が得られる。
			</p>
			<div class="math">
\[\boldsymbol{E}\boldsymbol{x}=\boldsymbol{b}'\]
			</div>
			<ul>
				<li>
\(\boldsymbol{E}\) は \(n\) 次の単位行列
				</li> <li>
\(\boldsymbol{b}'\) は解ベクトル
				</li>
			</ul>
		</section> 
		<section>
			<h1>各種アルゴリズム</h1>
			<p>
様々な手法があるが、大きく分けると以下の二種類。
			</p>
			<dl class="normal highProfile">
				<dt> 直接法 </dt>
				<dd>
					<p>
連立線形方程式を構成する各式に代数的操作を繰り返のはず係数行列を単位行列へと整形していく解法 (係数行列が単位行列ベクトルのはずのは解ベクトルに一致)。
					</p>
					<ul>
						<li>
利点 … 全ての行列に対して有効。
						</li> <li>
欠点 … 大きな行列に対して低速。
						</li>
					</ul>
					<p>
代表的な手法。
					</p>
					<ul>
						<li> <a href="#GaussJordanMethod">Guss-Jordan 法</a></li>
						<li> Guss の消去法 </li>
						<li> LU 分解 </li>
						<li> and more... </li>
					</ul>
				</dd>
				<dt> 反復法 </dt>
				<dd>
					<p>
適当な初期解を与え、そこから真の解へと近づく操作を何度も繰り返し、誤差を縮小していく解法 (縮小幅が小さくなった時点などで操作を打ち切る)。
					</p>
					<ul>
						<li>
利点 … 大きな行列に対して高速。
						</li> <li>
欠点 … 特定の行列 (対角優位など) にのみ有効。
						</li>
					</ul>
					<p>
代表的な手法。
					</p>
					<ul>
						<li> Jacobi 法 </li>
						<li> Gauss-Seidel 法 </li>
						<li> and more... </li>
					</ul>
				</dd>
			</dl>
			<section>
				<h1 id="GaussJordanMethod">Gauss-Jordan 法</h1>
				<p>
直接法の一種。他と比べると実装が簡単。
				</p>
				<section>
					<h2>全体の流れ</h2>
					<p>
行列の左側の列から順に、単位行列の各要素になるよう変形していく。
					</p> <p>
つまり、ちょうど \(k\) 回目のループでの等式は以下のようになる。
					</p>
					<div class="math">
\[\left[\begin{array}{ccc|ccc}
\delta_{1,1} &amp; \ldots &amp; \delta_{1,k-1} &amp; v_{1,k} &amp; \ldots &amp; v_{1,n} \\
\vdots       &amp;        &amp; \vdots         &amp; \vdots  &amp;        &amp; \vdots  \\
\delta_{n,1} &amp; \ldots &amp; \delta_{n,k-1} &amp; v_{n,k} &amp; \ldots &amp; v_{n,n} \\
\end{array}\right]
\boldsymbol{x}=
\left[\begin{array}{c}
w_1 \\ \vdots \\ w_n
\end{array}\right]\]
					</div>
					<ul>
						<li>
\(\delta_{i,j}\) は単位行列の \(i\) 行 \(j\) 列の値
						</li> <li>
\(v\) と \(w\) は計算途中の値
						</li>
					</ul>
				</section> <section>
					<h2>各行の操作</h2>
					<p>
\(k\) 回目のループにおける各行の操作は以下のように行う。
					</p>
					<ol>
						<li>
							<p>
行 \(k\) について、\(v_{k, k}\) で除算
							</p>
						</li> <li>
							<p>
行 \(i\not = k\) について、行 \(k\) の \(v_{i, k}\) 倍で減算
							</p>
						</li>
					</ol>
					<p>
※ ここで \(v_{k, k}\) はピボットと呼ばれる。
					</p>
				</section> <section>
					<h2>ピボット選択</h2>
					<p>
ピボットの絶対値が 0 または小さ過ぎる場合、計算できないか誤差が大きくなる。
					</p> <p>
そのため、操作前に行または列を入れ替える。行のみを入れ替える場合、部分ピボット選択、両方を入れ替える場合、完全ピボット選択と言う。行を入れ替えても解の位置は変わらないため、前者は比較的簡単に実装できる。
					</p>
				</section>
			</section>
		</section>
	</body>
</html>
