<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML"
	viewBox="0 0 220 200">
	<style>
@import url("style/rungeKutta.css");
	</style>
	<script href="lib/graphViewer.js"/>
	<script href="lib/rungeKutta.js"/>
	<script><![CDATA[
document.addEventListener("DOMContentLoaded", () => {
	const ctx = getContext();
	const viewer = new GraphViewer(ctx.gridArea, ctx.origin, 80);
	const real = getAlgorithm(ctx.smallStep, ctx.range).result();
	const calc = getAlgorithm(ctx.largeStep, ctx.range).result();
	const points = getResearchPoints();
	const flow1 = fromPoint(points[0]);
	const flow2 = fromPoint(points[1]);
	const flow3 = fromPoint(points[2]);
	const grad1 = getGradLine(points[0]);
	const grad2 = getGradLine(points[1]);
	const grad3 = getGradLine(points[2]);
	const error = [real.at(-1), calc.at(-1)];
	viewer.appendAxis("axis");
	viewer.appendGridX("step", ctx.largeStep);
	viewer.setFuncPath("flow1", flow1);
	viewer.setFuncPath("flow2", flow2);
	viewer.setFuncPath("flow3", flow3);
	viewer.setPathLine("grad1", grad1, 0.5);
	viewer.setPathLine("grad2", grad2, 0.5);
	viewer.setPathLine("grad3", grad3, 0.5);
	viewer.setFuncPath("calc", calc);
	viewer.setPath("errorTick", error);
	viewer.setPath("errorBand", error);
	viewer.setLabel("errorText", getErrorTextPos(error), 10, 1);
});

function getAlgorithm(step) {
	const result = new KuttasThirdOrder;
	result.df = getContext().df;
	result.value = getContext().value;
	result.range = getContext().range;
	result.step = step;
	return result;
}

function getGradLine(point) {
	const dx = 1;
	const dy = dx * getContext().df(point.x, point.y);
	return [point, {x: point.x + dx, y: point.y + dy}];
}

function getResearchPoints() {
	const ctx = getContext();
	const alg = getAlgorithm(ctx.largeStep, ctx.range);
	alg.result();
	return alg.lastPoints;
}

function fromPoint(p) {
	const ctx = getContext();
	const bkwd = bkwdResult();
	const frwd = frwdResult();
	return concat(bkwd, frwd);

	function frwdResult() {
		const alg = getAlgorithm(ctx.smallStep);
		alg.value = p.y;
		alg.range = {min: p.x, max: ctx.range.max}
		return alg.result();
	}

	function bkwdResult() {
		const alg = getAlgorithm(ctx.smallStep);
		alg.value = p.y;
		alg.step = -ctx.smallStep;
		alg.range = {min: p.x, max: ctx.range.min}
		return alg.result().reverse();
	}

	function concat(bkwd, frwd) {
		return bkwd.filter((_, i) => i < bkwd.length - 1).concat(frwd);
	}
}

function getContext() {
	return {
		value: 0.6,
		df: (x, y) => y * 0.5,
		smallStep: 0.1,
		largeStep: 2,
		range: {min: 0, max: 2},
		origin: {x: 10, y: 10},
		gridArea: {x: 10, y: 20, width: 175, height: 170}
	};
}

function getErrorTextPos(error) {
	return {x: error[0].x, y: (error[0].y + error[1].y) / 2};
}
	]]></script>
	<defs>
		<marker id="point" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="2"/>
		</marker>
		<marker id="arrow" markerUnits="userSpaceOnUse" orient="auto-start-reverse"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-4,3 -4,-3 Z"/>
		</marker>
		<marker id="gradSrc" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="3"/>
		</marker>
		<marker id="gradDst" markerUnits="userSpaceOnUse" orient="auto"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-6,4 -6,-4 Z"/>
		</marker>
		<marker id="tickMark" markerUnits="userSpaceOnUse" orient="auto"
			markerWidth="10" markerHeight="20" viewBox="-5 -10 10 20">
			<path d="M 0,-5 V 5"/>
		</marker>
	</defs>
	<g>
		<!-- 座標軸。-->
		<g id="axis">
			<foreignObject class="x" width="30" height="30">
				<m:math><m:mi>t</m:mi></m:math>
			</foreignObject>
		</g>
		<!-- ステップ。-->
		<g id="step"/>
		<!-- 誤差表示。-->
		<text id="errorText">Error</text>
		<path id="errorTick"/>
		<path id="errorBand"/>
		<!-- 周辺の値。-->
		<path id="flow1" class="real"/>
		<path id="flow2" class="flow"/>
		<path id="flow3" class="flow"/>
		<!-- 勾配の方向。-->
		<path id="grad1" class="grad"/>
		<path id="grad2" class="grad"/>
		<path id="grad3" class="grad"/>
		<!-- 計算値。-->
		<path id="calc" class="calc endCap"/>
	</g>
</svg>
