<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML"
	viewBox="0 0 220 200">
	<style>
@import url("style/rungeKutta.css");
	</style>
	<script href="lib/graphViewer.js"/>
	<script href="lib/rungeKutta.js"/>
	<script><![CDATA[
document.addEventListener("DOMContentLoaded", () => {
	const largeStep = 2;
	const smallStep = 0.01;
	const range = {min: 0, max: 2};
	const origin = {x: 10, y: 10};
	const gridArea = {x: 10, y: 20, width: 175, height: 170};
	const viewer = new GraphViewer(gridArea, origin, 80);
	const real = getAlgorithm(smallStep, range).result();
	const calc = getAlgorithm(largeStep, range).result();
	const error = [real.at(-1), calc.at(-1)];
	viewer.magnify = 80;
	viewer.appendAxis("axis");
	viewer.appendGridX("step", largeStep);
	viewer.setFuncPath("real", real);
	viewer.setFuncPath("calc", calc);
	viewer.setPathLine("grad", calc, 0.5);
	viewer.setPath("errorTick", error);
	viewer.setPath("errorBand", error);
	viewer.setLabel("errorText", getErrorTextPos(error), 10);
});

function getAlgorithm(step, range) {
	const result = new ExplicitEuler;
	result.df = (x, y) => y * 0.5;
	result.range = range;
	result.value = 0.6;
	result.step = step;
	return result;
}

function getErrorTextPos(error) {
	return {x: error[0].x, y: (error[0].y + error[1].y) / 2};
}
	]]></script>
	<defs>
		<marker id="point" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="2"/>
		</marker>
		<marker id="arrow" markerUnits="userSpaceOnUse" orient="auto-start-reverse"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-4,3 -4,-3 Z"/>
		</marker>
		<marker id="gradSrc" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="3"/>
		</marker>
		<marker id="gradDst" markerUnits="userSpaceOnUse" orient="auto"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-6,3 -6,-3 Z"/>
		</marker>
		<marker id="tickMark" markerUnits="userSpaceOnUse" orient="auto"
			markerWidth="10" markerHeight="20" viewBox="-5 -10 10 20">
			<path d="M 0,-5 V 5"/>
		</marker>
	</defs>
	<g>
		<!-- 座標軸。-->
		<g id="axis">
			<foreignObject class="x" width="30" height="30">
				<m:math><m:mi>t</m:mi></m:math>
			</foreignObject>
		</g>
		<!-- ステップ。-->
		<g id="step"/>
		<!-- 誤差表示。-->
		<text id="errorText">Error</text>
		<path id="errorTick"/>
		<path id="errorBand"/>
		<!-- 真の値。-->
		<path id="real" class="real"/>
		<!-- 計算値。-->
		<path id="calc" class="calc endCap"/>
		<!-- 勾配の方向。-->
		<path id="grad" class="grad"/>
	</g>
</svg>
