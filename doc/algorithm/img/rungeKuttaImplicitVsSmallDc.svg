<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML"
	viewBox="0 0 230 180" height="180">
	<style>
@import url("style/rungeKutta.css");
	</style>
	<script href="lib/graphViewer.js"/>
	<script href="lib/rungeKutta.js"/>
	<script><![CDATA[
document.addEventListener("DOMContentLoaded", () => {
	const smallStep = 0.1;
	const largeStep = 1;
	const range = {min: 0, max: 3.1};
	const origin = {x: 5, y: 20};
	const gridArea = {x:10, y:10, width: 200, height: 160};
	const viewer = new GraphViewer(range, origin, gridArea);
	const calc = getAlgorithm(largeStep, range).result();
	const real = getAlgorithm(smallStep, range).result();
	viewer.magnify = 60;
	viewer.appendAxis("axis");
	viewer.appendGridX("step", largeStep);
	viewer.setFuncPath("real", real);
	viewer.setFuncPath("calc", calc);
});

function getAlgorithm(step, range) {
	const result = new ExplicitEuler;
	result.range = range;
	result.value = 1.9;
	result.step = step;
	result.execStep = (x, y) => {
		// 元の式: df = (x, y) => -0.5 * y + 0.54;
		return (y + 0.54 * step) / (1 + 0.5 * step)
	};
	return result;
}
	]]></script>
	<defs>
		<marker id="arrow" markerUnits="userSpaceOnUse" orient="auto-start-reverse"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-4,3 -4,-3 Z"/>
		</marker>
		<marker id="point" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="2"/>
		</marker>
	</defs>
	<g>
		<!-- 座標軸。-->
		<g id="axis"/>
		<!-- ステップ。-->
		<g id="step"/>
		<!-- 真の値。-->
		<path id="real" class="flow"/>
		<!-- 計算値。-->
		<path id="calc" class="calc"/>
		<!-- 横軸ラベル。-->
		<foreignObject x="217" y="142" width="30" height="30">
			<m:math><m:mi>t</m:mi></m:math>
		</foreignObject>
	</g>
</svg>
