<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML"
	viewBox="0 0 210 230" height="230">
	<style>
@import url("style/diffEq.css");
	</style>
	<script href="lib/graphViewer.js"/>
	<script href="lib/matrix.js"/>
	<script href="lib/diffEq.js"/>
	<script><![CDATA[
document.addEventListener("DOMContentLoaded", () => {
	const ctx = getContext();
	const viewer = new GraphViewer(ctx.range, ctx.origin, ctx.gridArea);
	viewer.appendAxis("axis");
	viewer.appendGridX("step", ctx.largeStep);
	drawReal(viewer);
	drawCalc(viewer);
	drawError(viewer);
	drawAuxLines(viewer);
	drawBackDiffusion(viewer);
});

function drawReal(viewer) {
	const pathArr = getAlgorithm(getContext().smallStep).result();
	viewer.setFuncPath("r1", pathArr[0]);
	viewer.setFuncPath("r2", pathArr[1]);
}

function drawCalc(viewer) {
	const pathArr = getAlgorithm().result();
	viewer.setFuncPath("c1", pathArr[0]);
	viewer.setFuncPath("c2", pathArr[1]);
	viewer.setLabel("n1", pathArr[0][0], -20, -10);
	viewer.setLabel("n2", pathArr[1][0], -20, -10);
}

function drawAuxLines(viewer) {
	const fullPathArr = getAlgorithm().result();
	const halfPathArr = getHalfStepAlgorithm().result();
	const pathArr = halfPathArr.map((x, i) => x.concat([fullPathArr[i][1]]));
	viewer.setFuncPath("ax1", pathArr[0]);
	viewer.setFuncPath("ax2", pathArr[1]);
}

function drawError(viewer) {
	const real = getAlgorithm(getContext().smallStep).result()[0].at(-1);
	const calc = getAlgorithm().result()[0].at(-1);
	const error = [real, calc];
	viewer.setPath("error", error);
	viewer.setLabel("errorText", getErrorTextPos(error), 12);
}

function drawBackDiffusion(viewer) {
	const nodes = getAlgorithm().result().map(x => x[1].y);
	const pathArr = getReverseAlgorithm(nodes).result().map(flipPathX);
	viewer.setFuncPath("b1", pathArr[0]);
	viewer.setFuncPath("b2", pathArr[1]);
}

function flipPathX(points) {
	const range = getContext().range;
	const center = (range.max - range.min) / 2;
	return points.map(p => ({x: center - (p.x - center), y: p.y}));
}

function getContext() {
	return {
		dc: 0.005,
		smallStep: 5,
		largeStep: 140,
		range: {min: 0, max: 140},
		origin: {x: 10, y: 10},
		gridArea: {x: 15, y:10, width: 160, height: 210},
		nodes: [180, 20]
	};
}

function getAlgorithm(step) {
	const result = new CrankNicolsonDiffEq();
	result.dc = getContext().dc;
	result.step = step || getContext().largeStep;
	result.range = getContext().range;
	result.nodes = getContext().nodes;
	return result;
}

function getHalfStepAlgorithm() {
	const result = new ExplicitDiffEq();
	const min = getContext().range.min;
	result.dc = getContext().dc;
	result.step = getContext().largeStep / 2;
	result.range = {min, max: min + getContext().largeStep / 2};
	result.nodes = getContext().nodes;
	return result;
}

function getReverseAlgorithm(nodes) {
	const result = new ExplicitDiffEq;
	const baseRange = getContext().range;
	result.dc = -getContext().dc;
	result.step = getContext().smallStep;
	result.range = {min: baseRange.min, max: baseRange.max};
	result.nodes = nodes;
	return result;
}

function getErrorTextPos(error) {
	return {x: error[0].x, y: (error[0].y + error[1].y) / 2};
}
	]]></script>
	<defs>
		<marker id="point" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="2"/>
		</marker>
		<marker id="arrow" markerUnits="userSpaceOnUse" orient="auto-start-reverse"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-4,3 -4,-3"/>
		</marker>
		<marker id="auxPoint" markerUnits="userSpaceOnUse"
			markerWidth="10" markerHeight="10" viewBox="-5 -5 10 10">
			<circle r="2"/>
		</marker>
		<marker id="lengthMark" markerUnits="userSpaceOnUse" orient="auto"
			markerWidth="10" markerHeight="20" viewBox="-5 -10 10 20">
			<path d="M 0,0 V -7.5"/>
		</marker>
	</defs>
	<g>
		<!-- 座標軸。-->
		<g id="axis"/>
		<!-- ステップ。-->
		<g id="step"/>
		<!-- 誤差表示。-->
		<path id="error"/>
		<!-- 真の値。-->
		<path id="r1" class="flow"/>
		<path id="r2" class="flow"/>
		<!-- 計算値からの逆拡散。-->
		<path id="b1" class="flow"/>
		<path id="b2" class="flow"/>
		<!-- 補助線。-->
		<path id="ax1" class="aux"/>
		<path id="ax2" class="aux"/>
		<!-- 計算値。-->
		<path id="c1" class="calc endCap"/>
		<path id="c2" class="calc endCap"/>
		<!-- 横軸ラベル。-->
		<foreignObject x="182" y="202" width="30" height="30">
			<m:math><m:mi>t</m:mi></m:math>
		</foreignObject>	
		<!-- ノードラベル。-->
		<foreignObject id="n1" width="30" height="30">
			<m:math><m:msub><m:mi>n</m:mi><m:mn>1</m:mn></m:msub></m:math>
		</foreignObject>
		<foreignObject id="n2" width="30" height="30">
			<m:math><m:msub><m:mi>n</m:mi><m:mn>2</m:mn></m:msub></m:math>
		</foreignObject>
		<!-- 誤差ラベル。-->
		<text id="errorText">Error</text>
	</g>
</svg>
