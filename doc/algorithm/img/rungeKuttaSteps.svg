<?xml version="1.0" encoding="utf-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:m="http://www.w3.org/1998/Math/MathML"
	viewBox="0 0 250 150">
	<style>
@import url("style/rungeKutta.css");
	</style>
	<script href="lib/graphViewer.js"/>
	<script href="lib/rungeKutta.js"/>
	<script><![CDATA[
const vals = {
	iv: 0.7,
	stepS: 0.05,
	stepL: 0.6,
	rangeN: {min: 0, max: 3.0},
	rangeW: {min: 0, max: 3.1},
	origin: {x: 7.5, y: 7.5},
	gridArea: {x:10, y:20, width: 210, height: 120},
	df: (x, y) => (0.3 * (x - 0.5) * (x - 2) + y * 0.2)
};

document.addEventListener("DOMContentLoaded", () => {
	const viewer = setupViewer();
	setupInitalValue(viewer);
	setupReal(viewer);
	setupCalc(viewer);
});

function setupViewer() {
	const result = new GraphViewer(vals.gridArea, vals.origin, 65);
	result.appendAxis("axis");
	result.appendGridX("step", vals.stepL);
	return result;
}

function setupInitalValue(viewer) {
	const elm = document.getElementById("initialValue");
	viewer.setCircle(elm, {x: 0, y: vals.iv});
}

function setupReal(viewer) {
	const pathElm = document.getElementById("real");
	const points = getAlgorithm(vals.stepS, vals.rangeW).result();
	viewer.setFuncPath(pathElm, points);
}

function setupCalc(viewer) {
	const calc = getAlgorithm(vals.stepL, vals.rangeN).result();
	viewer.appendPointsPath("calc", calc);
}

function getAlgorithm(step, range) {
	const result = new KuttasThirdOrder;
	result.df = vals.df;
	result.range = range;
	result.value = vals.iv;
	result.step = step;
	return result;
}
	]]></script>
	<defs>
		<marker id="arrow" markerUnits="userSpaceOnUse" orient="auto-start-reverse"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M2,0 L-4,3 -4,-3 Z"/>
		</marker>
		<marker id="calcArrow" markerUnits="userSpaceOnUse" orient="auto"
			markerWidth="20" markerHeight="20" viewBox="-10 -10 20 20">
			<path d="M-4,3 L 1,0 -4,-3"/>
		</marker>
	</defs>
	<g>
		<!-- ステップ。-->
		<g id="step"/>
		<!-- 座標軸。-->
		<g id="axis">
			<foreignObject class="x" width="30" height="30">
				<m:math><m:mi>t</m:mi></m:math>
			</foreignObject>
		</g>
		<!-- 初期値。-->
		<circle id="initialValue" class="iv" r="3"/>
		<!-- 真の値。-->
		<path id="real" class="real"/>
		<!-- 計算値。-->
		<g id="calc" class="calc withArrow"/>
	</g>
</svg>
