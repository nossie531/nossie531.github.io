<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:m="http://www.w3.org/1998/Math/MathML"
	  xml:lang="ja">
	<head>
		<title>Runge-Kutta 法</title>
		<link rel="stylesheet" href="style/base.css"/>
		<script src="lib/base.js"></script>
		<style>/*<![CDATA[*/
/* Polyfill for mtable attributes. */
@namespace m url("http://www.w3.org/1998/Math/MathML");
m|mtable[rowlines$=" solid"] > m|mtr:last-child > m|mtd { border-top: thin solid; }
m|mtable[columnlines^="solid "] > m|mtr > m|mtd:nth-child(2) { border-left: thin solid; }
		/*]]>*/</style>
	</head>
	<body>
		<header>
			<h1><script>Base.insertTitle();</script></h1>
		</header>
		<p>
Runge-Kutta 法は、常微分方程式の初期値問題の数値解法の一種である。
		</p>
		<section>
			<h1>導入</h1>
			<section>
				<h1>問題設定</h1>
				<p>
常微分方程式の初期値問題では、一つの未知変数とその従属変数から勾配が決まるシステムに対し、初期値を与えてそこを通過点とする経路を求める。よくある応用は、未知変数が時刻の場合で、これは初期状態からどのように時間発展するかを求めるのに等しい。
				</p> <p>
イメージとしては、時間を川の流れ、値をそこに浮かべた木の葉のように見立てるといい。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/rungeKuttaIntro.svg"
						style="width: 25rem; height: 15rem;"/>
				</figure>
			</section> <section>
				<h1>基本戦略</h1>
				<p>
時間を細かく区切り、現時点の状況から次時点の状況を求め、そのステップの繰り返しで全体の時間発展を求める。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/rungeKuttaSteps.svg"
						style="width: 25rem; height: 15rem;"/>
				</figure>
				<p>
各ステップごとの計算には様々なバリエーションが知られている。
				</p> <p>
最も単純な方法である陽的 Euler 法では、現時点からの勾配をそのまま延長する。しかしこの場合、ステップ内での勾配の時間変化は完全に無視される。そのため、ステップ幅に対する誤差が大きくなってしまう。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/rungeKuttaEulerStep.svg"
						style="width: 22rem; height: 20rem;"/>
				</figure>
				<p>
そこで、精度を高めるために、現時点から次時点への経路付近にある複数の調査点について、それぞれの勾配の加重平均をとる。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/rungeKuttaAverageStep.svg"
						style="width: 22rem; height: 20rem;"/>
				</figure>
				<p>
なお、計算元となるそれぞれの調査点の位置についても、次時点を計算する場合と同様、他の調査点の勾配の加重平均から計算する。
				</p>
			</section> <section>
				<h1>用語の定義</h1>
				<section>
					<h2>陽解法と陰解法</h2>
					<p>
どの調査点からどの調査点を求めるかについて、大きく分けて二種類の方法がある。
					</p> <p>
陽解法では、既知の調査点 (まずは現時点) から、一つずつ調査点を増やしていく。
					</p> <p>
陰解法では、未知の調査点も含め、それぞれの関係式をまとめ、連立方程式を解く。
					</p> <p>
それぞれの特徴については後述。
					</p>
				</section> <section>
					<h2>段数と次数</h2>
					<p>
段数とは、1 ステップ辺りの調査点の数である。
					</p> <p>
次数とは、近似結果が Tayler 展開のどの次数まで一致するかである。
					</p> <p>
段数が増えると次数も増える傾向にあるが、必ずしも比例するわけではない。
					</p> <p>
よく使われる古典的 Runge-Kutta 法の場合、4 段 4 次である。
					</p>
				</section>
			</section> <section>
				<h1>記号の定義</h1>
				<ul>
					<li>
<m:math><m:mi>s</m:mi></m:math> は段数
					</li> <li>
<m:math><m:mrow><m:mo>∆</m:mo><m:mi>t</m:mi></m:mrow></m:math> はステップ幅
					</li> <li>
<m:math><m:mi>f</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo>,</m:mo><m:mi>v</m:mi><m:mo stretchy="false">)</m:mo></m:math> は座標 <m:math><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo>,</m:mo><m:mi>v</m:mi><m:mo stretchy="false">)</m:mo></m:math> での勾配
					</li> <li>
<m:math><m:mo stretchy="false">(</m:mo><m:msub><m:mi>t</m:mi><m:mi>c</m:mi></m:msub><m:mo>,</m:mo><m:msub><m:mi>v</m:mi><m:mi>c</m:mi></m:msub><m:mo stretchy="false">)</m:mo></m:math> は現時点のステップの座標
					</li> <li>
<m:math><m:mo stretchy="false">(</m:mo><m:msub><m:mi>t</m:mi><m:mi>n</m:mi></m:msub><m:mo>,</m:mo><m:msub><m:mi>v</m:mi><m:mi>n</m:mi></m:msub><m:mo stretchy="false">)</m:mo></m:math> は次時点のステップの座標。
					</li> <li>
<m:math><m:mo stretchy="false">(</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>,</m:mo><m:msub><m:mi>v</m:mi><m:mi>i</m:mi></m:msub><m:mo stretchy="false">)</m:mo></m:math> は <m:math><m:mi>i</m:mi></m:math> 番目の調査点の座標
					</li> <li>
<m:math><m:msub><m:mi>c</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:mo>(</m:mo><m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub><m:mo>-</m:mo><m:msub><m:mi>t</m:mi><m:mi>c</m:mi></m:msub><m:mo>)</m:mo><m:mo>/</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi></m:math>
					</li>
				</ul>
			</section>
		</section>
		<section>
			<h1>具体的な手順</h1>
			<section>
				<h2>ステップの更新式</h2>
				<p>
次時点の値は、それぞれの調査点での勾配の加重平均を現時点の値に加えて求める。
				</p>
				<div class="math">
					<m:math display="block">
						<m:msub><m:mi>v</m:mi><m:mi>n</m:mi></m:msub>
						<m:mo>=</m:mo>
						<m:msub><m:mi>v</m:mi><m:mi>c</m:mi></m:msub>
						<m:mo>+</m:mo>
						<m:mrow>
							<m:mo fence="true">[</m:mo>
							<m:munderover>
								<m:mo>∑</m:mo>
								<m:mrow><m:mi>i</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow>
								<m:mi>s</m:mi>
							</m:munderover>
							<m:mrow>
								<m:msub><m:mi>b</m:mi><m:mi>i</m:mi></m:msub>
								<m:mrow>
									<m:mi>f</m:mi>
									<m:mo stretchy="false">(</m:mo>
									<m:msub><m:mi>t</m:mi><m:mi>i</m:mi></m:msub>
									<m:mo>,</m:mo>
									<m:msub><m:mi>v</m:mi><m:mi>i</m:mi></m:msub>
									<m:mo stretchy="false">)</m:mo>
								</m:mrow>
							</m:mrow>
							<m:mo fence="true">]</m:mo>
						</m:mrow>
						<m:mi mathvariant="normal">∆</m:mi><m:mi>t</m:mi>
					</m:math>
				</div>
				<p>
ここで、<m:math><m:msub><m:mi>b</m:mi><m:mi>i</m:mi></m:msub></m:math> は加重平均用の係数で、<m:math><m:msubsup><m:mo>∑</m:mo><m:mrow><m:mi>i</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow><m:mi>s</m:mi></m:msubsup><m:msub><m:mi>b</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:mn>1</m:mn></m:math> が成り立つ。
				</p> <p>
同様に各調査点の値も、他の調査点での勾配の加重平均から求める。
				</p>
				<div class="math">
					<m:math display="block">
						<m:msub><m:mi>v</m:mi><m:mi>i</m:mi></m:msub>
						<m:mo>=</m:mo>
						<m:msub><m:mi>v</m:mi><m:mi>c</m:mi></m:msub>
						<m:mo>+</m:mo>
						<m:mrow>
							<m:mo fence="true">[</m:mo>
							<m:munderover>
								<m:mo>∑</m:mo>
								<m:mrow><m:mi>j</m:mi><m:mo>=</m:mo><m:mn>1</m:mn></m:mrow>
								<m:mi>s</m:mi>
							</m:munderover>
							<m:mrow>
								<m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub>
								<m:mrow>
									<m:mi>f</m:mi>
									<m:mo stretchy="false">(</m:mo>
									<m:msub><m:mi>t</m:mi><m:mi>j</m:mi></m:msub>
									<m:mo>,</m:mo>
									<m:msub><m:mi>v</m:mi><m:mi>j</m:mi></m:msub>
									<m:mo stretchy="false">)</m:mo>
								</m:mrow>
							</m:mrow>
							<m:mo fence="true">]</m:mo>
						</m:mrow>
						<m:mi mathvariant="normal">∆</m:mi><m:mi>t</m:mi>
					</m:math>
				</div>
				<p>
ここで、<m:math><m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math> も加重平均用の係数で、<m:math><m:msub><m:mi>c</m:mi><m:mi>i</m:mi></m:msub><m:mo>=</m:mo><m:msub><m:mo>∑</m:mo><m:mi>j</m:mi></m:msub><m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math> が成り立つ。
				</p>
				<aside class="normal desc">
					<p>
陽解法の場合、すでに分かっている調査点のみを利用する。<br/>
そのため、<m:math><m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math> における <m:math><m:mi>i</m:mi><m:mo>≦</m:mo><m:mi>j</m:mi></m:math> の要素の成分は全て 0 になる。
					</p>
				</aside>
			</section> <section>
				<h2>Butcher 配列</h2>
				<p>
上述の <m:math><m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math>, <m:math><m:msub><m:mi>b</m:mi><m:mi>i</m:mi></m:msub></m:math>, <m:math><m:msub><m:mi>c</m:mi><m:mi>i</m:mi></m:msub></m:math> の具体的な値はアルゴリズムごとに異なる。
				</p> <p>
精度が良くなるような様々な値の組み合わせが調べられている。
				</p> <p>
これらを系統的に表記するために Butcher 配列と呼ばれる表記法がある。
				</p>
				<div class="math">
<m:math display="block">
	<m:mtable
		rowspacing="0.16em" 
		rowlines="none none none solid"
		columnlines="solid none none none none">
		<m:mtr>
			<m:mtd><m:msub><m:mi>c</m:mi><m:mn>1</m:mn></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mn>11</m:mn></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mn>12</m:mn></m:msub></m:mtd>
			<m:mtd><m:mi>⋯</m:mi> </m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mrow><m:mn>1</m:mn><m:mi>s</m:mi></m:mrow></m:msub></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd><m:msub><m:mi>c</m:mi><m:mn>2</m:mn></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mn>21</m:mn></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mn>22</m:mn></m:msub></m:mtd>
			<m:mtd><m:mi>⋯</m:mi></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mrow><m:mn>2</m:mn><m:mi>s</m:mi></m:mrow></m:msub></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd><m:mi>⋮</m:mi></m:mtd>
			<m:mtd><m:mi>⋮</m:mi></m:mtd>
			<m:mtd><m:mi>⋮</m:mi></m:mtd>
			<m:mtd><m:mi>⋱</m:mi></m:mtd>
			<m:mtd><m:mi>⋮</m:mi></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd><m:msub><m:mi>c</m:mi><m:mi>s</m:mi></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mrow><m:mi>s</m:mi><m:mn>1</m:mn></m:mrow></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mrow><m:mi>s</m:mi><m:mn>2</m:mn></m:mrow></m:msub></m:mtd>
			<m:mtd><m:mi>⋯</m:mi></m:mtd>
			<m:mtd><m:msub><m:mi>a</m:mi><m:mrow><m:mi>s</m:mi><m:mi>s</m:mi></m:mrow></m:msub></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd></m:mtd>
			<m:mtd><m:msub><m:mi>b</m:mi><m:mn>1</m:mn></m:msub></m:mtd>
			<m:mtd><m:msub><m:mi>b</m:mi><m:mn>2</m:mn></m:msub></m:mtd>
			<m:mtd><m:mi>⋯</m:mi></m:mtd>
			<m:mtd><m:msub><m:mi>b</m:mi><m:mi>s</m:mi></m:msub></m:mtd>
		</m:mtr>
	</m:mtable>
</m:math>
				</div>
				<p>
古典的 Runge-Kutta 法の Butcher 配列は以下の通り。
				</p>
				<div class="math">
<m:math display="block">
	<m:mtable
		rowspacing="0.16em"
		rowlines="none none none solid"
		columnlines="solid none none none none">
		<m:mtr>
			<m:mtd><m:mn>0</m:mn></m:mtd>
			<m:mtd></m:mtd>
			<m:mtd></m:mtd>
			<m:mtd></m:mtd>
			<m:mtd></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>2</m:mn></m:mtd>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>2</m:mn></m:mtd>
			<m:mtd></m:mtd>
			<m:mtd></m:mtd>
			<m:mtd></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>2</m:mn></m:mtd>
			<m:mtd><m:mn>0</m:mn></m:mtd>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>2</m:mn></m:mtd>
			<m:mtd></m:mtd>
			<m:mtd></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd><m:mn>1</m:mn></m:mtd>
			<m:mtd><m:mn>0</m:mn></m:mtd>
			<m:mtd><m:mn>0</m:mn></m:mtd>
			<m:mtd><m:mn>1</m:mn></m:mtd>
			<m:mtd></m:mtd>
		</m:mtr> <m:mtr>
			<m:mtd></m:mtd>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>6</m:mn></m:mtd>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>3</m:mn></m:mtd>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>3</m:mn></m:mtd>
			<m:mtd><m:mn>1</m:mn><m:mo lspace="0" rspace="0">/</m:mo><m:mn>6</m:mn></m:mtd>
		</m:mtr>
	</m:mtable>
</m:math>
				</div>
				<aside class="normal desc">
					<p>
陽解法の場合、古典的 Runge-Kutta 法を含めて、前述の通り <m:math><m:msub><m:mi>a</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math> における <m:math><m:mi>i</m:mi><m:mo>≦</m:mo><m:mi>j</m:mi></m:math> の要素の成分は全て 0 になる。そのため、上三角部分は記載しない事が多い。
					</p>
				</aside>
			</section>
		</section> <section>
			<h1>各種アルゴリズム</h1>
			<section>
				<h1>陽解法</h1>
				<p>
以下のような特徴がある。
				</p>
				<section>
					<h2>応用範囲</h2>
					<p>
陰解法に比べると単純で実装しやすく、精度はさておき任意の問題に適用できる。
					</p> <p>
これは陰解法と異なり、必要な作業が勾配関数の適用とその結果の線形結合のみで、本質的に難しい内容を含まないためである。
					</p>
				</section> <section>
					<h2>解の安定性</h2>
					<p>
ステップ幅に対して勾配が大きすぎる場合、時間を追うごとに誤差の絶対値が拡大して解が不安定になりやすい (このような特徴を持つ方程式は「硬い方程式」と呼ばれる)。
					</p>
					<div class="cmpFigure full">
						<figure class="normal">
							<iframe loading="lazy"
								src="img/rungeKuttaExplicitVsSmallDc.svg"
								style="aspect-ratio: 23/18;"/>
							<figcaption>勾配小 → 安定</figcaption>
						</figure>
						<figure class="normal">
							<iframe loading="lazy"
								src="img/rungeKuttaExplicitVsLargeDc.svg"
								style="aspect-ratio: 23/18;"/>
							<figcaption>勾配大 → 不安定</figcaption>
						</figure>
					</div>
				</section> <section>
					<h2>高次の場合</h2>
					<p>
次数を上げて精度を上げれば、解の安定性も多少はましになるが、任意の次数をとる方法は 2025 年現在、計算機科学上の未解決問題である。そのため、次数を動的にはできず、すでに知られた特定の次数の解法を使うことになる。
					</p>
				</section>
			</section> <section>
				<h1>陰解法</h1>
				<section>
					<h2>応用範囲</h2>
					<p>
陽解法に比べると複雑で実装しにくい。また、特定の問題にしか適用できない。なぜなら、勾配関数が非線形の場合、それを含んだ連立方程式を解析的に扱うのは困難である。また、連立方程式が巨大になった場合、数値的にそれをどのように解くかも課題となる (直接法か反復法かなど)。
					</p>
				</section> <section>
					<h2>解の安定性</h2>
					<p>
安定化しやすい。特に、Butcher 配列の上三角成分が優位、つまり陰解法中の陽解法としての特徴が少ない場合、それに伴い安定性が高まる。完全な陰解法では、元の関数が発散しなければ、計算結果も必ず安定化する。この特徴は陽解法が現時点から未来を予想する方向で計算するのに対し、陰解法では未来から現時点への逆算が適切に現時点へつながるよう調整していることによる。
					</p>
					<div class="cmpFigure full">
						<figure class="normal">
							<iframe loading="lazy"
								src="img/rungeKuttaImplicitVsSmallDc.svg"
								style="aspect-ratio: 23/18;"/>
							<figcaption>勾配小 → 安定</figcaption>
						</figure>
						<figure class="normal">
							<iframe loading="lazy"
								src="img/rungeKuttaImplicitVsLargeDc.svg"
								style="aspect-ratio: 23/18;"/>
							<figcaption>勾配大 → 安定</figcaption>
						</figure>
					</div>
				</section> <section>
					<h2>高次の場合</h2>
					<p>
陰解法では、任意の次数をとる方法 (Gauss–Legendre 法など) が知られている。
					</p> <p>
しかし、高次になると、内部で使用する連立方程式も解きにくくなる事が多い。
					</p>
				</section>
			</section>
		</section>
	</body>
</html>
