<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	  xmlns:m="http://www.w3.org/1998/Math/MathML"
	  xml:lang="ja">
	<head>
		<title>ネットワーク上の微分方程式</title>
		<link rel="stylesheet" href="style/base.css"/>
		<link rel="stylesheet" href="style/mathMlPolyfill.css"/>
		<link rel="stylesheet" href="style/netDiffEq.css"/>
		<script src="../../lib/doc.js"></script>
	</head>
	<body>
		<header>
			<h1><doc-title/></h1>
		</header>
		<p>
ネットワーク上の微分方程式とその初期値問題について。
		</p>
		<section>
			<h1>導入</h1>
			<section>
				<h1>問題設定</h1>
				<p>
対象のネットワークでは、各ノードが重みつきのエッジを通して影響を与えあう。
				</p> <p>
この状況で各ノードの値がどのように時間発展していくかを求める。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/diffEqNetwork.svg"
						style="height: 15rem;"/>
					<figcaption>ネットワークの例</figcaption>
				</figure>
			</section> <section>
				<h1>応用例</h1>
				<p>
ネットワーク上の拡散方程式もこの問題として扱える。この場合、エッジで接続された二つのノードは両者の値の差とエッジの重みに比例して、互いを平均化する方向に値を移動させる。これは集団での金銭の助け合いや、物理での熱交換のモデルにもなる。
				</p> <p>
なおこの場合、片方のノードへの加算量がもう片方のノードへの減算量となるよう、エッジとその逆方向のエッジの重みは等しくなる。また、ノードの値は他のノードとのやり取り以外では増減しないので、ノードの自身へのエッジは 0 になる。
				</p>
			</section> <section>
				<h1>記号の定義</h1>
				<ul>
					<li>
<m:math><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:math> は時刻 <m:math><m:mi>t</m:mi></m:math> のノード値からなるベクトル、<m:math><m:msub><m:mi>n</m:mi><m:mi>i</m:mi></m:msub><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:math> はその各成分
					</li> <li>
<m:math><m:mi>𝐖</m:mi></m:math> はネットワークの<a href="#adjMat">隣接行列</a>、<m:math><m:msub><m:mi>w</m:mi><m:mrow><m:mi>i</m:mi><m:mi>j</m:mi></m:mrow></m:msub></m:math> はその各成分
					</li> <li>
<m:math><m:mi>𝐃</m:mi></m:math> はネットワークの<a href="#degMat">次数行列</a>
					</li> <li>
<m:math><m:mi>𝐋</m:mi></m:math> はネットワークの<a href="#lapMat">ラプラシアン行列</a>
					</li>
				</ul>
			</section> <section>
				<h1>用語の定義</h1>
				<section>
					<h2 id="adjMat">隣接行列</h2>
					<p>
これはネットワークの各エッジについての重みを記載した正方行列である。
					</p> <p>
行列の <m:math><m:mi>i</m:mi></m:math> 行 <m:math><m:mi>j</m:mi></m:math> 列はノード番号 <m:math><m:mi>i</m:mi></m:math> へのノード番号 <m:math><m:mi>j</m:mi></m:math> からのエッジの重みである。
					</p>
				</section> <section>
					<h2 id="degMat">次数行列</h2>
					<p>
これはネットワークの各ノードの次数を記載した対角行列である。
					</p> <p>
ここで次数 (入次数) はノードを終点とするエッジの重みの総量である。
					</p>
				</section> <section>
					<h2 id="lapMat">ラプラシアン行列</h2>
					<p>
これは隣接行列から次数行列を引いてできる正方行列である。
					</p>
					<div class="math">
<m:math display="block">
	<m:mi>𝐋</m:mi><m:mo>=</m:mo><m:mi>𝐖</m:mi><m:mo>-</m:mo><m:mi>𝐃</m:mi>
</m:math>
					</div>
					<p>
拡散方程式では、この行列とノードの値からなるベクトルの積をとると、各ノードの値の単位時間あたりの変化量のベクトルが得られる。これが可能となるのは、拡散方程式が比例関係のみを扱っていて、時間発展が線形操作となるためである。つまり、拡散方程式での微分方程式は以下のように表せる。
					</p>
					<div class="math">
<m:math display="block">
	<m:mfrac>
		<m:mi>d</m:mi>
		<m:mrow><m:mi>d</m:mi><m:mi>t</m:mi></m:mrow>
	</m:mfrac>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:mi>𝐋</m:mi>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
</m:math>
					</div>
				</section>
			</section>
		</section> <section>
			<h1>Runge-Kutta 法</h1>
			<p>
代表的な初期値問題の解法『<a href="rungeKutta.xhtml">Runge-Kutta 法</a>』を使った場合について。
			</p> <p>
以下の特徴があるため、拡散方程式のような問題とはやや相性が悪い。
			</p>
			<section>
				<h2>特徴 1. 安定性</h2>
				<p>
陽解法では、真の解の勾配が大きいと数値解が不安定になる (硬い方程式)。
				</p>
			</section> <section>
				<h2>特徴 2. 速度</h2>
				<p>
陰解法では、密なネットワークにも対応しようとすると遅くなる。
				<p> </p>
なぜなら、<a href="linearEq.xhtml">連立線形方程式</a>の行列が密になり、<a href="linearEq.xhtml#iterativeMethod">反復法</a>でなく<a href="linearEq.xhtml#directMethod">直接法</a>が必要となる。
				</p>
			</section> <section>
				<h2>特徴 3. 精度</h2>
				<p>
精度が低い。次数を上げれば改善されるが、アルゴリズムも複雑になる。
				</p> <p>
後述の例では 1 次と 2 次で全体の傾向を示しているが、高次でもこの傾向は変わらない。
				</p>
			</section> <section>
				<h1>1 次の陽解法</h1>
				<p>
現時点からの傾きを延長して次時点の値を求める。
				</p> <p>
つまり、<m:math><m:mrow><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:mrow><m:mo>=</m:mo><m:mrow><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:mrow><m:mo>+</m:mo><m:mi>𝐋</m:mi><m:mrow><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:mrow><m:mo>∆</m:mo><m:mi>t</m:mi></m:math> として計算する。
				</p> <p>
以下は、2 個のノードの拡散方程式における 1 ステップの計算イメージ。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/diffEqExplicit.svg"
						style="height: 23rem;"/>
					<figcaption>陽解法での計算</figcaption>
				</figure>
				<p>
以下は、2 個のノードの拡散方程式における複数ステップの計算イメージ。勾配がステップ幅に対して大きすぎると、誤差が発振して不安定になる。
				</p>
				<div class="cmpFigure full">
					<figure class="normal">
						<iframe loading="lazy"
							src="img/diffEqExplicitVsSmallDc.svg"
							style="aspect-ratio: 27/22;"/>
						<figcaption>勾配小 → 安定</figcaption>
					</figure>
					<figure class="normal">
						<iframe loading="lazy"
							src="img/diffEqExplicitVsLargeDc.svg"
							style="aspect-ratio: 27/22;"/>
						<figcaption>勾配大 → 不安定</figcaption>
					</figure>
				</div>
			</section> <section>
				<h1>1 次の陰解法</h1>
				<p>
次時点からの傾きが現時点に繋がるよう、次時点の値を調整する。
				</p> <p>
つまり、次の連立線形方程式を <m:math><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:math> について解けばよい。
				</p>
				<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>+</m:mo>
	<m:mi>𝐋</m:mi>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>∆</m:mo><m:mi>t</m:mi>
</m:math>				
				</div>
				<p>
以下は、2 個のノードの拡散方程式における 1 ステップの計算イメージ。
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/diffEqImplicit.svg"
						style="height: 23rem;"/>
					<figcaption>陰解法での計算</figcaption>
				</figure>
				<p>
以下は、2 個のノードの拡散方程式における複数ステップの計算イメージ。勾配とステップ幅の大きさによらず、無条件安定となる。
				</p>
				<div class="cmpFigure full">
					<figure class="normal">
						<iframe loading="lazy"
							src="img/diffEqImplicitVsSmallDc.svg"
							style="aspect-ratio: 27/22;"/>
						<figcaption>傾き小 → 安定</figcaption>
					</figure>
					<figure class="normal">
						<iframe loading="lazy"
							src="img/diffEqImplicitVsLargeDc.svg"
							style="aspect-ratio: 27/22;"/>
						<figcaption>傾き大 → 安定</figcaption>
					</figure>
				</div>
			</section> <section>
				<h1>2 次の陰解法 <span class="navNone">(Crank-Nicolson 法)</span></h1>
				<p>
現時点と次時点の傾きの平均が、次時点に繋がるよう次時点を調整する。
				</p> <p>
つまり、次の連立線形方程式を <m:math><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi><m:mo stretchy="false">)</m:mo></m:math> について解けばよい。
				</p>
				<div class="math">
<m:math display="block">
	<m:mi>𝒏</m:mi>
	<m:mo stretchy="false">(</m:mo>
	<m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi>
	<m:mo stretchy="false">)</m:mo>
	<m:mo>=</m:mo>
	<m:mrow>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mo>+</m:mo>
		<m:mrow>
			<m:mfrac>
				<m:mn>1</m:mn>
				<m:mn>2</m:mn>
			</m:mfrac>
			<m:mi>𝐋</m:mi>
			<m:mrow>
				<m:mi>𝒏</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>t</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mo>∆</m:mo><m:mi>t</m:mi>
		</m:mrow>
		<m:mo>+</m:mo>
		<m:mrow>
			<m:mfrac>
				<m:mn>1</m:mn>
				<m:mn>2</m:mn>
			</m:mfrac>
			<m:mi>𝐋</m:mi>
			<m:mrow>
				<m:mi>𝒏</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>t</m:mi><m:mo>+</m:mo><m:mo>∆</m:mo><m:mi>t</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mo>∆</m:mo><m:mi>t</m:mi>
		</m:mrow>
	</m:mrow>
</m:math>
				</div>
				<p>
以下は、2 個のノードの拡散方程式における 1 ステップの計算イメージ。 
				</p>
				<figure class="normal">
					<iframe loading="lazy"
						src="img/diffEqCrankNicolson.svg"
						style="height: 23rem;"/>
					<figcaption>Crank-Nicolson 法での計算</figcaption>
				</figure>
				<p>
以下は、2 個のノードの拡散方程式における複数ステップの計算イメージ。勾配が大きいと振動することもあるが、その振幅はステップごとに減衰していく。
				</p>
				<div class="cmpFigure full">
					<figure class="normal">
						<iframe loading="lazy"
							src="img/diffEqCrankNicolsonVsSmallDc.svg"
							style="aspect-ratio: 27/22;"/>
						<figcaption>勾配小 → 安定</figcaption>
					</figure>
					<figure class="normal">
						<iframe loading="lazy"
							src="img/diffEqCrankNicolsonVsLargeDc.svg"
							style="aspect-ratio: 27/22;"/>
						<figcaption>勾配大 → 安定 (振動あり)</figcaption>
					</figure>
				</div>
			</section>
		</section> <section>
			<h1>Exponential-Integrator</h1>
			<p>
系の線形成分を分離して計算し、それについての誤差をほぼなくす。
			</p> <p>
なお、拡散方程式は線形操作のみで構成されるため、この手法は特に有効である。
			</p> <p>
以下は、2 個のノードの拡散方程式における 1 ステップの計算イメージ。ステップ幅を巨大にしているにも関わらず、誤差がほぼないのが特徴的である。
			</p>
			<figure class="normal">
				<iframe loading="lazy"
					src="img/diffEqExpIntegrator.svg"
					style="width: 38rem; aspect-ratio: 38/23;"/>
				<figcaption>Exponential-Integrator での計算</figcaption>
			</figure>
			<section>
				<h1>成分の分離</h1>
				<p>
線形成分と非線形成分の分離について。
				</p>
				<section>
					<h2>微分方程式の分解</h2>
					<p>
微分方程式の線形成分と非線形成分を分けて以下のように記述する。
					</p>
					<div class="math">
<m:math display="block">
	<m:mfrac>
		<m:mi>d</m:mi>
		<m:mrow><m:mi>d</m:mi><m:mi>t</m:mi></m:mrow>
	</m:mfrac>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:mi>𝐋</m:mi>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>+</m:mo>
	<m:mrow>
		<m:mi>𝒇</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo>,</m:mo>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mo>)</m:mo>
	</m:mrow>
</m:math>
					</div>
					<p>
ここで、右辺の第一項は拡散方程式と同じ形式となる。
					</p> <p>
そして、右辺の第二項では非線形成分をまとめておく。
					</p>
				</section> <section>
					<h2>微分方程式の解析解</h2>
					<p>
上記の微分方程式の特殊解から (解法は<a href="#diffEqSol">後述</a>)、時刻 <m:math><m:mo>∆</m:mo><m:mi>t</m:mi></m:math> の状況は以下で求まる。
					</p>
					<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mo>∆</m:mo><m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mi>𝐋</m:mi><m:mo>∆</m:mo><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>0</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>+</m:mo>
	<m:mrow>
		<m:msubsup>
			<m:mo>∫</m:mo>
			<m:mi>0</m:mi>
			<m:mrow><m:mo>∆</m:mo><m:mi>t</m:mi></m:mrow>
		</m:msubsup>
		<m:mrow>
			<m:msup>
				<m:mi>e</m:mi>
				<m:mrow>
					<m:mi>𝐋</m:mi>
					<m:mo stretchy="false">(</m:mo>
					<m:mo>∆</m:mo><m:mi>t</m:mi><m:mo>-</m:mo><m:mi>t</m:mi>
					<m:mo stretchy="false">)</m:mo>
				</m:mrow>
			</m:msup>
			<m:mrow>
				<m:mi>𝒇</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mrow>
					<m:mi>𝒏</m:mi>
					<m:mo stretchy="false">(</m:mo>
					<m:mi>t</m:mi>
					<m:mo stretchy="false">)</m:mo>
				</m:mrow>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mi>d</m:mi>
			<m:mi>t</m:mi>
		</m:mrow>
	</m:mrow>
</m:math>
					</div>
					<p>
ここで、右辺の第一項と第二項は以下の特徴を持つ。
					</p> <p>
第一項: 線形成分のみで表される。厳密解を計算可能。
					</p> <p>
第二項: 非線形成分がないとゼロになる。近似解は計算可能。
					</p>
				</section> <section>
					<h2 id="diffEqSol">微分方程式の解法</h2>
					<p>
上記の微分方程式は以下の手順で解ける。
					</p>
					<section>
						<h3>一般解</h3>
						<ol>
							<li>
								<p>
両辺に <m:math><m:msup><m:mi>e</m:mi><m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow></m:msup></m:math> を乗算。
								</p>
								<div class="math">
<m:math display="block">
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mfrac>
		<m:mi>d</m:mi>
		<m:mrow><m:mi>d</m:mi><m:mi>t</m:mi></m:mrow>
	</m:mfrac>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mi>𝐋</m:mi>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>+</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mrow>
		<m:mi>𝒇</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo>,</m:mo>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
</m:math>
								</div>
							</li> <li>
								<p>
右辺の第一項を左辺へ移行。
								</p>
								<div class="math">
<m:math display="block">
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mfrac>
		<m:mi>d</m:mi>
		<m:mrow><m:mi>d</m:mi><m:mi>t</m:mi></m:mrow>
	</m:mfrac>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>-</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mi>𝐋</m:mi>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mrow>
		<m:mi>𝒇</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo>,</m:mo>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
</m:math>
								</div>
							</li> <li>
								<p>
左辺を積の微分として解釈。
								</p>
								<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mfrac>
			<m:mi>d</m:mi>
			<m:mrow><m:mi>d</m:mi><m:mi>t</m:mi></m:mrow>
		</m:mfrac>
		<m:mo stretchy="false">(</m:mo>
		<m:msup>
			<m:mi>e</m:mi>
			<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
		</m:msup>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mrow>
		<m:mi>𝒇</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo>,</m:mo>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
</m:math>
								</div>
							</li> <li>
								<p>
両辺を積分 (<m:math><m:mi>C</m:mi></m:math> は積分定数)。
								</p>
								<div class="math">
<m:math display="block">
	<m:mrow>
		<m:msup>
			<m:mi>e</m:mi>
			<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
		</m:msup>
		<m:mrow>
			<m:mi>𝒏</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
	</m:mrow>
	<m:mo>+</m:mo>
	<m:mi>C</m:mi>
	<m:mo>=</m:mo>
	<m:mrow>
		<m:mo>∫</m:mo>
		<m:msup>
			<m:mi>e</m:mi>
			<m:mrow><m:mo>-</m:mo><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
		</m:msup>
		<m:mrow>
			<m:mi>𝒇</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>s</m:mi>
			<m:mo>,</m:mo>
			<m:mrow>
				<m:mi>𝒏</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>t</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mi>d</m:mi>
		<m:mi>t</m:mi>
	</m:mrow>
</m:math>
								</div>
							</li> <li>
								<p>
式を整理 (右辺の積分変数は <m:math><m:mi>t</m:mi></m:math> から <m:math><m:mi>s</m:mi></m:math> に変更)。
								</p>
								<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:mo>-</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mi>C</m:mi>
	<m:mo>+</m:mo>
	<m:mrow>
		<m:mo>∫</m:mo>
		<m:msup>
			<m:mi>e</m:mi>
			<m:mrow>
				<m:mi>𝐋</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>t</m:mi><m:mo>-</m:mo><m:mi>s</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
		</m:msup>
		<m:mrow>
			<m:mi>𝒇</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo>,</m:mo>
			<m:mrow>
				<m:mi>𝒏</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>s</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mi>d</m:mi>
		<m:mi>s</m:mi>
	</m:mrow>
</m:math>
								</div>
							</li>
						</ol>
					</section> <section>
						<h3>
<m:math><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>0</m:mi><m:mo stretchy="false">)</m:mo></m:math> を通る特殊解
						</h3>
						<ol>
							<li>
								<p>
一般解より <m:math><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mi>0</m:mi><m:mo stretchy="false">)</m:mo></m:math> を導出。
								</p>
								<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>0</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:mo>-</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mi>𝐋</m:mi><m:mn>0</m:mn></m:mrow>
	</m:msup>
	<m:mi>C</m:mi>
	<m:mo>+</m:mo>
	<m:mrow>
		<m:msubsup>
			<m:mo>∫</m:mo>
			<m:mn>0</m:mn>
			<m:mn>0</m:mn>
		</m:msubsup>
		<m:msup>
			<m:mi>e</m:mi>
			<m:mrow>
				<m:mi>𝐋</m:mi>
				<m:mo stretchy="false">(</m:mo><m:mi>t</m:mi><m:mo>-</m:mo><m:mi>s</m:mi><m:mo stretchy="false">)</m:mo>
			</m:mrow>
		</m:msup>
		<m:mrow>
			<m:mi>𝒇</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo>,</m:mo>
			<m:mrow>
				<m:mi>𝒏</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>s</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mi>d</m:mi>
		<m:mi>s</m:mi>
	</m:mrow>
</m:math>
								</div>
							</li> <li>
								<p>
式を簡単化して <m:math><m:mi>C</m:mi></m:math> の値を導出。
								</p>
								<div class="math">
<m:math display="block">
	<m:mi>C</m:mi>
	<m:mo>=</m:mo>
	<m:mo>-</m:mo>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>0</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
</m:math>
								</div>
							</li> <li>
								<p>
導出した <m:math><m:mi>C</m:mi></m:math> の値を一般解に代入。
								</p>
								<div class="math">
<m:math display="block">
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mi>t</m:mi>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>=</m:mo>
	<m:msup>
		<m:mi>e</m:mi>
		<m:mrow><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow>
	</m:msup>
	<m:mrow>
		<m:mi>𝒏</m:mi>
		<m:mo stretchy="false">(</m:mo>
		<m:mn>0</m:mn>
		<m:mo stretchy="false">)</m:mo>
	</m:mrow>
	<m:mo>+</m:mo>
	<m:mrow>
		<m:mo>∫</m:mo>
		<m:msup>
			<m:mi>e</m:mi>
			<m:mrow>
				<m:mi>𝐋</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>t</m:mi><m:mo>-</m:mo><m:mi>s</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
		</m:msup>
		<m:mrow>
			<m:mi>𝒇</m:mi>
			<m:mo stretchy="false">(</m:mo>
			<m:mi>t</m:mi>
			<m:mo>,</m:mo>
			<m:mrow>
				<m:mi>𝒏</m:mi>
				<m:mo stretchy="false">(</m:mo>
				<m:mi>s</m:mi>
				<m:mo stretchy="false">)</m:mo>
			</m:mrow>
			<m:mo stretchy="false">)</m:mo>
		</m:mrow>
		<m:mi>d</m:mi>
		<m:mi>s</m:mi>
	</m:mrow>
</m:math>
								</div>
							</li>
						</ol>
					</section>
				</section>
			</section> <section>
				<h1>計算の高速化</h1>
				<p>
『<a href="expMatVec.xhtml">行列指数関数とベクトルの積</a>』で紹介する方法を使うと、<m:math><m:msup><m:mi>e</m:mi><m:mrow><m:mi>𝐋</m:mi><m:mi>t</m:mi></m:mrow></m:msup><m:mrow><m:mi>𝒏</m:mi><m:mo stretchy="false">(</m:mo><m:mn>0</m:mn><m:mo stretchy="false">)</m:mo></m:mrow></m:math> のような箇所の時間計算量をかなり小さくできる。
				</p>
			</section> <section>
				<h1>非線形成分の近似</h1>
				<p class="todo">
TODO: 追記予定？
				</p>
			</section>
		</section>
	</body>
</html>
